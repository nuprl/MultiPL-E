{
  "name": "HumanEval_121_solution",
  "language": "go_test.go",
  "prompt": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n",
  "tests": "func TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    // write your code in Go 1.0\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp1pw1fmae_test.go:46: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp1pw1fmae_test.go:46: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp1pw1fmae_test.go:46: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp1pw1fmae_test.go:46: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp1pw1fmae_test.go:46: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp1pw1fmae_test.go:46: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpji1c8ph3_test.go:48: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpji1c8ph3_test.go:48: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpji1c8ph3_test.go:48: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpji1c8ph3_test.go:48: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpji1c8ph3_test.go:48: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpji1c8ph3_test.go:48: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        sum += lst[i]\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=12)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=5)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=23)', got '%!s(int=45)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=3)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    \n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        sum += lst[i]\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=12)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=5)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=23)', got '%!s(int=45)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=3)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp0ul65nnb_test.go:48: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp0ul65nnb_test.go:48: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp0ul65nnb_test.go:48: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp0ul65nnb_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    \n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    \n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmptyqzhq8h_test.go:50: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmptyqzhq8h_test.go:50: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmptyqzhq8h_test.go:50: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmptyqzhq8h_test.go:50: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmptyqzhq8h_test.go:50: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmptyqzhq8h_test.go:50: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, i := range lst {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, i := range lst {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmplglu526s_test.go:48: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmplglu526s_test.go:48: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmplglu526s_test.go:48: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmplglu526s_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    \n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    \n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpprej3msh_test.go:50: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpprej3msh_test.go:50: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpprej3msh_test.go:50: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpprej3msh_test.go:50: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp640vze4a_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp640vze4a_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp640vze4a_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp640vze4a_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp640vze4a_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp640vze4a_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp640vze4a_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            continue\n        }\n        sum += lst[i]\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp60bz2eh9_test.go:49: expected '%!s(int=12)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp60bz2eh9_test.go:49: expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp60bz2eh9_test.go:49: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp60bz2eh9_test.go:49: expected '%!s(int=5)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp60bz2eh9_test.go:49: expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp60bz2eh9_test.go:49: expected '%!s(int=23)', got '%!s(int=45)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp60bz2eh9_test.go:49: expected '%!s(int=3)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp2xwgad7d_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, i := range lst {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    \n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    \n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmptyqzhq8h_test.go:50: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmptyqzhq8h_test.go:50: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmptyqzhq8h_test.go:50: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmptyqzhq8h_test.go:50: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmptyqzhq8h_test.go:50: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmptyqzhq8h_test.go:50: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, i := range lst {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, i := range lst {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpeu37aic1_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    \n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            continue\n        }\n        sum += lst[i]\n    }\n    \n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmphuya3_n2_test.go:51: expected '%!s(int=12)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmphuya3_n2_test.go:51: expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmphuya3_n2_test.go:51: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmphuya3_n2_test.go:51: expected '%!s(int=5)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmphuya3_n2_test.go:51: expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmphuya3_n2_test.go:51: expected '%!s(int=23)', got '%!s(int=45)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmphuya3_n2_test.go:51: expected '%!s(int=3)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    // write your code in Go 1.4\n    var sum int\n    for _, i := range lst {\n        if i%2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpr2uajj1n_test.go:46: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpr2uajj1n_test.go:46: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpr2uajj1n_test.go:46: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpr2uajj1n_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpr2uajj1n_test.go:46: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpr2uajj1n_test.go:46: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpr2uajj1n_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpwh3gj3ud_test.go:48: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpwh3gj3ud_test.go:48: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpwh3gj3ud_test.go:48: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpwh3gj3ud_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpm8n9dgg__test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    \n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        sum += lst[i]\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=12)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=5)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=23)', got '%!s(int=45)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=3)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    \n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        sum += lst[i]\n    }\n    \n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp5w2thi0x_test.go:51: expected '%!s(int=12)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp5w2thi0x_test.go:51: expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp5w2thi0x_test.go:51: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp5w2thi0x_test.go:51: expected '%!s(int=5)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp5w2thi0x_test.go:51: expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp5w2thi0x_test.go:51: expected '%!s(int=23)', got '%!s(int=45)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp5w2thi0x_test.go:51: expected '%!s(int=3)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpji1c8ph3_test.go:48: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpji1c8ph3_test.go:48: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpji1c8ph3_test.go:48: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpji1c8ph3_test.go:48: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpji1c8ph3_test.go:48: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpji1c8ph3_test.go:48: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        sum += lst[i]\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=12)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=5)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=23)', got '%!s(int=45)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3hbvy81__test.go:49: expected '%!s(int=3)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp9m2pahg5_test.go:48: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp9m2pahg5_test.go:48: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp9m2pahg5_test.go:48: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp9m2pahg5_test.go:48: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp9m2pahg5_test.go:48: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp9m2pahg5_test.go:48: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp4u3_jkkn_test.go:48: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp4u3_jkkn_test.go:48: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp4u3_jkkn_test.go:48: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp4u3_jkkn_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp0ul65nnb_test.go:48: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp0ul65nnb_test.go:48: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp0ul65nnb_test.go:48: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp0ul65nnb_test.go:48: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v%2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3wjex6cs_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, v := range lst {\n        if v % 2 == 1 {\n            sum += v\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpf9r5qtgd_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpf9r5qtgd_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpf9r5qtgd_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpf9r5qtgd_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpf9r5qtgd_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpf9r5qtgd_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp8lkqfgix_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 && i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374753,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    \n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            continue\n        }\n        sum += lst[i]\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=12)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=9)', got '%!s(int=6)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=5)', got '%!s(int=9)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=0)', got '%!s(int=4)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=23)', got '%!s(int=45)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpb0_s60tu_test.go:50: expected '%!s(int=3)', got '%!s(int=22)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmps02fz21e_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=12)', got '%!s(int=8)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=0)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=23)', got '%!s(int=62)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp5qs5g1tr_test.go:45: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i]%2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp3cyxpgs9_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if lst[i] % 2 == 1 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__0 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=12)', got '%!s(int=13)'\n    --- FAIL: TestSolution/test_num__1 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=9)', got '%!s(int=15)'\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=0)', got '%!s(int=334)'\n    --- FAIL: TestSolution/test_num__3 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=5)', got '%!s(int=14)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=23)', got '%!s(int=36)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpul5a712d_test.go:45: expected '%!s(int=3)', got '%!s(int=25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    sum := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpfozcmc7c_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmpty08d0g1_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for i := 0; i < len(lst); i++ {\n        if i%2 == 0 {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfunc TestSolution(t *testing.T) {\n  candidate := solution\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 8, 7, 1}), expected: 12 },\n     { actual: candidate([]int{3, 3, 3, 3, 3}), expected: 9 },\n     { actual: candidate([]int{30, 13, 24, 321}), expected: 0 },\n     { actual: candidate([]int{5, 9}), expected: 5 },\n     { actual: candidate([]int{2, 4, 8}), expected: 0 },\n     { actual: candidate([]int{30, 13, 23, 32}), expected: 23 },\n     { actual: candidate([]int{3, 13, 2, 9}), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "--- FAIL: TestSolution (0.00s)\n    --- FAIL: TestSolution/test_num__2 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=54)'\n    --- FAIL: TestSolution/test_num__4 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=0)', got '%!s(int=10)'\n    --- FAIL: TestSolution/test_num__5 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=23)', got '%!s(int=53)'\n    --- FAIL: TestSolution/test_num__6 (0.00s)\n        tmp_f3tcxzk_test.go:45: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}