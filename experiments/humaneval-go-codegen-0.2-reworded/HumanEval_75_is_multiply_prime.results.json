{
  "name": "HumanEval_75_is_multiply_prime",
  "language": "go_test.go",
  "prompt": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n",
  "tests": "func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < 100; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpghjsbopo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return true\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp_hrcara__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmphqpnkx79_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105), expected: true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729), expected: false },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374865,
      "stdout": "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp7x_onfuu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}