name: HumanEval_108_count_nums
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function count_nums which takes a list of integers and\
  \ returns\n    // the number of elements which has a sum of digits > 0.\n    //\
  \ If a number is negative, then its first signed digit will be negative:\n    //\
  \ e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n\
  \    // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,\
  \ (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,\
  \ (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new\
  \ List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))\
  \ == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,\
  \ (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))\
  \ == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,\
  \ (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
completions: ["        long count = 0;\n        foreach (long num in arr) {\n    \
    \        long sum = 0;\n            long n = num;\n            while (n != 0)\
    \ {\n                sum += Math.Abs(n % 10);\n                n /= 10;\n    \
    \        }\n            if (sum > 0) {\n                count++;\n           \
    \ }\n        }\n        return count;", "        long count = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            long sum = 0;\n            long\
    \ num = arr[i];\n            if (num < 0) {\n                sum += num;\n   \
    \             num = -num;\n            }\n            while (num > 0) {\n    \
    \            sum += num % 10;\n                num /= 10;\n            }\n   \
    \         if (sum > 0) {\n                count++;\n            }\n        }\n\
    \        return count;", "        long count = 0;\n        foreach (long i in\
    \ arr) {\n            long sum = 0;\n            long n = i;\n            if (n\
    \ < 0) {\n                sum += n % 10;\n                n /= 10;\n         \
    \   }\n            while (n != 0) {\n                sum += n % 10;\n        \
    \        n /= 10;\n            }\n            if (sum > 0) {\n               \
    \ count++;\n            }\n        }\n        return count;", "        return\
    \ arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0')) > 0);", "        //\
    \ Your code goes here.\n        return 0;", "        return arr.Count(x => x.ToString().Sum(c\
    \ => c - '0') > 0);", "        long count = 0;\n        foreach (long num in arr)\
    \ {\n            long sum = 0;\n            long n = num;\n            if (n <\
    \ 0) {\n                sum += n % 10;\n                n = -n / 10;\n       \
    \     }\n            while (n > 0) {\n                sum += n % 10;\n       \
    \         n /= 10;\n            }\n            if (sum > 0) {\n              \
    \  count++;\n            }\n        }\n        return count;", "        long count\
    \ = 0;\n        foreach (long num in arr) {\n            long sum = 0;\n     \
    \       long n = num;\n            if (n < 0) {\n                sum += n % 10;\n\
    \                n = -(n / 10);\n            }\n            while (n > 0) {\n\
    \                sum += n % 10;\n                n /= 10;\n            }\n   \
    \         if (sum > 0) {\n                count++;\n            }\n        }\n\
    \        return count;", "        // Your code here\n        return 0;", "   \
    \     long count = 0;\n        foreach (long num in arr) {\n            long sum\
    \ = 0;\n            if (num < 0) {\n                sum += Math.Abs(num) % 10;\n\
    \                num = -num / 10;\n            }\n            while (num > 0)\
    \ {\n                sum += num % 10;\n                num /= 10;\n          \
    \  }\n            if (sum > 0) {\n                count++;\n            }\n  \
    \      }\n        return count;", "        return arr.Count(x => x.ToString().Select(y\
    \ => y - '0').Sum() > 0);", "        return arr.Count(x => x.ToString().Select(y\
    \ => y - '0').Sum() > 0);", "        return arr.Count(x => x.ToString().Select(y\
    \ => y - '0').Sum() > 0);", "        return arr.Where(x => x.ToString().Sum(c\
    \ => c - '0') > 0).Count();", "        long count = 0;\n        foreach (long\
    \ num in arr) {\n            long sum = 0;\n            long n = num;\n      \
    \      if (n < 0) {\n                sum += n % 10;\n                n /= 10;\n\
    \            }\n            while (n != 0) {\n                sum += n % 10;\n\
    \                n /= 10;\n            }\n            if (sum > 0) {\n       \
    \         count++;\n            }\n        }\n        return count;", "      \
    \  // Your code here\n        return 0;", "        long count = 0;\n        foreach\
    \ (long n in arr) {\n            long sum = 0;\n            long nn = n;\n   \
    \         if (nn < 0) {\n                sum += -nn % 10;\n                nn\
    \ /= 10;\n            }\n            while (nn > 0) {\n                sum +=\
    \ nn % 10;\n                nn /= 10;\n            }\n            if (sum > 0)\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        return arr.Count(x => x.ToString().Sum(y => y - '0') > 0);", "        return\
    \ arr.Where(x => x.ToString().Select(y => y - '0').Sum() > 0).Count();", "   \
    \     return arr.Count(x => x.ToString().Select(y => Math.Abs(y - '0')).Sum()\
    \ > 0);"]
stop_tokens:
- "\n    }\n"
