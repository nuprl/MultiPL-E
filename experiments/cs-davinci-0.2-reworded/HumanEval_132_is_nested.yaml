name: HumanEval_132_is_nested
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that takes a string as input which contains\
  \ only square brackets.\n    // The function should return true if and only if there\
  \ is a valid subsequence of brackets \n    // where at least one bracket in the\
  \ subsequence is nested.\n    // >>> IsNested((\"[[]]\"))\n    // (true)\n    //\
  \ >>> IsNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> IsNested((\"[][]\"\
  ))\n    // (false)\n    // >>> IsNested((\"[]\"))\n    // (false)\n    // >>> IsNested((\"\
  [[][]]\"))\n    // (true)\n    // >>> IsNested((\"[[]][[\"))\n    // (true)\n  \
  \  public static bool IsNested(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsNested((\"\
  [[]]\")) == (true));\n    Debug.Assert(IsNested((\"[]]]]]]][[[[[]\")) == (false));\n\
  \    Debug.Assert(IsNested((\"[][]\")) == (false));\n    Debug.Assert(IsNested((\"\
  []\")) == (false));\n    Debug.Assert(IsNested((\"[[[[]]]]\")) == (true));\n   \
  \ Debug.Assert(IsNested((\"[]]]]]]]]]]\")) == (false));\n    Debug.Assert(IsNested((\"\
  [][][[]]\")) == (true));\n    Debug.Assert(IsNested((\"[[]\")) == (false));\n  \
  \  Debug.Assert(IsNested((\"[]]\")) == (false));\n    Debug.Assert(IsNested((\"\
  [[]][[\")) == (true));\n    Debug.Assert(IsNested((\"[[][]]\")) == (true));\n  \
  \  Debug.Assert(IsNested((\"\")) == (false));\n    Debug.Assert(IsNested((\"[[[[[[[[\"\
  )) == (false));\n    Debug.Assert(IsNested((\"]]]]]]]]\")) == (false));\n    }\n\
  \n}\n"
completions: ["        // Your code here\n        return false;", "        // Your\
    \ code here\n        return false;", "        int count = 0;\n        foreach\
    \ (char c in str) {\n            if (c == '[') {\n                count++;\n \
    \           } else if (c == ']') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count > 0;", "        // Your code here\n        return\
    \ false;", "        int count = 0;\n        foreach (char c in str) {\n      \
    \      if (c == '[') {\n                count++;\n            } else if (c ==\
    \ ']') {\n                count--;\n            }\n            if (count < 0)\
    \ {\n                return false;\n            }\n        }\n        return count\
    \ > 0;", "        // Your code here\n        return false;", "        // Your\
    \ code here\n        return false;", "        if (str.Length == 0) {\n       \
    \     return false;\n        }\n        int[] stack = new int[str.Length];\n \
    \       int top = -1;\n        for (int i = 0; i < str.Length; i++) {\n      \
    \      if (str[i] == '[') {\n                stack[++top] = i;\n            }\
    \ else {\n                if (top == -1) {\n                    return false;\n\
    \                }\n                if (stack[top] + 1 == i) {\n             \
    \       top--;\n                }\n            }\n        }\n        return top\
    \ == -1;", "        // Your code here\n        return false;", "        // Your\
    \ code here\n        return false;", "        // Your code here\n        return\
    \ false;", "        // Your code here\n        return false;", "        // Your\
    \ code goes here\n        return false;", "        int count = 0;\n        for\
    \ (int i = 0; i < str.Length; i++) {\n            if (str[i] == '[') {\n     \
    \           count++;\n            } else if (str[i] == ']') {\n              \
    \  count--;\n            }\n            if (count < 0) {\n                return\
    \ false;\n            }\n        }\n        return count == 0;", "        // Your\
    \ code here\n        return false;", "        int count = 0;\n        for (int\
    \ i = 0; i < str.Length; i++) {\n            if (str[i] == '[') {\n          \
    \      count++;\n            } else if (str[i] == ']') {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;", "        int count = 0;\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (str[i] == '[')\
    \ {\n                count++;\n            } else if (str[i] == ']') {\n     \
    \           count--;\n            }\n            if (count < 0) {\n          \
    \      return false;\n            }\n        }\n        return count == 0;", " \
    \       // Your code here\n        return false;", "        // Your code here\n\
    \        return false;", "        int count = 0;\n        foreach (char c in str)\
    \ {\n            if (c == '[') {\n                count++;\n            } else\
    \ if (c == ']') {\n                count--;\n            }\n            if (count\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;"]
stop_tokens:
- "\n    }\n"
