language: cs
name: HumanEval_146_specialFilter
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 == 1 && num / 10 % 2 == 1) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <574eef28e1224de3899ef58e6b0fb499>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <574eef28e1224de3899ef58e6b0fb499>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code goes here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6812304173d64d38b78b116332a2d10e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6812304173d64d38b78b116332a2d10e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 == 1 && (num / 10) % 2 == 1) {\n           \
    \     count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <508d1b946c994206b5de2ae419441fb1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <508d1b946c994206b5de2ae419441fb1>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long result = 0;\n        foreach (long num in nums) {\n  \
    \          if (num > 10) {\n                if (num % 2 == 1) {\n            \
    \        long temp = num;\n                    while (temp > 10) {\n         \
    \               temp /= 10;\n                    }\n                    if (temp\
    \ % 2 == 1) {\n                        result++;\n                    }\n    \
    \            }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52631b313619452d8ba30c335d8b16be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52631b313619452d8ba30c335d8b16be>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 == 1 && num / 10 % 2 == 1) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <574eef28e1224de3899ef58e6b0fb499>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <574eef28e1224de3899ef58e6b0fb499>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10) {\n                long first = num;\n               \
    \ long last = num;\n                while (first >= 10) {\n                  \
    \  first /= 10;\n                }\n                while (last % 10 != last)\
    \ {\n                    last %= 10;\n                }\n                if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                    count++;\n               \
    \ }\n            }\n        }\n        return count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            if (nums[i] > 10) {\n                if (nums[i] % 2 != 0) {\n\
    \                    long temp = nums[i];\n                    while (temp > 10)\
    \ {\n                        temp /= 10;\n                    }\n            \
    \        if (temp % 2 != 0) {\n                        count++;\n            \
    \        }\n                }\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da675e47463943f88f5805d12fe0fb1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da675e47463943f88f5805d12fe0fb1f>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 == 1 && num / 10 % 2 == 1) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <574eef28e1224de3899ef58e6b0fb499>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <574eef28e1224de3899ef58e6b0fb499>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(num => num > 10 && num.ToString().First()\
    \ % 2 != 0 && num.ToString().Last() % 2 != 0).Count();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().First() % 2 != 0 && num.ToString().Last()\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().Length > 1) {\n                if (num.ToString()[0]\
    \ % 2 != 0 && num.ToString()[num.ToString().Length - 1] % 2 != 0) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && (x /\
    \ 10) % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long result = 0;\n        foreach (long num in nums) {\n  \
    \          if (num > 10) {\n                if (num % 2 == 1) {\n            \
    \        long lastDigit = num % 10;\n                    if (lastDigit % 2 ==\
    \ 1) {\n                        long firstDigit = num;\n                     \
    \   while (firstDigit > 10) {\n                            firstDigit /= 10;\n\
    \                        }\n                        if (firstDigit % 2 == 1) {\n\
    \                            result++;\n                        }\n          \
    \          }\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf81ba895f3641e88c6d250c77c313a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf81ba895f3641e88c6d250c77c313a8>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            if (nums[i] > 10) {\n                if (nums[i] % 2 != 0) {\n\
    \                    if (nums[i] % 10 != 0) {\n                        count++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28f2a28c2d4d4477a885c839413bcff9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <28f2a28c2d4d4477a885c839413bcff9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x % 2 == 1 && x % 10 == 1).Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <101eeb8c11ba4bd1a3b2e4359067565f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <101eeb8c11ba4bd1a3b2e4359067565f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n % 2 == 1 && n / 10 % 2 ==\
    \ 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a4e7efc95224d7c9254130da215b282>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a4e7efc95224d7c9254130da215b282>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().First() % 2 != 0 && num.ToString().Last()\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n % 2 == 1 && n / 10 % 2 ==\
    \ 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a4e7efc95224d7c9254130da215b282>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a4e7efc95224d7c9254130da215b282>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && (x /\
    \ 10) % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10) {\n                long first = num;\n               \
    \ long last = num;\n                while (first > 10) {\n                   \
    \ first /= 10;\n                }\n                while (last > 10) {\n     \
    \               last %= 10;\n                }\n                if (first % 2\
    \ == 1 && last % 2 == 1) {\n                    count++;\n                }\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5cb8bc335c74b0d8d1151252bc1cc7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5cb8bc335c74b0d8d1151252bc1cc7f>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(x => x > 10 && x % 2 == 1 && x / 10 % 2 ==\
    \ 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <512c33d3d7e145fa8616bed68a2d8521>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <512c33d3d7e145fa8616bed68a2d8521>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 == 1 && num % 10 == 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7acdb0e6f074dc3b5c31a7b48391ccc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7acdb0e6f074dc3b5c31a7b48391ccc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // your code goes here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2446939748704983b406c4f1b37ea158>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2446939748704983b406c4f1b37ea158>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 == 1 && num % 10 == 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7acdb0e6f074dc3b5c31a7b48391ccc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7acdb0e6f074dc3b5c31a7b48391ccc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && x / 10\
    \ % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b3e989eae8146ada7c90b374d13bbc5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b3e989eae8146ada7c90b374d13bbc5>:0 \n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && (n % 10) % 2 == 1 && (n /\
    \ 10) % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe919211e1fc48e0a52414b97fae7a41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe919211e1fc48e0a52414b97fae7a41>:0 \n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x % 2 == 1 && x % 10 == 1).Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <101eeb8c11ba4bd1a3b2e4359067565f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <101eeb8c11ba4bd1a3b2e4359067565f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10) {\n                long first = num;\n               \
    \ long last = num;\n                while (first > 10) {\n                   \
    \ first /= 10;\n                }\n                while (last > 10) {\n     \
    \               last %= 10;\n                }\n                if (first % 2\
    \ == 1 && last % 2 == 1) {\n                    count++;\n                }\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5cb8bc335c74b0d8d1151252bc1cc7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5cb8bc335c74b0d8d1151252bc1cc7f>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10) {\n                long first = num / 10;\n          \
    \      long last = num % 10;\n                if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7dc01630e4de4392b194afa29d59da0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7dc01630e4de4392b194afa29d59da0e>:0 \n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().Length > 1) {\n                if (num.ToString()[0]\
    \ % 2 != 0 && num.ToString()[num.ToString().Length - 1] % 2 != 0) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && (x /\
    \ 10) % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && (n % 10) % 2 == 1 && n / 10\
    \ % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0be39d8766f745269b49b866a642b974>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0be39d8766f745269b49b866a642b974>:0 \n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && (num % 10) % 2 == 1 && (num / 10) % 2 == 1) {\n    \
    \            count++;\n            }\n        }\n        return count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff9247aafc914381ab290cb3298becb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff9247aafc914381ab290cb3298becb8>:0 \n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && (x /\
    \ 10) % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && (x /\
    \ 10) % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && (num % 10) % 2 == 1 && (num / 10) % 2 == 1) {\n    \
    \            count++;\n            }\n        }\n        return count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff9247aafc914381ab290cb3298becb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff9247aafc914381ab290cb3298becb8>:0 \n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && (x /\
    \ 10) % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().First() % 2 != 0 && num.ToString().Last()\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && (x /\
    \ 10) % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && (x /\
    \ 10) % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Write your code here.\n        return nums.Where(x => x\
    \ > 10 && x.ToString().First() % 2 != 0 && x.ToString().Last() % 2 != 0).Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10) {\n                long first = num / 10;\n          \
    \      long last = num % 10;\n                if (first % 2 != 0 && last % 2 !=\
    \ 0) {\n                    count++;\n                }\n            }\n     \
    \   }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7dc01630e4de4392b194afa29d59da0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7dc01630e4de4392b194afa29d59da0e>:0 \n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10) {\n                long first = num;\n               \
    \ long last = num;\n                while (first >= 10) {\n                  \
    \  first /= 10;\n                }\n                while (last % 10 != last)\
    \ {\n                    last %= 10;\n                }\n                if (first\
    \ % 2 != 0 && last % 2 != 0) {\n                    count++;\n               \
    \ }\n            }\n        }\n        return count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().Length > 1) {\n                if (num.ToString()[0]\
    \ % 2 != 0 && num.ToString()[num.ToString().Length - 1] % 2 != 0) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && (x /\
    \ 10) % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code goes here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6812304173d64d38b78b116332a2d10e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6812304173d64d38b78b116332a2d10e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10) {\n                if (num % 2 == 1) {\n             \
    \       long last = num % 10;\n                    if (last % 2 == 1) {\n    \
    \                    count++;\n                    }\n                }\n    \
    \        }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adb69785a0d74a2f8c71749f1e4a8e19>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adb69785a0d74a2f8c71749f1e4a8e19>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().First() % 2 != 0 && num.ToString().Last()\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <132a943394174417aaee25e9f9337807>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <132a943394174417aaee25e9f9337807>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x % 2 == 1 && x % 10 == 1).Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <101eeb8c11ba4bd1a3b2e4359067565f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <101eeb8c11ba4bd1a3b2e4359067565f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code goes here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6812304173d64d38b78b116332a2d10e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6812304173d64d38b78b116332a2d10e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x % 2 == 1 && x % 10 == 1).Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <101eeb8c11ba4bd1a3b2e4359067565f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <101eeb8c11ba4bd1a3b2e4359067565f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && (x /\
    \ 10) % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x % 2 == 1 && x % 10 == 1).Count();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <101eeb8c11ba4bd1a3b2e4359067565f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <101eeb8c11ba4bd1a3b2e4359067565f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 5 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dff0a2b305f34feb91247032deb0c8e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dff0a2b305f34feb91247032deb0c8e0>:0 \n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && (x /\
    \ 10) % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && (x % 10) % 2 == 1 && (x /\
    \ 10) % 2 == 1).Count();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L, (long)-2L,\
    \ (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L})))\
    \ == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L,\
    \ (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <631a7d14ef5046528f4c1dbeb16ba867>:0 \n"
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && (num % 10) % 2 == 1 && (num / 10) % 2 == 1) {\n    \
    \            count++;\n            }\n        }\n        return count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff9247aafc914381ab290cb3298becb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff9247aafc914381ab290cb3298becb8>:0 \n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num % 5 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dff0a2b305f34feb91247032deb0c8e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dff0a2b305f34feb91247032deb0c8e0>:0 \n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && (num % 10) % 2 == 1 && (num / 10) % 2 == 1) {\n    \
    \            count++;\n            }\n        }\n        return count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff9247aafc914381ab290cb3298becb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff9247aafc914381ab290cb3298becb8>:0 \n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code goes here\n        return 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6812304173d64d38b78b116332a2d10e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6812304173d64d38b78b116332a2d10e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num.ToString().Length > 1) {\n                if (num.ToString()[0]\
    \ % 2 != 0 && num.ToString()[num.ToString().Length - 1] % 2 != 0) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
    \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\
    \ == (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L,\
    \ (long)-12L, (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n  \
    \  Debug.Assert(Specialfilter((new List<long>(new long[]{(long)71L, (long)-2L,\
    \ (long)-33L, (long)75L, (long)21L, (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)1L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>())) == (0L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0770cdf9fafc4b14a9fbb9496db69c42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0770cdf9fafc4b14a9fbb9496db69c42>:0 \n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Count(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        long count = 0;\n        foreach (long num in nums) {\n   \
    \         if (num > 10 && num % 2 != 0 && num / 10 % 2 != 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0770cdf9fafc4b14a9fbb9496db69c42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0770cdf9fafc4b14a9fbb9496db69c42>:0 \n"
  stdout: ''
  timestamp: 1659799789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(n => n > 10 && n.ToString().First() % 2 !=\
    \ 0 && n.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        // Your code here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <808bdd970d25485784e153b4a3a24b4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that takes a list of numbers as input\
    \ and returns \n    // the number of elements in the list that are greater than\
    \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7,\
    \ 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L,\
    \ (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new\
    \ List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L,\
    \ (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long>\
    \ nums) {\n        return nums.Where(x => x > 10 && x.ToString().First() % 2 !=\
    \ 0 && x.ToString().Last() % 2 != 0).Count();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)5L,\
    \ (long)-2L, (long)1L, (long)-5L}))) == (0L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L}))) == (1L));\n\
    \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L,\
    \ (long)-3L, (long)45L, (long)21L, (long)109L}))) == (2L));\n    Debug.Assert(Specialfilter((new\
    \ List<long>(new long[]{(long)43L, (long)-12L, (long)93L, (long)125L, (long)121L,\
    \ (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new List<long>(new\
    \ long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L, (long)19L})))\
    \ == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
    \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n  \
    \  }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799788
