name: HumanEval_114_minSubArraySum
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of integers nums, find the minimum sum of any non-empty\
  \ sub-list\n    // of nums.\n    // Example\n    // >>> Minsubarraysum((new List<long>(new\
  \ long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))\n    //\
  \ (1L)\n    // >>> Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L,\
  \ (long)-3L})))\n    // (-6L)\n    public static long Minsubarraysum(List<long>\
  \ nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))\
  \ == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new\
  \ long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n\
  \    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))\
  \ == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new\
  \ long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))\
  \ == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,\
  \ (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))\
  \ == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,\
  \ (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
completions: ["        long min = long.MaxValue;\n        long sum = 0L;\n       \
    \ for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n      \
    \      if (sum < min) {\n                min = sum;\n            }\n         \
    \   if (sum > 0L) {\n                sum = 0L;\n            }\n        }\n   \
    \     return min;", "        long min = nums[0];\n        long sum = 0L;\n   \
    \     foreach (long num in nums) {\n            sum += num;\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n            if (sum > 0L)\
    \ {\n                sum = 0L;\n            }\n        }\n        return min;",
  "        long min = long.MaxValue;\n        long sum = 0L;\n        for (int i =\
    \ 0; i < nums.Count; i++) {\n            sum += nums[i];\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n            if (sum > 0L)\
    \ {\n                sum = 0L;\n            }\n        }\n        return min;",
  "        long min = long.MaxValue;\n        long sum = 0L;\n        foreach (var\
    \ num in nums) {\n            sum += num;\n            if (sum < min) {\n    \
    \            min = sum;\n            }\n            if (sum > 0L) {\n        \
    \        sum = 0L;\n            }\n        }\n        return min;", "        long\
    \ min = 0;\n        long sum = 0;\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            sum += nums[i];\n            if (sum < min) {\n             \
    \   min = sum;\n            }\n        }\n        return min;", "        long\
    \ min = long.MaxValue;\n        long sum = 0L;\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            sum += nums[i];\n            if (sum < min) {\n        \
    \        min = sum;\n            }\n            if (sum > 0L) {\n            \
    \    sum = 0L;\n            }\n        }\n        return min;", "        long\
    \ min = long.MaxValue;\n        long sum = 0L;\n        long i = 0L;\n       \
    \ while (i < nums.Count) {\n            sum += nums[(int)i];\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n            if (sum > 0L)\
    \ {\n                sum = 0L;\n            }\n            i++;\n        }\n \
    \       return min;", "        long min = long.MaxValue;\n        long sum = 0L;\n\
    \        foreach (var num in nums) {\n            sum += num;\n            if\
    \ (sum < min) {\n                min = sum;\n            }\n            if (sum\
    \ > 0L) {\n                sum = 0L;\n            }\n        }\n        return\
    \ min;", "        long min = long.MaxValue;\n        long sum = 0L;\n        foreach\
    \ (var num in nums) {\n            sum += num;\n            if (sum < min) {\n\
    \                min = sum;\n            }\n            if (sum > 0L) {\n    \
    \            sum = 0L;\n            }\n        }\n        return min;", "    \
    \    long min = long.MaxValue;\n        long sum = 0L;\n        foreach (var num\
    \ in nums) {\n            sum += num;\n            if (sum < min) {\n        \
    \        min = sum;\n            }\n            if (sum > 0L) {\n            \
    \    sum = 0L;\n            }\n        }\n        return min;", "        long\
    \ min = long.MaxValue;\n        long sum = 0L;\n        foreach (var num in nums)\
    \ {\n            sum += num;\n            if (sum < min) {\n                min\
    \ = sum;\n            }\n            if (sum > 0L) {\n                sum = 0L;\n\
    \            }\n        }\n        return min;", "        long min = long.MaxValue;\n\
    \        long sum = 0L;\n        for (int i = 0; i < nums.Count; i++) {\n    \
    \        sum += nums[i];\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n            if (sum > 0L) {\n                sum = 0L;\n\
    \            }\n        }\n        return min;", "        long minSum = long.MaxValue;\n\
    \        long sum = 0L;\n        long i = 0L;\n        while (i < nums.Count)\n\
    \        {\n            sum += nums[(int)i];\n            if (sum < minSum)\n\
    \            {\n                minSum = sum;\n            }\n\n            if\
    \ (sum > 0L)\n            {\n                sum = 0L;\n            }\n\n    \
    \        i++;\n\n        }\n\n        return minSum;\n", "        long min = long.MaxValue;\n\
    \        long sum = 0L;\n        foreach (var num in nums) {\n            sum\
    \ += num;\n            if (sum < min) {\n                min = sum;\n        \
    \    }\n            if (sum > 0L) {\n                sum = 0L;\n            }\n\
    \        }\n        return min;", "        long min = 0;\n        long sum = 0;\n\
    \        foreach (var num in nums) {\n            sum += num;\n            if\
    \ (sum < min) {\n                min = sum;\n            }\n        }\n      \
    \  return min;", "        long min = nums[0];\n        long sum = 0L;\n      \
    \  foreach (long num in nums) {\n            sum += num;\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n            if (sum > 0L)\
    \ {\n                sum = 0L;\n            }\n        }\n        return min;",
  "        long min = long.MaxValue;\n        long sum = 0L;\n        for (int i =\
    \ 0; i < nums.Count; i++) {\n            sum += nums[i];\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n            if (sum > 0L)\
    \ {\n                sum = 0L;\n            }\n        }\n        return min;",
  "        long min = long.MaxValue;\n        long sum = 0L;\n        foreach (var\
    \ num in nums) {\n            sum += num;\n            if (sum < min) {\n    \
    \            min = sum;\n            }\n            if (sum > 0L) {\n        \
    \        sum = 0L;\n            }\n        }\n        return min;", "        long\
    \ min = nums[0];\n        long sum = 0L;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            if (sum < min) {\n                min =\
    \ sum;\n            }\n            if (sum > 0L) {\n                sum = 0L;\n\
    \            }\n        }\n        return min;", "        long sum = 0L;\n   \
    \     long min = 0L;\n        foreach (var num in nums) {\n            sum +=\
    \ num;\n            if (sum < min) {\n                min = sum;\n           \
    \ }\n        }\n        return min;"]
stop_tokens:
- "\n    }\n"
