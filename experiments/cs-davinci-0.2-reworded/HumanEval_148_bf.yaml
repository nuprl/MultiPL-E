name: HumanEval_148_bf
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // There are eight planets in our solar system: the closerst to\
  \ the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
  \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
  \ names as strings planet1 and planet2. \n    // The function should return a tuple\
  \ containing all planets whose orbits are \n    // located between the orbit of\
  \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
  \ \n    // The function should return an empty tuple if planet1 or planet2\n   \
  \ // are not correct planet names. \n    // Examples\n    // >>> Bf((\"Jupiter\"\
  ), (\"Neptune\"))\n    // (new List<string>(new string[]{(string)\"Saturn\", (string)\"\
  Uranus\"}))\n    // >>> Bf((\"Earth\"), (\"Mercury\"))\n    // (List<string>(\"\
  Venus\"))\n    // >>> Bf((\"Mercury\"), (\"Uranus\"))\n    // (new List<string>(new\
  \ string[]{(string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\"\
  , (string)\"Saturn\"}))\n    public static List<string> Bf(string planet1, string\
  \ planet2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Bf((\"\
  Jupiter\"), (\"Neptune\")).Equals((new List<string>(new string[]{(string)\"Saturn\"\
  , (string)\"Uranus\"}))));\n    Debug.Assert(Bf((\"Earth\"), (\"Mercury\")).Equals((new\
  \ List<string>(new string[]{(string)\"Venus\"}))));\n    Debug.Assert(Bf((\"Mercury\"\
  ), (\"Uranus\")).Equals((new List<string>(new string[]{(string)\"Venus\", (string)\"\
  Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\"}))));\n    Debug.Assert(Bf((\"\
  Neptune\"), (\"Venus\")).Equals((new List<string>(new string[]{(string)\"Earth\"\
  , (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\", (string)\"Uranus\"\
  }))));\n    Debug.Assert(Bf((\"Earth\"), (\"Earth\")).Equals((new List<string>())));\n\
  \    Debug.Assert(Bf((\"Mars\"), (\"Earth\")).Equals((new List<string>())));\n \
  \   Debug.Assert(Bf((\"Jupiter\"), (\"Makemake\")).Equals((new List<string>())));\n\
  \    }\n\n}\n"
completions: ["        List<string> planets = new List<string>(new string[]{(string)\"\
    Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"\
    Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n  \
    \      int i1 = planets.IndexOf(planet1);\n        int i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (i1 > i2) {\n            int tmp = i1;\n            i1\
    \ = i2;\n            i2 = tmp;\n        }\n        return planets.GetRange(i1\
    \ + 1, i2 - i1 - 1);", "        var planets = new List<string> { \"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var index1 = planets.IndexOf(planet1);\n        var index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        if (index1 < index2)\
    \ {\n            result.AddRange(planets.GetRange(index1 + 1, index2 - index1\
    \ - 1));\n        } else {\n            result.AddRange(planets.GetRange(index2\
    \ + 1, index1 - index2 - 1));\n        }\n        return result;", "        var\
    \ planets = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ {\n            return new List<string>();\n        }\n        var result = new\
    \ List<string>();\n        if (p1 < p2) {\n            for (int i = p1 + 1; i\
    \ < p2; i++) {\n                result.Add(planets[i]);\n            }\n     \
    \   } else {\n            for (int i = p2 + 1; i < p1; i++) {\n              \
    \  result.Add(planets[i]);\n            }\n        }\n        return result;",
  "        List<string> planets = new List<string>(new string[]{(string)\"Mercury\"\
    , (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\"\
    , (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n        int\
    \ index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (index1 > index2) {\n            int temp = index1;\n \
    \           index1 = index2;\n            index2 = temp;\n        }\n        return\
    \ planets.GetRange(index1 + 1, index2 - index1 - 1);", "        var planets =\
    \ new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var start = planets.IndexOf(planet1);\n\
    \        var end = planets.IndexOf(planet2);\n        if (start == -1 || end ==\
    \ -1) {\n            return new List<string>();\n        }\n        if (start\
    \ > end) {\n            var temp = start;\n            start = end;\n        \
    \    end = temp;\n        }\n        return planets.GetRange(start + 1, end -\
    \ start - 1);", "        List<string> planets = new List<string>(new string[]{(string)\"\
    Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"\
    Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n  \
    \      int i1 = planets.IndexOf(planet1);\n        int i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (i1 > i2) {\n            int tmp = i1;\n            i1\
    \ = i2;\n            i2 = tmp;\n        }\n        return planets.GetRange(i1\
    \ + 1, i2 - i1 - 1);", "        List<string> planets = new List<string>(new string[]{(string)\"\
    Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"\
    Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n  \
    \      int index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (index1 > index2) {\n            int temp = index1;\n \
    \           index1 = index2;\n            index2 = temp;\n        }\n        return\
    \ planets.GetRange(index1 + 1, index2 - index1 - 1);", "        var planets =\
    \ new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n\
    \        var p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ {\n            return new List<string>();\n        }\n        if (p1 < p2) {\n\
    \            return planets.GetRange(p1 + 1, p2 - p1 - 1);\n        } else {\n\
    \            return planets.GetRange(p2 + 1, p1 - p2 - 1);\n        }", "    \
    \    List<string> planets = new List<string>(new string[]{(string)\"Mercury\"\
    , (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\"\
    , (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n        int\
    \ i1 = planets.IndexOf(planet1);\n        int i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (i1 > i2) {\n            int t = i1;\n            i1 =\
    \ i2;\n            i2 = t;\n        }\n        return planets.GetRange(i1 + 1,\
    \ i2 - i1 - 1);", "        List<string> planets = new List<string>(new string[]{\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"});\n        int index1 = planets.IndexOf(planet1);\n        int\
    \ index2 = planets.IndexOf(planet2);\n        if (index1 == -1 || index2 == -1)\
    \ {\n            return new List<string>();\n        }\n        if (index1 > index2)\
    \ {\n            int temp = index1;\n            index1 = index2;\n          \
    \  index2 = temp;\n        }\n        return planets.GetRange(index1 + 1, index2\
    \ - index1 - 1);", "        List<string> planets = new List<string>(new string[]{(string)\"\
    Mercury\", (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"\
    Jupiter\", (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n  \
    \      int i1 = planets.IndexOf(planet1);\n        int i2 = planets.IndexOf(planet2);\n\
    \        if (i1 == -1 || i2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (i1 < i2) {\n            return planets.GetRange(i1 + 1,\
    \ i2 - i1 - 1);\n        } else {\n            return planets.GetRange(i2 + 1,\
    \ i1 - i2 - 1);\n        }", "        List<string> planets = new List<string>(new\
    \ string[] { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\" });\n        int i1 = planets.IndexOf(planet1);\n  \
    \      int i2 = planets.IndexOf(planet2);\n        if (i1 == -1 || i2 == -1) {\n\
    \            return new List<string>();\n        }\n        if (i1 > i2) {\n \
    \           int tmp = i1;\n            i1 = i2;\n            i2 = tmp;\n     \
    \   }\n        return planets.GetRange(i1 + 1, i2 - i1 - 1);", "        var planets\
    \ = new List<string>() { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var planet1Index = planets.IndexOf(planet1);\n\
    \        var planet2Index = planets.IndexOf(planet2);\n        if (planet1Index\
    \ == -1 || planet2Index == -1) {\n            return new List<string>();\n   \
    \     }\n        if (planet1Index > planet2Index) {\n            return planets.GetRange(planet2Index,\
    \ planet1Index - planet2Index + 1);\n        }\n        return planets.GetRange(planet1Index,\
    \ planet2Index - planet1Index + 1);", "        var planets = new List<string>()\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var planet1Index = planets.IndexOf(planet1);\n     \
    \   var planet2Index = planets.IndexOf(planet2);\n        if (planet1Index ==\
    \ -1 || planet2Index == -1) {\n            return new List<string>();\n      \
    \  }\n        if (planet1Index < planet2Index) {\n            return planets.GetRange(planet1Index\
    \ + 1, planet2Index - planet1Index - 1);\n        }\n        return planets.GetRange(planet2Index\
    \ + 1, planet1Index - planet2Index - 1);", "        var planets = new List<string>\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var p1 = planets.IndexOf(planet1);\n        var p2 =\
    \ planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1) {\n           \
    \ return new List<string>();\n        }\n        var result = new List<string>();\n\
    \        if (p1 < p2) {\n            for (int i = p1 + 1; i < p2; i++) {\n   \
    \             result.Add(planets[i]);\n            }\n        } else {\n     \
    \       for (int i = p2 + 1; i < p1; i++) {\n                result.Add(planets[i]);\n\
    \            }\n        }\n        return result;", "        List<string> planets\
    \ = new List<string>(new string[]{(string)\"Mercury\", (string)\"Venus\", (string)\"\
    Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\", (string)\"\
    Uranus\", (string)\"Neptune\"});\n        int p1 = planets.IndexOf(planet1);\n\
    \        int p2 = planets.IndexOf(planet2);\n        if (p1 == -1 || p2 == -1)\
    \ {\n            return new List<string>();\n        }\n        if (p1 > p2) {\n\
    \            int tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n    \
    \    }\n        return planets.GetRange(p1 + 1, p2 - p1 - 1);", "        var planets\
    \ = new List<string> { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\" };\n        var index1 = planets.IndexOf(planet1);\n\
    \        var index2 = planets.IndexOf(planet2);\n        if (index1 == -1 || index2\
    \ == -1) {\n            return new List<string>();\n        }\n        if (index1\
    \ > index2) {\n            var temp = index1;\n            index1 = index2;\n\
    \            index2 = temp;\n        }\n        return planets.GetRange(index1\
    \ + 1, index2 - index1 - 1);", "        var planets = new List<string> { \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \ };\n        var planet1Index = planets.IndexOf(planet1);\n        var planet2Index\
    \ = planets.IndexOf(planet2);\n        if (planet1Index == -1 || planet2Index\
    \ == -1) {\n            return new List<string>();\n        }\n        var min\
    \ = Math.Min(planet1Index, planet2Index);\n        var max = Math.Max(planet1Index,\
    \ planet2Index);\n        return planets.GetRange(min + 1, max - min - 1);", " \
    \       List<string> planets = new List<string>(new string[]{(string)\"Mercury\"\
    , (string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\"\
    , (string)\"Saturn\", (string)\"Uranus\", (string)\"Neptune\"});\n        int\
    \ index1 = planets.IndexOf(planet1);\n        int index2 = planets.IndexOf(planet2);\n\
    \        if (index1 == -1 || index2 == -1) {\n            return new List<string>();\n\
    \        }\n        if (index1 < index2) {\n            return planets.GetRange(index1\
    \ + 1, index2 - index1 - 1);\n        } else {\n            return planets.GetRange(index2\
    \ + 1, index1 - index2 - 1);\n        }", "        var planets = new List<string>\
    \ { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\" };\n        var planet1Index = planets.IndexOf(planet1);\n     \
    \   var planet2Index = planets.IndexOf(planet2);\n        if (planet1Index ==\
    \ -1 || planet2Index == -1) {\n            return new List<string>();\n      \
    \  }\n        if (planet1Index < planet2Index) {\n            return planets.GetRange(planet1Index\
    \ + 1, planet2Index - planet1Index - 1);\n        }\n        return planets.GetRange(planet2Index\
    \ + 1, planet1Index - planet2Index - 1);"]
stop_tokens:
- "\n    }\n"
