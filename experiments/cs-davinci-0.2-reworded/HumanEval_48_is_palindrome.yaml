name: HumanEval_48_is_palindrome
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
  \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>>\
  \ IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n\
  \    // (false)\n    public static bool IsPalindrome(string text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
  \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
  aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
  \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
  xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
  \    }\n\n}\n"
completions: ["        for (int i = 0; i < text.Length / 2; i++) {\n            if\
    \ (text[i] != text[text.Length - i - 1]) {\n                return false;\n  \
    \          }\n        }\n        return true;", "        for (int i = 0; i < text.Length\
    \ / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n     \
    \           return false;\n            }\n        }\n        return true;", " \
    \       int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n    \
    \        if (text[i] != text[n - i - 1]) {\n                return false;\n  \
    \          }\n        }\n        return true;", "        int n = text.Length;\n\
    \        for (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n\
    \ - i - 1]) {\n                return false;\n            }\n        }\n     \
    \   return true;", "        int length = text.Length;\n        for (int i = 0;\
    \ i < length / 2; i++) {\n            if (text[i] != text[length - i - 1]) {\n\
    \                return false;\n            }\n        }\n        return true;",
  "        int n = text.Length;\n        for (int i = 0; i < n / 2; i++) {\n     \
    \       if (text[i] != text[n - i - 1]) {\n                return false;\n   \
    \         }\n        }\n        return true;", "        for (int i = 0; i < text.Length\
    \ / 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n     \
    \           return false;\n            }\n        }\n        return true;", " \
    \       for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] !=\
    \ text[text.Length - i - 1]) {\n                return false;\n            }\n\
    \        }\n        return true;", "        for (int i = 0; i < text.Length /\
    \ 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n       \
    \         return false;\n            }\n        }\n        return true;", "  \
    \      for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] !=\
    \ text[text.Length - i - 1]) {\n                return false;\n            }\n\
    \        }\n        return true;", "        int n = text.Length;\n        for\
    \ (int i = 0; i < n / 2; i++) {\n            if (text[i] != text[n - i - 1]) {\n\
    \                return false;\n            }\n        }\n        return true;",
  "        for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] !=\
    \ text[text.Length - i - 1]) {\n                return false;\n            }\n\
    \        }\n        return true;", "        for (int i = 0; i < text.Length /\
    \ 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n       \
    \         return false;\n            }\n        }\n        return true;", "  \
    \      for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] !=\
    \ text[text.Length - i - 1]) {\n                return false;\n            }\n\
    \        }\n        return true;", "        int len = text.Length;\n        for\
    \ (int i = 0; i < len / 2; i++) {\n            if (text[i] != text[len - i - 1])\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] !=\
    \ text[text.Length - i - 1]) {\n                return false;\n            }\n\
    \        }\n        return true;", "        for (int i = 0; i < text.Length /\
    \ 2; i++) {\n            if (text[i] != text[text.Length - i - 1]) {\n       \
    \         return false;\n            }\n        }\n        return true;", "  \
    \      for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] !=\
    \ text[text.Length - i - 1]) {\n                return false;\n            }\n\
    \        }\n        return true;", "        int len = text.Length;\n        for\
    \ (int i = 0; i < len / 2; i++) {\n            if (text[i] != text[len - i - 1])\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        for (int i = 0; i < text.Length / 2; i++) {\n            if (text[i] !=\
    \ text[text.Length - i - 1]) {\n                return false;\n            }\n\
    \        }\n        return true;"]
stop_tokens:
- "\n    }\n"
