name: HumanEval_17_parse_music
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Input to this function is a string representing musical notes\
  \ in a special ASCII format.\n    // Your task is to parse this string and return\
  \ list of integers corresponding to how many beats does each\n    // not last.\n\
  \    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|'\
  \ - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    //\
  \ >>> ParseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)1L, (long)2L, (long)2L, (long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)4L, (long)4L}))\n    public static List<long> ParseMusic(string\
  \ music_string) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseMusic((\"\
  \")).Equals((new List<long>())));\n    Debug.Assert(ParseMusic((\"o o o o\")).Equals((new\
  \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\"\
  .| .| .| .|\")).Equals((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L}))));\n    Debug.Assert(ParseMusic((\"o| o| .| .| o o o o\")).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L, (long)4L, (long)4L,\
  \ (long)4L, (long)4L}))));\n    Debug.Assert(ParseMusic((\"o| .| o| .| o o| o o|\"\
  )).Equals((new List<long>(new long[]{(long)2L, (long)1L, (long)2L, (long)1L, (long)4L,\
  \ (long)2L, (long)4L, (long)2L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        // Your code\
    \ goes here.\n        return result;", "        var result = new List<long>();\n\
    \        var beats = new Dictionary<char, long>();\n        beats['o'] = 4;\n\
    \        beats['|'] = 2;\n        beats['.'] = 1;\n        var current_beat =\
    \ 0L;\n        foreach (var c in music_string) {\n            if (c == ' ') {\n\
    \                result.Add(current_beat);\n                current_beat = 0;\n\
    \            } else {\n                current_beat += beats[c];\n           \
    \ }\n        }\n        result.Add(current_beat);\n        return result;", " \
    \       List<long> result = new List<long>();\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            if (music_string[i] == 'o') {\n                if (i + 1\
    \ < music_string.Length && music_string[i + 1] == '|') {\n                   \
    \ result.Add(2);\n                    i++;\n                } else {\n       \
    \             result.Add(4);\n                }\n            } else if (music_string[i]\
    \ == '.') {\n                result.Add(1);\n                i++;\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        string[] notes = music_string.Split(' ');\n        foreach (string note\
    \ in notes) {\n            if (note == \"o\") {\n                result.Add(4);\n\
    \            } else if (note == \"o|\") {\n                result.Add(2);\n  \
    \          } else if (note == \".|\") {\n                result.Add(1);\n    \
    \        }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        var current_note = new StringBuilder();\n        foreach (var c in music_string)\
    \ {\n            if (c == ' ') {\n                result.Add(current_note.ToString()\
    \ == \"o\" ? 4 : 2);\n                current_note.Clear();\n            } else\
    \ {\n                current_note.Append(c);\n            }\n        }\n     \
    \   result.Add(current_note.ToString() == \"o\" ? 4 : 2);\n        return result;",
  "        List<long> result = new List<long>();\n        for (int i = 0; i < music_string.Length;\
    \ i++) {\n            if (music_string[i] == 'o') {\n                result.Add(4);\n\
    \            }\n            else if (music_string[i] == '.') {\n             \
    \   result.Add(1);\n            }\n            else if (music_string[i] == '|')\
    \ {\n                result.Add(2);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        // Your code\
    \ goes here\n        return result;", "        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < music_string.Length; i++) {\n            if (music_string[i]\
    \ == 'o') {\n                if (i + 1 < music_string.Length && music_string[i\
    \ + 1] == '|') {\n                    result.Add(2);\n                    i++;\n\
    \                } else {\n                    result.Add(4);\n              \
    \  }\n            } else if (music_string[i] == '.') {\n                result.Add(1);\n\
    \                i++;\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        int i = 0;\n        while\
    \ (i < music_string.Length) {\n            if (music_string[i] == 'o') {\n   \
    \             if (i + 1 < music_string.Length && music_string[i + 1] == '|') {\n\
    \                    result.Add(2);\n                    i += 2;\n           \
    \     } else {\n                    result.Add(4);\n                    i += 1;\n\
    \                }\n            } else {\n                result.Add(1);\n   \
    \             i += 2;\n            }\n        }\n        return result;", "  \
    \      var result = new List<long>();\n        var notes = music_string.Split('\
    \ ');\n        foreach (var note in notes) {\n            if (note == \"o\") {\n\
    \                result.Add(4);\n            } else if (note == \"o|\") {\n  \
    \              result.Add(2);\n            } else if (note == \".|\") {\n    \
    \            result.Add(1);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        var notes = music_string.Split('\
    \ ');\n        foreach (var note in notes) {\n            if (note == \"o\") {\n\
    \                result.Add(4);\n            } else if (note == \"o|\") {\n  \
    \              result.Add(2);\n            } else if (note == \".|\") {\n    \
    \            result.Add(1);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (var c in music_string)\
    \ {\n            if (c == 'o') {\n                result.Add(4);\n           \
    \ } else if (c == '|') {\n                result[result.Count - 1] /= 2;\n   \
    \         }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        for (int i = 0; i < music_string.Length; i++) {\n\
    \            if (music_string[i] == 'o') {\n                if (i + 1 < music_string.Length\
    \ && music_string[i + 1] == '|') {\n                    result.Add(2);\n     \
    \               i++;\n                } else {\n                    result.Add(4);\n\
    \                }\n            } else if (music_string[i] == '.') {\n       \
    \         result.Add(1);\n                i++;\n            }\n        }\n   \
    \     return result;", "        var result = new List<long>();\n        var notes\
    \ = music_string.Split(' ');\n        foreach (var note in notes) {\n        \
    \    if (note == \"o\") {\n                result.Add(4);\n            } else\
    \ if (note == \"o|\") {\n                result.Add(2);\n            } else if\
    \ (note == \".|\") {\n                result.Add(1);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     for (int i = 0; i < music_string.Length; i++) {\n            if (music_string[i]\
    \ == 'o') {\n                result.Add(4);\n            }\n            else if\
    \ (music_string[i] == '.') {\n                result.Add(1);\n            }\n\
    \            else if (music_string[i] == '|') {\n                result.Add(2);\n\
    \            }\n        }\n        return result;", "        var res = new List<long>();\n\
    \        var beats = new List<char>();\n        foreach (var c in music_string)\
    \ {\n            if (c == ' ') {\n                if (beats.Count == 0) {\n  \
    \                  continue;\n                }\n                if (beats.Count\
    \ == 1) {\n                    if (beats[0] == 'o') {\n                      \
    \  res.Add(4);\n                    } else if (beats[0] == '.') {\n          \
    \              res.Add(1);\n                    } else {\n                   \
    \     throw new Exception(\"Invalid music string\");\n                    }\n\
    \                } else if (beats.Count == 2) {\n                    if (beats[0]\
    \ == 'o' && beats[1] == '|') {\n                        res.Add(2);\n        \
    \            } else {\n                        throw new Exception(\"Invalid music\
    \ string\");\n                    }\n                } else {\n              \
    \      throw new Exception(\"Invalid music string\");\n                }\n   \
    \             beats.Clear();\n            } else {\n                beats.Add(c);\n\
    \            }\n        }\n        if (beats.Count > 0) {\n            throw new\
    \ Exception(\"Invalid music string\");\n        }\n        return res;", "   \
    \     var result = new List<long>();\n        var notes = music_string.Split('\
    \ ');\n        foreach (var note in notes) {\n            switch (note) {\n  \
    \              case \"o\":\n                    result.Add(4);\n             \
    \       break;\n                case \"o|\":\n                    result.Add(2);\n\
    \                    break;\n                case \".|\":\n                  \
    \  result.Add(1);\n                    break;\n            }\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ foreach (var c in music_string) {\n            if (c == 'o') {\n           \
    \     result.Add(4);\n            } else if (c == '|') {\n                result[result.Count\
    \ - 1] /= 2;\n            }\n        }\n        return result;", "        var\
    \ result = new List<long>();\n        var beats = new Dictionary<char, long>();\n\
    \        beats['o'] = 4;\n        beats['|'] = 2;\n        beats['.'] = 1;\n \
    \       var current_beat = 0L;\n        foreach (var c in music_string) {\n  \
    \          if (beats.ContainsKey(c)) {\n                current_beat += beats[c];\n\
    \            } else {\n                result.Add(current_beat);\n           \
    \     current_beat = 0;\n            }\n        }\n        result.Add(current_beat);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int i = 0;\n        while (i < music_string.Length) {\n            if (music_string[i]\
    \ == 'o') {\n                if (i + 1 < music_string.Length && music_string[i\
    \ + 1] == '|') {\n                    result.Add(2);\n                    i +=\
    \ 2;\n                } else {\n                    result.Add(4);\n         \
    \           i += 1;\n                }\n            } else {\n               \
    \ result.Add(1);\n                i += 2;\n            }\n        }\n        return\
    \ result;"]
stop_tokens:
- "\n    }\n"
