name: HumanEval_27_flip_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\")\n\
  \    public static string FlipCase(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
  \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
  )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\")).Equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ['        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c)
    : char.ToUpper(c)).ToArray());', '        return new string(str.Select(c => char.IsUpper(c)
    ? char.ToLower(c) : char.ToUpper(c)).ToArray());', '        return new string(str.Select(c
    => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());', '        return
    new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToString();',
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  "        char[] charArray = str.ToCharArray();\n        for (int i = 0; i < charArray.Length;\
    \ i++) {\n            if (char.IsUpper(charArray[i])) {\n                charArray[i]\
    \ = char.ToLower(charArray[i]);\n            } else if (char.IsLower(charArray[i]))\
    \ {\n                charArray[i] = char.ToUpper(charArray[i]);\n            }\n\
    \        }\n        return new string(charArray);", '        return new string(str.Select(c
    => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());', '        return
    new string(str.Select(x => char.IsLower(x) ? char.ToUpper(x) : char.ToLower(x)).ToArray());',
  "        var sb = new StringBuilder();\n        foreach (var c in str) {\n     \
    \       if (char.IsLower(c)) {\n                sb.Append(char.ToUpper(c));\n\
    \            } else {\n                sb.Append(char.ToLower(c));\n         \
    \   }\n        }\n        return sb.ToString();", "        char[] chars = str.ToCharArray();\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (char.IsLower(chars[i]))\
    \ {\n                chars[i] = char.ToUpper(chars[i]);\n            } else if\
    \ (char.IsUpper(chars[i])) {\n                chars[i] = char.ToLower(chars[i]);\n\
    \            }\n        }\n        return new string(chars);", '        return
    str.Select(x => char.IsLower(x) ? char.ToUpper(x) : char.ToLower(x)).ToArray().ToString();',
  "        string result = \"\";\n        for (int i = 0; i < str.Length; i++) {\n\
    \            if (char.IsUpper(str[i])) {\n                result += char.ToLower(str[i]);\n\
    \            } else {\n                result += char.ToUpper(str[i]);\n     \
    \       }\n        }\n        return result;", "        string result = \"\";\n\
    \        foreach (char c in str) {\n            if (char.IsUpper(c)) {\n     \
    \           result += char.ToLower(c);\n            } else {\n               \
    \ result += char.ToUpper(c);\n            }\n        }\n        return result;",
  '        return new string(str.Select(c => char.IsUpper(c) ? char.ToLower(c) : char.ToUpper(c)).ToArray());',
  '        return new string(str.Select(c => char.IsLower(c) ? char.ToUpper(c) : char.ToLower(c)).ToArray());']
stop_tokens:
- "\n    }\n"
