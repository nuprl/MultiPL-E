name: HumanEval_145_order_by_points
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function which sorts the given list of integers\n  \
  \  // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
  \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
  \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
  \    public static List<long> OrderByPoints(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
  \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
  \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
  \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
  \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
  \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
  \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
  \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
  \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
  \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
  \ (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,\
  \ (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,\
  \ (long)6L}))));\n    }\n\n}\n"
completions: ["        // Write your code here\n        return nums;", "        //\
    \ your code here\n        return nums;", "        // TODO: implement this function\n\
    \        return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', " \
    \       return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Write your code here\n        return nums;", "        // TODO: implement\n\
    \        return null;", "        // TODO: implement your solution here\n     \
    \   return null;", "        return nums.OrderBy(x => x.ToString().Sum(c => c -\
    \ '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: Implement this\
    \ function\n        return null;", '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', " \
    \       // TODO: Implement me!\n        return nums;", "        // TODO: implement\
    \ this function\n        return null;", "        // TODO: Implement this function\n\
    \        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y =>\
    \ y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Write your code here\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var sum\
    \ = 0L;\n            var num = nums[i];\n            while (num != 0) {\n    \
    \            sum += num % 10;\n                num /= 10;\n            }\n   \
    \         if (!dict.ContainsKey(sum)) {\n                dict[sum] = 0;\n    \
    \        }\n            dict[sum] = dict[sum] * 100 + i;\n        }\n        var\
    \ keys = dict.Keys.ToList();\n        keys.Sort();\n        foreach (var key in\
    \ keys) {\n            var num = dict[key];\n            while (num != 0) {\n\
    \                result.Add(nums[(int)(num % 100)]);\n                num /= 100;\n\
    \            }\n        }\n        return result;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Write your code here\n        return nums;", "        // Write your\
    \ code here\n        return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        List<long> res = new List<long>();\n        List<long> nums_copy = new\
    \ List<long>(nums);\n        nums_copy.Sort();\n        foreach (long n in nums_copy)\
    \ {\n            long sum = 0;\n            long n_copy = n;\n            while\
    \ (n_copy != 0) {\n                sum += n_copy % 10;\n                n_copy\
    \ /= 10;\n            }\n            res.Add(sum);\n        }\n        return\
    \ res;", "        var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ List<long>>();\n        for (var i = 0; i < nums.Count; i++) {\n           \
    \ var sum = SumDigits(nums[i]);\n            if (!dict.ContainsKey(sum)) {\n \
    \               dict[sum] = new List<long>();\n            }\n            dict[sum].Add(nums[i]);\n\
    \        }\n        var keys = dict.Keys.ToList();\n        keys.Sort();\n   \
    \     foreach (var key in keys) {\n            var list = dict[key];\n       \
    \     list.Sort();\n            result.AddRange(list);\n        }\n        return\
    \ result;", "        var dict = new Dictionary<long, long>();\n        for (int\
    \ i = 0; i < nums.Count; i++) {\n            long sum = 0;\n            long num\
    \ = nums[i];\n            while (num != 0) {\n                sum += num % 10;\n\
    \                num /= 10;\n            }\n            dict[sum] = nums[i];\n\
    \        }\n        var sorted = dict.Keys.ToList();\n        sorted.Sort();\n\
    \        var result = new List<long>();\n        foreach (var key in sorted) {\n\
    \            result.Add(dict[key]);\n        }\n        return result;", "   \
    \     // your code here\n        return nums;", '        return nums.OrderBy(x
    => x.ToString().Select(y => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ List<long>>();\n        foreach (var num in nums) {\n            var sum = 0L;\n\
    \            var n = num;\n            while (n != 0) {\n                sum +=\
    \ n % 10;\n                n /= 10;\n            }\n            if (!dict.ContainsKey(sum))\
    \ {\n                dict[sum] = new List<long>();\n            }\n          \
    \  dict[sum].Add(num);\n        }\n        foreach (var key in dict.Keys.OrderBy(x\
    \ => x)) {\n            foreach (var num in dict[key]) {\n                result.Add(num);\n\
    \            }\n        }\n        return result;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  '        return nums.OrderBy(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', " \
    \       // Write your code here\n        return nums;", "        // Write your\
    \ code here\n        return nums;", '        return nums.OrderBy(x => x.ToString().Sum(y
    => (int)y - 48)).ToList();', "        var result = new List<long>();\n       \
    \ var dict = new Dictionary<long, long>();\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            var sum = 0L;\n            var num = nums[i];\n        \
    \    while (num != 0) {\n                sum += num % 10;\n                num\
    \ /= 10;\n            }\n            if (!dict.ContainsKey(sum)) {\n         \
    \       dict[sum] = i;\n            }\n        }\n        var keys = dict.Keys.ToList();\n\
    \        keys.Sort();\n        foreach (var key in keys) {\n            result.Add(nums[dict[key]]);\n\
    \        }\n        return result;", "        return nums.OrderBy(x => x.ToString().Select(y\
    \ => y - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();", "        // Your\
    \ code goes here\n        return nums;", "        var result = new List<long>();\n\
    \        var dict = new Dictionary<long, List<long>>();\n        foreach (var\
    \ num in nums) {\n            var sum = 0L;\n            var n = num;\n      \
    \      while (n != 0) {\n                sum += n % 10;\n                n /=\
    \ 10;\n            }\n            if (!dict.ContainsKey(sum)) {\n            \
    \    dict[sum] = new List<long>();\n            }\n            dict[sum].Add(num);\n\
    \        }\n        foreach (var key in dict.Keys.OrderBy(x => x)) {\n       \
    \     foreach (var num in dict[key]) {\n                result.Add(num);\n   \
    \         }\n        }\n        return result;", "        // TODO: Implement this\
    \ function\n        return nums;", "        // Write your code here\n        return\
    \ nums;", "        // TODO: implement this function\n        return nums;", " \
    \       // Write your code here\n        return nums;", "        // Write your\
    \ code here\n        return nums;", "        // TODO: implement this function\n\
    \        return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        var res = new List<long>();\n        var dict = new Dictionary<long, long>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            long sum = 0;\n \
    \           long num = nums[i];\n            while (num != 0) {\n            \
    \    sum += num % 10;\n                num /= 10;\n            }\n           \
    \ dict[sum] = nums[i];\n        }\n        foreach (var item in dict.OrderBy(x\
    \ => x.Key)) {\n            res.Add(item.Value);\n        }\n        return res;",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(n => n.ToString().Sum(c => c - '0')).ThenBy(n => nums.IndexOf(n)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  '        return nums.OrderBy(x => x.ToString().Select(y => int.Parse(y.ToString())).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        return nums.OrderBy(x => x.ToString().Sum(c\
    \ => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  '        return nums.OrderBy(x => x.ToString().Select(y => int.Parse(y.ToString())).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        // TODO: Implement this function\n  \
    \      return null;", "        // TODO: implement this function\n        return\
    \ null;", "        // TODO: implement the function\n        return nums;", " \
    \       List<long> result = new List<long>();\n        List<long> temp = new List<long>();\n\
    \        List<long> temp2 = new List<long>();\n        List<long> temp3 = new\
    \ List<long>();\n        List<long> temp4 = new List<long>();\n        List<long>\
    \ temp5 = new List<long>();\n        List<long> temp6 = new List<long>();\n  \
    \      List<long> temp7 = new List<long>();\n        List<long> temp8 = new List<long>();\n\
    \        List<long> temp9 = new List<long>();\n        List<long> temp10 = new\
    \ List<long>();\n        List<long> temp11 = new List<long>();\n        List<long>\
    \ temp12 = new List<long>();\n        List<long> temp13 = new List<long>();\n\
    \        List<long> temp14 = new List<long>();\n        List<long> temp15 = new\
    \ List<long>();\n        List<long> temp16 = new List<long>();\n        List<long>\
    \ temp17 = new List<long>();\n        List<long> temp18 = new List<long>();\n\
    \        List<long> temp19 = new List<long>();\n        List<long> temp20 = new\
    \ List<long>();\n        List<long> temp21 = new List<long>();\n        List<long>\
    \ temp22 = new List<long>();\n        List<long> temp23 = new List<long>();\n\
    \        List<long> temp24 = new List<long>();\n        List<long> temp25 = new\
    \ List<long>();\n        List<long> temp26 = new List<long>();\n        List<long>\
    \ temp27 = new List<long>();\n        List<long> temp28 = new List<long>();\n\
    \        List<long> temp29 = new List<long>();\n        List<long> temp30 = new\
    \ List<long>();\n        List<long> temp31 = new List<long>();\n        List<long>\
    \ temp32 = new List<long>();\n        List<long> temp33 = new List<long>();\n\
    \        List<", '        return nums.OrderBy(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', '        return nums.OrderBy(x => x.ToString().Select(y
    => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        return nums.OrderBy(x => x.ToString().Select(c => c - '0').Sum()).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(n => n.ToString().Select(c\
    \ => c - '0').Sum()).ThenBy(n => nums.IndexOf(n)).ToList();", "        return\
    \ nums.OrderBy(x => x.ToString().Select(y => y - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Your code goes here\n        return nums;", "        // Write your code\
    \ here\n        return null;", "        var result = new List<long>();\n     \
    \   var dict = new Dictionary<long, long>();\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            var sum = 0L;\n            var num = nums[i];\n        \
    \    while (num != 0) {\n                sum += num % 10;\n                num\
    \ /= 10;\n            }\n            if (!dict.ContainsKey(sum)) {\n         \
    \       dict[sum] = new List<long>();\n            }\n            dict[sum].Add(nums[i]);\n\
    \        }\n        var keys = dict.Keys.ToList();\n        keys.Sort();\n   \
    \     foreach (var key in keys) {\n            dict[key].Sort();\n           \
    \ result.AddRange(dict[key]);\n        }\n        return result;", "        //\
    \ TODO: implement this function\n        return nums;", "        List<long> result\
    \ = new List<long>();\n        List<long> sums = new List<long>();\n        for\
    \ (int i = 0; i < nums.Count; i++) {\n            long sum = 0;\n            long\
    \ num = nums[i];\n            while (num != 0) {\n                sum += num %\
    \ 10;\n                num /= 10;\n            }\n            sums.Add(sum);\n\
    \        }\n        for (int i = 0; i < nums.Count; i++) {\n            long min\
    \ = sums.Min();\n            int index = sums.IndexOf(min);\n            result.Add(nums[index]);\n\
    \            sums.RemoveAt(index);\n            nums.RemoveAt(index);\n      \
    \  }\n        return result;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // Write your\
    \ code here\n        return nums;", "        // TODO: Implement this function\n\
    \        return null;", "        return nums.OrderBy(n => n.ToString().Sum(c =>\
    \ c - '0')).ThenBy(n => nums.IndexOf(n)).ToList();", "        // TODO: implement\
    \ this function\n        return nums;", "        // TODO: implement this function\n\
    \        return nums;", "        // TODO: implement this function\n        return\
    \ nums;", "        var res = nums.Select((x, i) => new { x, i }).OrderBy(x =>\
    \ x.x.ToString().Sum(c => c - '0')).ThenBy(x => x.i).Select(x => x.x).ToList();\n\
    \        return res;", "        // Your code goes here\n        return nums;",
  "        // Write your code here\n        return nums;", "        var result = new\
    \ List<long>();\n        var dict = new Dictionary<long, long>();\n        foreach\
    \ (var num in nums) {\n            var sum = 0L;\n            var n = num;\n \
    \           while (n != 0) {\n                sum += n % 10;\n               \
    \ n /= 10;\n            }\n            dict[num] = sum;\n        }\n        var\
    \ sorted = dict.OrderBy(x => x.Value).ThenBy(x => x.Key);\n        foreach (var\
    \ item in sorted) {\n            result.Add(item.Key);\n        }\n        return\
    \ result;", "        return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        List<long> result = new List<long>();\n\
    \        List<long> temp = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum = 0;\n            temp.Add(num);\n   \
    \         while (num != 0) {\n                sum += num % 10;\n             \
    \   num /= 10;\n            }\n            temp.Add(sum);\n        }\n       \
    \ for (int i = 0; i < temp.Count; i += 2) {\n            for (int j = i + 2; j\
    \ < temp.Count; j += 2) {\n                if (temp[i + 1] > temp[j + 1]) {\n\
    \                    long temp1 = temp[i];\n                    long temp2 = temp[i\
    \ + 1];\n                    temp[i] = temp[j];\n                    temp[i +\
    \ 1] = temp[j + 1];\n                    temp[j] = temp1;\n                  \
    \  temp[j + 1] = temp2;\n                }\n            }\n        }\n       \
    \ for (int i = 0; i < temp.Count; i += 2) {\n            result.Add(temp[i]);\n\
    \        }\n        return result;", '        return nums.OrderBy(x => x.ToString().Select(y
    => int.Parse(y.ToString())).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();', '        return
    nums.OrderBy(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', '        return nums.OrderBy(x => x.ToString().Select(y
    => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        // TODO: implement the function\n        return nums;", "        List<long>\
    \ result = new List<long>();\n        List<long> temp = new List<long>();\n  \
    \      for (int i = 0; i < nums.Count; i++) {\n            temp.Add(nums[i]);\n\
    \        }\n        for (int i = 0; i < nums.Count; i++) {\n            long max\
    \ = temp[0];\n            int max_index = 0;\n            for (int j = 0; j <\
    \ temp.Count; j++) {\n                if (SumOfDigits(temp[j]) > SumOfDigits(max))\
    \ {\n                    max = temp[j];\n                    max_index = j;\n\
    \                }\n            }\n            result.Add(max);\n            temp.RemoveAt(max_index);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        var dict = new Dictionary<long, List<long>>();\n        foreach (var\
    \ num in nums) {\n            var sum = GetSumOfDigits(num);\n            if (!dict.ContainsKey(sum))\
    \ {\n                dict[sum] = new List<long>();\n            }\n          \
    \  dict[sum].Add(num);\n        }\n        foreach (var key in dict.Keys.OrderBy(x\
    \ => x)) {\n            foreach (var num in dict[key]) {\n                result.Add(num);\n\
    \            }\n        }\n        return result;", '        return nums.Select((x,
    i) => new { x, i }).OrderBy(x => x.x.ToString().Select(y => (int)y - 48).Sum()).ThenBy(x
    => x.i).Select(x => x.x).ToList();', "        // your code here\n        return\
    \ null;", "        // Your code goes here\n        return nums;", "        return\
    \ nums.Select((n, i) => (n, i)).OrderBy(x => x.Item1.ToString().Select(c => c\
    \ - '0').Sum()).ThenBy(x => x.Item2).Select(x => x.Item1).ToList();", "      \
    \  return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(n => n.ToString().Select(c => c - '0').Sum()).ThenBy(n\
    \ => nums.IndexOf(n)).ToList();", "        return nums.OrderBy(n => n.ToString().Sum(c\
    \ => c - '0')).ThenBy(n => nums.IndexOf(n)).ToList();", "        // Write your\
    \ code here\n        return null;", "        // TODO: Implement this function\n\
    \        return null;", "        return nums.OrderBy(x => x.ToString().Sum(c =>\
    \ c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Write your code here\n        return nums;", "        // Write your\
    \ code here\n        return nums;", "        // TODO: implement this function\n\
    \        return nums;", "        return nums.OrderBy(x => x.ToString().Select(y\
    \ => y - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO:\
    \ implement this function\n        return nums;", "        return nums.Select((x,\
    \ i) => new { x, i }).OrderBy(x => x.x.ToString().Sum(y => y - '0')).ThenBy(x\
    \ => x.i).Select(x => x.x).ToList();", "        return nums.Select((x, i) => new\
    \ { x, i })\n            .OrderBy(x => x.x.ToString().Select(y => (int)y - (int)'0').Sum())\n\
    \            .ThenBy(x => x.i)\n            .Select(x => x.x)\n            .ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: Implement this function\n        return nums;", "        // TODO:\
    \ implement\n        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return nums;", "        // TODO:\
    \ implement this function\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ List<long>>();\n        for (int i = 0; i < nums.Count; i++) {\n           \
    \ var sum = 0L;\n            var num = nums[i];\n            while (num != 0)\
    \ {\n                sum += num % 10;\n                num /= 10;\n          \
    \  }\n            if (!dict.ContainsKey(sum)) {\n                dict[sum] = new\
    \ List<long>();\n            }\n            dict[sum].Add(nums[i]);\n        }\n\
    \        var keys = dict.Keys.ToList();\n        keys.Sort();\n        foreach\
    \ (var key in keys) {\n            dict[key].Sort();\n            result.AddRange(dict[key]);\n\
    \        }\n        return result;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: Implement me\n        return null;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  '        return nums.OrderBy(x => x.ToString().Select(y => (long)Char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        return nums.OrderBy(x => x.ToString().Select(y\
    \ => y - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();", '        return
    nums.OrderBy(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        // TODO: Implement this function\n  \
    \      return nums;", "        // Write your code here\n        return nums;",
  "        return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return null;", "        var result\
    \ = new List<long>();\n        var dict = new Dictionary<long, List<long>>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            var sum = 0L;\n \
    \           var num = nums[i];\n            while (num != 0) {\n             \
    \   sum += num % 10;\n                num /= 10;\n            }\n            if\
    \ (!dict.ContainsKey(sum)) {\n                dict[sum] = new List<long>();\n\
    \            }\n            dict[sum].Add(nums[i]);\n        }\n        var keys\
    \ = dict.Keys.ToList();\n        keys.Sort();\n        foreach (var key in keys)\
    \ {\n            dict[key].Sort();\n            result.AddRange(dict[key]);\n\
    \        }\n        return result;", "        // Your code goes here\n       \
    \ return nums;", "        return nums.OrderBy(n => n.ToString().Select(c => c\
    \ - '0').Sum()).ThenBy(n => nums.IndexOf(n)).ToList();", "        // TODO: Implement\
    \ your solution here\n        return nums;", "        // TODO: implement this\
    \ function\n        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(c\
    \ => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: Implement\
    \ this function\n        return nums;", "        // Write your code here\n   \
    \     return nums;", "        // TODO: Implement this function\n        return\
    \ nums;", "        return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        // Write your code here\n        return\
    \ nums;", "        // TODO: Implement this function\n        return null;", " \
    \       // Write your code here\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        List<long> result = new List<long>();\n        List<long> temp = new List<long>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            temp.Add(nums[i]);\n\
    \        }\n        for (int i = 0; i < nums.Count; i++) {\n            long min\
    \ = temp[0];\n            int index = 0;\n            for (int j = 0; j < temp.Count;\
    \ j++) {\n                if (SumDigits(temp[j]) < SumDigits(min)) {\n       \
    \             min = temp[j];\n                    index = j;\n               \
    \ }\n            }\n            result.Add(min);\n            temp.RemoveAt(index);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  return nums;", "        // your code goes here\n        return nums;", "  \
    \      List<long> result = new List<long>();\n        List<long> nums_copy = new\
    \ List<long>(nums);\n        List<long> sums = new List<long>();\n        for\
    \ (int i = 0; i < nums.Count; i++) {\n            sums.Add(SumDigits(nums[i]));\n\
    \        }\n        for (int i = 0; i < nums.Count; i++) {\n            long min\
    \ = sums.Min();\n            int index = sums.IndexOf(min);\n            result.Add(nums_copy[index]);\n\
    \            sums.RemoveAt(index);\n            nums_copy.RemoveAt(index);\n \
    \       }\n        return result;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: implement\
    \ this function\n        return null;", "        // Write your code here\n   \
    \     return nums;", "        // TODO: Implement this function\n        return\
    \ nums;", "        // TODO: Implement your solution here\n        return nums;",
  "        // TODO: implement this function\n        return null;", "        // Write\
    \ your code here\n        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(c\
    \ => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: Implement\
    \ this function\n        return nums;", "        return nums.OrderBy(x => x.ToString().Select(y\
    \ => y - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();"]
stop_tokens:
- "\n    }\n"
