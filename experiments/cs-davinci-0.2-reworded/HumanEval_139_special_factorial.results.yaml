language: cs
name: HumanEval_139_special_factorial
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // TODO:\
    \ Implement this function\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        return n * SpecialFactorial(n\
    \ - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // Your\
    \ code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4573fa647e2c4f37b1c141717797c5d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4573fa647e2c4f37b1c141717797c5d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        return n * SpecialFactorial(n\
    \ - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsq_5l5t7.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n <=\
    \ 0) {\n            throw new ArgumentException(\"n must be greater than 0\");\n\
    \        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n\
    \            result *= Factorial(i);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxj79jj1q.cs(23,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // TODO:\
    \ Implement the special factorial function\n        // Hint: You can use the factorial\
    \ function from the previous problem\n        // to help you with this one.\n\
    \        return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30f733f9336f47b386987997e672f189>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30f733f9336f47b386987997e672f189>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n <=\
    \ 0) {\n            throw new ArgumentException(\"n must be greater than 0\");\n\
    \        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n\
    \            result *= Factorial(i);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxj79jj1q.cs(23,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // Your\
    \ code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4573fa647e2c4f37b1c141717797c5d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4573fa647e2c4f37b1c141717797c5d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        return\
    \ Factorial(n) * Factorial(n - 1);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf2pax021.cs(18,16): error CS0103: The name ''Factorial'' does not exist
    in the current context

    /tmp/tmpf2pax021.cs(18,31): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        return n * SpecialFactorial(n\
    \ - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) return 1;\n        return n * SpecialFactorial(n - 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) ==\
    \ (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <432731e89c384127a8dd68a87e41a8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <432731e89c384127a8dd68a87e41a8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        long result = 1;\n        for\
    \ (long i = 1; i <= n; i++) {\n            result *= Factorial(i);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnju0_tys.cs(23,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // TODO:\
    \ Implement this function\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsq_5l5t7.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n <=\
    \ 0) {\n            throw new ArgumentException(\"n must be greater than 0\");\n\
    \        }\n        var result = new BigInteger(1);\n        for (var i = n; i\
    \ > 0; i--) {\n            result *= Factorial(i);\n        }\n        return\
    \ (long)result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw1k1ze2i.cs(23,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) return 1;\n        return n * SpecialFactorial(n - 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) ==\
    \ (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <432731e89c384127a8dd68a87e41a8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <432731e89c384127a8dd68a87e41a8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        long result = 1;\n        for\
    \ (long i = n; i > 0; i--) {\n            result *= i;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1b0612aecdc44c88a8e181df482f8d2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1b0612aecdc44c88a8e181df482f8d2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // The\
    \ factorial function is defined as:\n        // factorial(n) = n * (n-1) * (n-2)\
    \ * ... * 1\n        // where n > 0\n        // For example:\n        // >>> factorial(4)\n\
    \        // 24\n        // The function will receive an integer as input and should\
    \ return the\n        // factorial of this integer.\n        long factorial(long\
    \ n) {\n            if (n == 0) return 1;\n            return n * factorial(n\
    \ - 1);\n        }\n        if (n == 0) return 1;\n        return n * SpecialFactorial(n\
    \ - 1) * factorial(n - 1);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // Your\
    \ code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4573fa647e2c4f37b1c141717797c5d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4573fa647e2c4f37b1c141717797c5d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        long result = 1;\n        for\
    \ (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_03f6sva.cs(23,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = 1; i <= n; i++) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsq_5l5t7.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp748oyqpi.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        long result = n;\n        for\
    \ (long i = n - 1; i > 0; i--) {\n            result *= i;\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b028ad81586c4c798689e7e6233ac71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b028ad81586c4c798689e7e6233ac71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp748oyqpi.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        long result = n;\n        for\
    \ (long i = n - 1; i > 0; i--) {\n            result *= i;\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b028ad81586c4c798689e7e6233ac71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b028ad81586c4c798689e7e6233ac71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n <\
    \ 1) {\n            throw new ArgumentException(\"n must be greater than 0\");\n\
    \        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n\
    \            result *= Factorial(i);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi4gg0f7x.cs(23,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n <=\
    \ 0) {\n            throw new ArgumentException(\"n must be greater than 0\");\n\
    \        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n\
    \            result *= Factorial(i);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxj79jj1q.cs(23,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) return 1;\n        long result = 1;\n        for (long i = n; i > 0; i--)\
    \ {\n            result *= Factorial(i);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa_u88bxz.cs(21,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // TODO:\
    \ Implement this function\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // TODO:\
    \ Implement this function\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp748oyqpi.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp748oyqpi.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp748oyqpi.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n <\
    \ 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n\
    \        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n\
    \            result *= Factorial(i);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdtxg9uxw.cs(23,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n <\
    \ 0) throw new ArgumentOutOfRangeException();\n        if (n == 0) return 1;\n\
    \        return n * SpecialFactorial(n - 1);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee2e5aee61d84b889499481a0047fbb4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee2e5aee61d84b889499481a0047fbb4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) return 1;\n        long result = 1;\n        for (long i = n; i > 0; i--)\
    \ {\n            result *= i;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) ==\
    \ (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9978541ae80f4b78a5b70a5717b034db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9978541ae80f4b78a5b70a5717b034db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp748oyqpi.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // TODO:\
    \ Implement this function\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // TODO:\
    \ Implement this function.\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c038f1154d44f09cf72eb6c53c6999>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5c038f1154d44f09cf72eb6c53c6999>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // TODO:\
    \ Implement this function\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        return n * SpecialFactorial(n\
    \ - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // Your\
    \ code goes here\n        long result = 1;\n        for (long i = n; i > 0; i--)\
    \ {\n            result *= Factorial(i);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4cttd7fo.cs(21,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n <\
    \ 1) {\n            throw new ArgumentException(\"n must be greater than 0\");\n\
    \        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n\
    \            result *= Factorial(i);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi4gg0f7x.cs(23,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // Your\
    \ code goes here.\n        long result = 1;\n        for (long i = n; i > 0; i--)\
    \ {\n            result *= Factorial(i);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbdbvbofd.cs(21,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794158
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // TODO:\
    \ Implement this function\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        return n * SpecialFactorial(n\
    \ - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        long result = n;\n        for\
    \ (long i = n - 1; i > 0; i--) {\n            result *= i;\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b028ad81586c4c798689e7e6233ac71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b028ad81586c4c798689e7e6233ac71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n <\
    \ 0) {\n            throw new ArgumentException(\"n must be non-negative\");\n\
    \        }\n        if (n == 0) {\n            return 1;\n        }\n        long\
    \ result = n;\n        for (long i = n - 1; i > 0; i--) {\n            result\
    \ *= i;\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b57ea98cb8646419119614a7d449dfe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b57ea98cb8646419119614a7d449dfe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        long result = n;\n        for\
    \ (long i = n - 1; i > 0; i--) {\n            result *= i;\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b028ad81586c4c798689e7e6233ac71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b028ad81586c4c798689e7e6233ac71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // Your\
    \ code goes here\n        long result = 1;\n        for (long i = n; i > 0; i--)\
    \ {\n            result *= Factorial(i);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4cttd7fo.cs(21,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // Your\
    \ code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4573fa647e2c4f37b1c141717797c5d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4573fa647e2c4f37b1c141717797c5d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03c367dba50b42628f1454c8bc8ec2c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03c367dba50b42628f1454c8bc8ec2c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        } else {\n            long result = n;\n\
    \            for (long i = n - 1; i > 0; i--) {\n                result *= i;\n\
    \            }\n            return result;\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n\
    \    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <06bd2add6af44464abfec2081c258e80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <06bd2add6af44464abfec2081c258e80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // TODO:\
    \ Implement this function\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        return n * SpecialFactorial(n\
    \ - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        } else {\n            return n * SpecialFactorial(n\
    \ - 1);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a749ed9eaf74e5685897b20622a68b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a749ed9eaf74e5685897b20622a68b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= i;\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03c367dba50b42628f1454c8bc8ec2c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03c367dba50b42628f1454c8bc8ec2c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) return 1;\n        return n * SpecialFactorial(n - 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) ==\
    \ (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <432731e89c384127a8dd68a87e41a8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <432731e89c384127a8dd68a87e41a8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        return n * SpecialFactorial(n\
    \ - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        return n * SpecialFactorial(n\
    \ - 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd62ac3cea0841b4890bc214b5fd5c46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp748oyqpi.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n <\
    \ 0) {\n            throw new ArgumentException(\"n must be positive\");\n   \
    \     }\n        if (n == 0) {\n            return 1;\n        }\n        long\
    \ result = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk7dgpfv2.cs(26,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) return 1;\n        long result = 1;\n        for (long i = n; i > 0; i--)\
    \ {\n            result *= i;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) ==\
    \ (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9978541ae80f4b78a5b70a5717b034db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9978541ae80f4b78a5b70a5717b034db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) return 1;\n        long result = 1;\n        for (long i = n; i > 0; i--)\
    \ {\n            result *= Factorial(i);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa_u88bxz.cs(21,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) return 1;\n        return n * SpecialFactorial(n - 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) ==\
    \ (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <432731e89c384127a8dd68a87e41a8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <432731e89c384127a8dd68a87e41a8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // TODO:\
    \ Implement this function\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30cb89b3822d4fc59091e6ab56c4fd5a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n <\
    \ 1) {\n            throw new ArgumentException(\"n must be greater than 0\");\n\
    \        }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n\
    \            result *= Factorial(i);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi4gg0f7x.cs(23,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        long result = 1;\n        for\
    \ (long i = 1; i <= n; i++) {\n            result *= Factorial(i);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnju0_tys.cs(23,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // Your\
    \ code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4573fa647e2c4f37b1c141717797c5d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4573fa647e2c4f37b1c141717797c5d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) return 1;\n        return n * SpecialFactorial(n - 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) ==\
    \ (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <432731e89c384127a8dd68a87e41a8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <432731e89c384127a8dd68a87e41a8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) return 1;\n        return n * SpecialFactorial(n - 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L)) ==\
    \ (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <432731e89c384127a8dd68a87e41a8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <432731e89c384127a8dd68a87e41a8db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n <=\
    \ 0) {\n            throw new ArgumentException(\"n must be positive\");\n   \
    \     }\n        long result = 1;\n        for (long i = n; i > 0; i--) {\n  \
    \          result *= Factorial(i);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeg9vtrdx.cs(23,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // Your\
    \ code goes here.\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e82eaee053c4ff58e58285922c768e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e82eaee053c4ff58e58285922c768e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        long result = 1;\n        for\
    \ (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_03f6sva.cs(23,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        if (n <\
    \ 0) {\n            throw new ArgumentException(\"n must be >= 0\");\n       \
    \ }\n        if (n == 0) {\n            return 1;\n        }\n        long result\
    \ = n;\n        for (long i = n - 1; i > 0; i--) {\n            result *= i;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7f7386e8ce7452eb5ecbaf2d2e179af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7f7386e8ce7452eb5ecbaf2d2e179af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794158
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        long result\
    \ = 1;\n        for (long i = n; i > 0; i--) {\n            result *= Factorial(i);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SpecialFactorial((4L)) == (288L));\n    Debug.Assert(SpecialFactorial((5L))\
    \ == (34560L));\n    Debug.Assert(SpecialFactorial((7L)) == (125411328000L));\n\
    \    Debug.Assert(SpecialFactorial((1L)) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vc4p3kb.cs(20,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n\
    \    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive\
    \ an integer as input and should return the special\n    // factorial of this\
    \ integer.\n    public static long SpecialFactorial(long n) {\n        // Your\
    \ code goes here\n        long result = 1;\n        for (long i = n; i > 0; i--)\
    \ {\n            result *= Factorial(i);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SpecialFactorial((4L))\
    \ == (288L));\n    Debug.Assert(SpecialFactorial((5L)) == (34560L));\n    Debug.Assert(SpecialFactorial((7L))\
    \ == (125411328000L));\n    Debug.Assert(SpecialFactorial((1L)) == (1L));\n  \
    \  }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4cttd7fo.cs(21,23): error CS0103: The name ''Factorial'' does not exist
    in the current context

    '
  timestamp: 1659794157
