name: HumanEval_70_strange_sort_list
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given list of integers, return list in strange order.\n    //\
  \ Strange sorting, is when you start with the minimum value,\n    // then maximum\
  \ of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>>\
  \ StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n\
  \    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n \
  \   // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
  \ (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
  \ (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n\
  \    public static List<long> StrangeSortList(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrangeSortList((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)4L, (long)2L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new\
  \ List<long>(new long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))).Equals((new\
  \ List<long>(new long[]{(long)5L, (long)9L, (long)6L, (long)8L, (long)7L}))));\n\
  \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)5L,\
  \ (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
  \ long[]{(long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)1L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)9L, (long)5L, (long)8L, (long)6L, (long)7L}))));\n\
  \    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L,\
  \ (long)5L, (long)5L}))).Equals((new List<long>(new long[]{(long)5L, (long)5L, (long)5L,\
  \ (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(StrangeSortList((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)8L, (long)2L, (long)7L, (long)3L, (long)6L,\
  \ (long)4L, (long)5L}))));\n    Debug.Assert(StrangeSortList((new List<long>(new\
  \ long[]{(long)0L, (long)2L, (long)2L, (long)2L, (long)5L, (long)5L, (long)-5L,\
  \ (long)-5L}))).Equals((new List<long>(new long[]{(long)-5L, (long)5L, (long)-5L,\
  \ (long)5L, (long)0L, (long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(StrangeSortList((new\
  \ List<long>(new long[]{(long)111111L}))).Equals((new List<long>(new long[]{(long)111111L}))));\n\
  \    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        if (lst.Count\
    \ == 0) {\n            return result;\n        }\n        long min = lst.Min();\n\
    \        long max = lst.Max();\n        bool isMin = true;\n        while (lst.Count\
    \ > 0) {\n            if (isMin) {\n                result.Add(min);\n       \
    \         lst.Remove(min);\n            } else {\n                result.Add(max);\n\
    \                lst.Remove(max);\n            }\n            min = lst.Min();\n\
    \            max = lst.Max();\n            isMin = !isMin;\n        }\n      \
    \  return result;", "        List<long> res = new List<long>();\n        List<long>\
    \ lst_copy = new List<long>(lst);\n        while (lst_copy.Count > 0) {\n    \
    \        long min = lst_copy.Min();\n            lst_copy.Remove(min);\n     \
    \       res.Add(min);\n            if (lst_copy.Count > 0) {\n               \
    \ long max = lst_copy.Max();\n                lst_copy.Remove(max);\n        \
    \        res.Add(max);\n            }\n        }\n        return res;", "    \
    \    List<long> result = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n\
    \        List<long> lst2 = new List<long>(lst);\n        lst1.Sort();\n      \
    \  lst2.Sort();\n        lst2.Reverse();\n        int i = 0;\n        while (lst1.Count\
    \ > 0) {\n            result.Add(lst1[i]);\n            lst1.RemoveAt(i);\n  \
    \          if (lst2.Count > 0) {\n                result.Add(lst2[i]);\n     \
    \           lst2.RemoveAt(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n\
    \        lst2.Sort();\n        int i = 0;\n        while (lst2.Count > 0) {\n\
    \            if (i % 2 == 0) {\n                result.Add(lst2[0]);\n       \
    \         lst2.RemoveAt(0);\n            } else {\n                result.Add(lst2[lst2.Count\
    \ - 1]);\n                lst2.RemoveAt(lst2.Count - 1);\n            }\n    \
    \        i++;\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        List<long> lst1 = new List<long>(lst);\n      \
    \  List<long> lst2 = new List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n\
    \        lst2.Reverse();\n        int i = 0;\n        while (i < lst.Count) {\n\
    \            if (i % 2 == 0) {\n                result.Add(lst1[0]);\n       \
    \         lst1.RemoveAt(0);\n            } else {\n                result.Add(lst2[0]);\n\
    \                lst2.RemoveAt(0);\n            }\n            i = i + 1;\n  \
    \      }\n        return result;", "        // Your code here\n        return\
    \ null;", "        if (lst.Count == 0) {\n            return lst;\n        }\n\
    \        List<long> result = new List<long>();\n        List<long> remaining =\
    \ new List<long>(lst);\n        while (remaining.Count > 0) {\n            long\
    \ min = remaining.Min();\n            long max = remaining.Max();\n          \
    \  result.Add(min);\n            remaining.Remove(min);\n            if (remaining.Count\
    \ > 0) {\n                result.Add(max);\n                remaining.Remove(max);\n\
    \            }\n        }\n        return result;", "        if (lst.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        if (lst.Count\
    \ == 1) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n\
    \        List<long> lst2 = new List<long>(lst);\n        long min = lst2.Min();\n\
    \        res.Add(min);\n        lst2.Remove(min);\n        while (lst2.Count >\
    \ 0) {\n            long max = lst2.Max();\n            res.Add(max);\n      \
    \      lst2.Remove(max);\n            if (lst2.Count == 0) {\n               \
    \ break;\n            }\n            long min2 = lst2.Min();\n            res.Add(min2);\n\
    \            lst2.Remove(min2);\n        }\n        return res;", "        List<long>\
    \ result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n\
    \        while (lst2.Count > 0) {\n            long min = lst2.Min();\n      \
    \      long max = lst2.Max();\n            result.Add(min);\n            lst2.Remove(min);\n\
    \            if (lst2.Count > 0) {\n                result.Add(max);\n       \
    \         lst2.Remove(max);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        List<long> sorted = lst.OrderBy(x\
    \ => x).ToList();\n        int i = 0;\n        while (sorted.Count > 0) {\n  \
    \          if (i % 2 == 0) {\n                result.Add(sorted[0]);\n       \
    \         sorted.RemoveAt(0);\n            } else {\n                result.Add(sorted[sorted.Count\
    \ - 1]);\n                sorted.RemoveAt(sorted.Count - 1);\n            }\n\
    \            i++;\n        }\n        return result;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ lst;", "        var result = new List<long>();\n        var sorted = lst.OrderBy(x\
    \ => x).ToList();\n        var min = sorted.First();\n        var max = sorted.Last();\n\
    \        var minIndex = lst.IndexOf(min);\n        var maxIndex = lst.IndexOf(max);\n\
    \        var minIndexes = new List<int>();\n        var maxIndexes = new List<int>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == min)\
    \ {\n                minIndexes.Add(i);\n            }\n            if (lst[i]\
    \ == max) {\n                maxIndexes.Add(i);\n            }\n        }\n  \
    \      for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n\
    \                result.Add(min);\n            } else {\n                result.Add(max);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        List<long> min = new List<long>();\n        List<long>\
    \ max = new List<long>();\n        if (lst.Count == 0) {\n            return result;\n\
    \        }\n        if (lst.Count == 1) {\n            result.Add(lst[0]);\n \
    \           return result;\n        }\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (i % 2 == 0) {\n                min.Add(lst[i]);\n  \
    \          } else {\n                max.Add(lst[i]);\n            }\n       \
    \ }\n        min.Sort();\n        max.Sort();\n        max.Reverse();\n      \
    \  for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0) {\n    \
    \            result.Add(min[i / 2]);\n            } else {\n                result.Add(max[i\
    \ / 2]);\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        List<long> lst2 = new List<long>(lst);\n\
    \        while (lst2.Count > 0) {\n            long min = lst2.Min();\n      \
    \      long max = lst2.Max();\n            result.Add(min);\n            lst2.Remove(min);\n\
    \            if (lst2.Count > 0) {\n                result.Add(max);\n       \
    \         lst2.Remove(max);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        List<long> sorted = lst.OrderBy(x\
    \ => x).ToList();\n        int i = 0;\n        int j = sorted.Count - 1;\n   \
    \     while (i <= j) {\n            result.Add(sorted[i]);\n            i++;\n\
    \            if (i <= j) {\n                result.Add(sorted[j]);\n         \
    \       j--;\n            }\n        }\n        return result;", "        if (lst.Count\
    \ == 0) {\n            return lst;\n        }\n        List<long> res = new List<long>();\n\
    \        List<long> lst1 = new List<long>(lst);\n        List<long> lst2 = new\
    \ List<long>(lst);\n        lst1.Sort();\n        lst2.Sort();\n        lst2.Reverse();\n\
    \        int i = 0;\n        while (lst1.Count > 0) {\n            res.Add(lst1[i]);\n\
    \            lst1.RemoveAt(i);\n            if (lst1.Count == 0) {\n         \
    \       break;\n            }\n            res.Add(lst2[i]);\n            lst2.RemoveAt(i);\n\
    \        }\n        return res;", "        if (lst.Count == 0) {\n           \
    \ return lst;\n        }\n        List<long> result = new List<long>();\n    \
    \    List<long> remaining = new List<long>(lst);\n        while (remaining.Count\
    \ > 0) {\n            long min = remaining.Min();\n            long max = remaining.Max();\n\
    \            result.Add(min);\n            remaining.Remove(min);\n          \
    \  if (remaining.Count > 0) {\n                result.Add(max);\n            \
    \    remaining.Remove(max);\n            }\n        }\n        return result;",
  "        if (lst.Count == 0) {\n            return lst;\n        }\n        List<long>\
    \ result = new List<long>();\n        List<long> remaining = new List<long>(lst);\n\
    \        bool isMin = true;\n        while (remaining.Count > 0) {\n         \
    \   long min = remaining[0];\n            long max = remaining[0];\n         \
    \   foreach (long i in remaining) {\n                if (i < min) {\n        \
    \            min = i;\n                }\n                if (i > max) {\n   \
    \                 max = i;\n                }\n            }\n            if (isMin)\
    \ {\n                result.Add(min);\n                remaining.Remove(min);\n\
    \            } else {\n                result.Add(max);\n                remaining.Remove(max);\n\
    \            }\n            isMin = !isMin;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        List<long> remaining = new\
    \ List<long>(lst);\n        while (remaining.Count > 0) {\n            long min\
    \ = remaining.Min();\n            remaining.Remove(min);\n            result.Add(min);\n\
    \            if (remaining.Count > 0) {\n                long max = remaining.Max();\n\
    \                remaining.Remove(max);\n                result.Add(max);\n  \
    \          }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
