name: HumanEval_118_get_closest_vowel
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a word. Your task is to find the closest vowel\
  \ that stands between \n    // two consonants from the right side of the word (case\
  \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty\
  \ string if you didn't\n    // find any vowel met the above condition. \n    //\
  \ You may assume that the given string contains English letter only.\n    // Example:\n\
  \    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> GetClosestVowel((\"\
  FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"quick\"))\n    // (\"\"\
  )\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n    public static string\
  \ GetClosestVowel(string word) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
  yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
  u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
  most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
  i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  Above\")).Equals((\"o\")));\n    }\n\n}\n"
completions: ["        // TODO: Implement this method\n        return \"\";", "  \
    \      // TODO: Implement your code here\n        return \"\";", "        // TODO:\
    \ Implement your solution here\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // TODO: Implement this method\n        return\
    \ \"\";", "        string vowels = \"aeiou\";\n        string result = \"\";\n\
    \        int distance = int.MaxValue;\n        for (int i = word.Length - 1; i\
    \ >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n                if\
    \ (i == word.Length - 1) {\n                    continue;\n                }\n\
    \                if (vowels.Contains(word[i + 1])) {\n                    continue;\n\
    \                }\n                if (i == 0) {\n                    continue;\n\
    \                }\n                if (vowels.Contains(word[i - 1])) {\n    \
    \                continue;\n                }\n                int currentDistance\
    \ = word.Length - i;\n                if (currentDistance < distance) {\n    \
    \                distance = currentDistance;\n                    result = word[i].ToString();\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   // Your code goes here\n        return \"\";", "        var vowels = new HashSet<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char> { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        var result = new List<char>();\n        for (int\
    \ i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                result.Add(word[i]);\n            } else if (consonants.Contains(word[i]))\
    \ {\n                if (result.Count > 0) {\n                    return new string(result.ToArray());\n\
    \                }\n            }\n        }\n        return \"\";", "       \
    \ // Your code goes here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // Write your code here\n   \
    \     return \"\";", "        string vowels = \"aeiou\";\n        int closest\
    \ = -1;\n        for (int i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (vowels.Contains(word[i])) {\n                if (closest == -1) {\n       \
    \             closest = i;\n                } else {\n                    return\
    \ word[closest].ToString();\n                }\n            } else {\n       \
    \         if (closest != -1) {\n                    return word[closest].ToString();\n\
    \                }\n            }\n        }\n        return \"\";", "       \
    \ // TODO: Implement your solution here\n        return \"\";", "        string\
    \ vowels = \"aeiou\";\n        int closest = -1;\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n         \
    \       closest = i;\n                break;\n            }\n        }\n     \
    \   if (closest == -1) {\n            return \"\";\n        }\n        for (int\
    \ i = closest - 1; i >= 0; i--) {\n            if (!vowels.Contains(word[i]))\
    \ {\n                return word[closest].ToString();\n            }\n       \
    \ }\n        return \"\";", "        if (word.Length < 3) return \"\";\n     \
    \   for (int i = word.Length - 1; i >= 0; i--) {\n            if (IsVowel(word[i]))\
    \ {\n                if (IsConsonant(word[i - 1]) && IsConsonant(word[i - 2]))\
    \ {\n                    return word[i].ToString();\n                }\n     \
    \       }\n        }\n        return \"\";", "        string vowels = \"aeiou\"\
    ;\n        string result = \"\";\n        int minDistance = int.MaxValue;\n  \
    \      for (int i = 0; i < word.Length; i++) {\n            if (vowels.Contains(word[i]))\
    \ {\n                int distance = word.Length - i;\n                if (distance\
    \ < minDistance) {\n                    minDistance = distance;\n            \
    \        result = word[i].ToString();\n                }\n            }\n    \
    \    }\n        return result;", "        // TODO: Implement this method\n   \
    \     return \"\";", "        // Write your code here\n        return \"\";",
  "        string vowels = \"aeiou\";\n        string closest = \"\";\n        int\
    \ closestIndex = -1;\n        for (int i = word.Length - 1; i >= 0; i--) {\n \
    \           if (vowels.Contains(word[i])) {\n                if (closestIndex\
    \ == -1) {\n                    closest = word[i].ToString();\n              \
    \      closestIndex = i;\n                } else {\n                    if (i\
    \ < closestIndex) {\n                        closest = word[i].ToString();\n \
    \                       closestIndex = i;\n                    }\n           \
    \     }\n            }\n        }\n        return closest;", '        return "";',
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // Write your code here\n        return \"\";", "        // Write your code\
    \ here\n        return \"\";", "        // TODO: Implement your solution here\n\
    \        return \"\";", "        // TODO: Implement your code here\n        return\
    \ \"\";", "        // Write your code here\n        return \"\";", "        //\
    \ TODO: Implement your code here\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", '        return "";', "        string\
    \ vowels = \"aeiou\";\n        int lastVowel = -1;\n        int firstConsonant\
    \ = -1;\n        int closestVowel = -1;\n        int closestDistance = int.MaxValue;\n\
    \        for (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                lastVowel = i;\n                if (firstConsonant != -1)\
    \ {\n                    int distance = firstConsonant - lastVowel;\n        \
    \            if (distance < closestDistance) {\n                        closestDistance\
    \ = distance;\n                        closestVowel = lastVowel;\n           \
    \         }\n                }\n            } else {\n                if (lastVowel\
    \ != -1) {\n                    firstConsonant = i;\n                }\n     \
    \       }\n        }\n        if (closestVowel == -1) {\n            return \"\
    \";\n        }\n        return word[closestVowel].ToString();", "        int closest\
    \ = -1;\n        for (int i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (IsVowel(word[i])) {\n                closest = i;\n                break;\n\
    \            }\n        }\n        if (closest == -1) {\n            return \"\
    \";\n        }\n        for (int i = closest - 1; i >= 0; i--) {\n           \
    \ if (!IsVowel(word[i])) {\n                return word[closest].ToString();\n\
    \            }\n        }\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        string vowels = \"aeiou\";\n        int index = word.Length - 1;\n    \
    \    while (index >= 0) {\n            if (vowels.Contains(word[index])) {\n \
    \               if (index == word.Length - 1) {\n                    return \"\
    \";\n                }\n                if (vowels.Contains(word[index + 1]))\
    \ {\n                    return \"\";\n                }\n                return\
    \ word[index].ToString();\n            }\n            index--;\n        }\n  \
    \      return \"\";", "        // TODO: Implement your solution here\n       \
    \ return \"\";", "        // TODO: Implement this method\n        return \"\";",
  "        string vowels = \"aeiouAEIOU\";\n        string result = \"\";\n      \
    \  int index = word.Length - 1;\n        bool found = false;\n        while (index\
    \ >= 0) {\n            if (vowels.Contains(word[index])) {\n                if\
    \ (index > 0 && !vowels.Contains(word[index - 1])) {\n                    found\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        index--;\n        }\n        if (found) {\n            result = word[index].ToString();\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // TODO: Implement your solution here\n        return \"\";", "        // Your\
    \ code here\n        return \"\";", "        // TODO: Implement this method\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // TODO: Implement your code here\n        return \"\";", "        // TODO:\
    \ Implement your solution here\n        return \"\";", "        // TODO: Implement\
    \ this function\n        return \"\";", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: Implement your code here\n        return\
    \ \"\";", "        // TODO: Implement this function\n        return \"\";", " \
    \       // Your code goes here\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", '        return "";', "        //\
    \ TODO: Implement your solution here\n        return \"\";", "        // TODO:\
    \ Implement your solution here\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // TODO: Implement this\
    \ method\n        //throw new NotImplementedException();\n        string vowels\
    \ = \"aeiou\";\n        string result = \"\";\n        int index = 0;\n      \
    \  for (int i = word.Length - 1; i >= 0; i--)\n        {\n            if (vowels.Contains(word[i]))\n\
    \            {\n                index = i;\n                break;\n         \
    \   }\n        }\n        if (index == 0)\n        {\n            return result;\n\
    \        }\n        else\n        {\n            for (int i = index - 1; i >=\
    \ 0; i--)\n            {\n                if (!vowels.Contains(word[i]))\n   \
    \             {\n                    result = word[index].ToString();\n      \
    \              break;\n                }\n            }\n        }\n        return\
    \ result;", "        // Write your code here\n        return \"\";", "       \
    \ // TODO: implement this method\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // TODO: Implement this method\n\
    \        //throw new NotImplementedException();\n        string vowels = \"aeiou\"\
    ;\n        for (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                if (i == word.Length - 1) {\n                    return \"\
    \";\n                }\n                if (vowels.Contains(word[i + 1])) {\n\
    \                    return \"\";\n                }\n                return word[i].ToString();\n\
    \            }\n        }\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        // Write your code here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // TODO: Implement your solution here\n        return \"\";", "        // TODO:\
    \ Implement your solution here\n        return \"\";", "        // TODO: Implement\
    \ your code here\n        return \"\";", "        // TODO: Implement this method\n\
    \        return \"\";", "        // TODO: Implement this method\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        string vowels = \"aeiouAEIOU\";\n        int closest = -1;\n        for\
    \ (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                closest = i;\n                break;\n            }\n   \
    \     }\n        if (closest == -1) {\n            return \"\";\n        }\n \
    \       for (int i = closest - 1; i >= 0; i--) {\n            if (!vowels.Contains(word[i]))\
    \ {\n                return word[closest].ToString();\n            }\n       \
    \ }\n        return \"\";", "        string vowels = \"aeiou\";\n        string\
    \ result = \"\";\n        int distance = word.Length;\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n         \
    \       if (i + 1 < word.Length && !vowels.Contains(word[i + 1])) {\n        \
    \            if (distance > i) {\n                        distance = i;\n    \
    \                    result = word[i].ToString();\n                    }\n   \
    \             }\n            }\n        }\n        return result;", "        //\
    \ TODO: Implement your solution here\n        return \"\";", "        string vowels\
    \ = \"aeiou\";\n        string closestVowel = \"\";\n        int closestVowelIndex\
    \ = -1;\n        int closestVowelDistance = int.MaxValue;\n        for (int i\
    \ = 0; i < word.Length; i++) {\n            if (vowels.Contains(word[i])) {\n\
    \                int distance = word.Length - i;\n                if (distance\
    \ < closestVowelDistance) {\n                    closestVowel = word[i].ToString();\n\
    \                    closestVowelIndex = i;\n                    closestVowelDistance\
    \ = distance;\n                }\n            }\n        }\n        if (closestVowelIndex\
    \ == -1) {\n            return \"\";\n        }\n        for (int i = closestVowelIndex\
    \ + 1; i < word.Length; i++) {\n            if (!vowels.Contains(word[i])) {\n\
    \                return closestVowel;\n            }\n        }\n        return\
    \ \"\";", "        // TODO: Implement this method\n        return \"\";", "  \
    \      // TODO: Implement your solution here\n        return \"\";", "       \
    \ // TODO: Implement your solution here\n        return \"\";", "        // Write\
    \ your code here\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        // TODO: Implement your solution here\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // Your code here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        string vowels = \"aeiouAEIOU\"\
    ;\n        int index = word.Length - 1;\n        while (index >= 0) {\n      \
    \      if (vowels.Contains(word[index])) {\n                if (index == word.Length\
    \ - 1) {\n                    return \"\";\n                }\n              \
    \  if (vowels.Contains(word[index + 1])) {\n                    return \"\";\n\
    \                }\n                return word[index].ToString();\n         \
    \   }\n            index--;\n        }\n        return \"\";", "        // TODO:\
    \ Implement your solution here\n        return \"\";", "        // TODO: Implement\
    \ your code here\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // Your code goes here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // TODO: Implement your solution here\n        return \"\";", "        // TODO:\
    \ Implement your solution here\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // TODO: Implement this\
    \ method\n        return \"\";", '        return "";', "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // Your code goes here\n    \
    \    return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        string vowels =\
    \ \"aeiou\";\n        string result = \"\";\n        int minDistance = int.MaxValue;\n\
    \        for (int i = 0; i < word.Length; i++) {\n            if (vowels.Contains(word[i]))\
    \ {\n                int j = word.Length - 1;\n                while (j > i &&\
    \ !vowels.Contains(word[j])) {\n                    j--;\n                }\n\
    \                if (j > i) {\n                    int distance = j - i;\n   \
    \                 if (distance < minDistance) {\n                        minDistance\
    \ = distance;\n                        result = word[i].ToString();\n        \
    \            }\n                }\n            }\n        }\n        return result;",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // TODO: Implement your solution here\n        return \"\";", "        // TODO:\
    \ Implement your code here\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        string vowels = \"aeiouAEIOU\"\
    ;\n        string result = \"\";\n        int index = word.Length - 1;\n     \
    \   while (index >= 0) {\n            if (vowels.Contains(word[index])) {\n  \
    \              result = word[index].ToString();\n                break;\n    \
    \        }\n            index--;\n        }\n        return result;", "      \
    \  // TODO: Implement your solution here\n        return \"\";", "        // TODO:\
    \ Implement this method\n        return \"\";", "        // TODO: Implement your\
    \ solution\n        return \"\";", "        // TODO: Implement your solution here\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        // your code here\n        return \"\";", "        // TODO:\
    \ Implement this method\n        //throw new NotImplementedException();\n    \
    \    string vowels = \"aeiou\";\n        string result = \"\";\n        int index\
    \ = word.Length - 1;\n        while (index >= 0)\n        {\n            if (vowels.Contains(word[index]))\n\
    \            {\n                result = word[index].ToString();\n           \
    \     break;\n            }\n            index--;\n        }\n        return result;",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ string vowels = \"aeiou\";\n        int closest = -1;\n        for (int i =\
    \ word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n\
    \                closest = i;\n                break;\n            }\n       \
    \ }\n        if (closest == -1) return \"\";\n        for (int i = closest - 1;\
    \ i >= 0; i--) {\n            if (!vowels.Contains(word[i])) {\n             \
    \   return word[closest].ToString();\n            }\n        }\n        return\
    \ \"\";", "        string vowels = \"aeiouAEIOU\";\n        int closest = -1;\n\
    \        for (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                closest = i;\n                break;\n            }\n   \
    \     }\n        if (closest == -1) return \"\";\n        for (int i = closest\
    \ - 1; i >= 0; i--) {\n            if (!vowels.Contains(word[i])) {\n        \
    \        return word[closest].ToString();\n            }\n        }\n        return\
    \ \"\";", "        string vowels = \"aeiou\";\n        int closest = -1;\n   \
    \     for (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                closest = i;\n                break;\n            }\n   \
    \     }\n        if (closest == -1) {\n            return \"\";\n        }\n \
    \       for (int i = closest - 1; i >= 0; i--) {\n            if (!vowels.Contains(word[i]))\
    \ {\n                return word[closest].ToString();\n            }\n       \
    \ }\n        return \"\";", "        string vowels = \"aeiouAEIOU\";\n       \
    \ string result = \"\";\n        int minDist = int.MaxValue;\n        for (int\
    \ i = 0; i < word.Length; i++) {\n            if (vowels.Contains(word[i])) {\n\
    \                int j = word.Length - 1;\n                while (j > i && !vowels.Contains(word[j]))\
    \ {\n                    j--;\n                }\n                if (j > i) {\n\
    \                    int dist = j - i;\n                    if (dist < minDist)\
    \ {\n                        minDist = dist;\n                        result =\
    \ word[i].ToString();\n                    }\n                }\n            }\n\
    \        }\n        return result;", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        string vowels = \"aeiou\";\n        int\
    \ closest = -1;\n        for (int i = word.Length - 1; i >= 0; i--) {\n      \
    \      if (vowels.Contains(word[i])) {\n                closest = i;\n       \
    \         break;\n            }\n        }\n        if (closest == -1) {\n   \
    \         return \"\";\n        }\n        for (int i = closest - 1; i >= 0; i--)\
    \ {\n            if (!vowels.Contains(word[i])) {\n                return word[closest].ToString();\n\
    \            }\n        }\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        string vowels = \"aeiou\";\n\
    \        int lastVowel = -1;\n        int lastConsonant = -1;\n        for (int\
    \ i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                lastVowel = i;\n                if (lastConsonant != -1)\
    \ {\n                    return word[lastVowel].ToString();\n                }\n\
    \            } else {\n                lastConsonant = i;\n                if\
    \ (lastVowel != -1) {\n                    return word[lastVowel].ToString();\n\
    \                }\n            }\n        }\n        return \"\";", "       \
    \ // TODO: Implement your solution here\n        return \"\";", "        // TODO:\
    \ Implement your solution here\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // TODO: Implement this\
    \ method\n        return \"\";", "        // TODO: Implement your solution here\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // TODO: Implement your solution here\n        return \"\";", "        // TODO:\
    \ Implement your solution here\n        return \"\";", "        // TODO: Implement\
    \ this method\n        //throw new NotImplementedException();\n        string\
    \ vowels = \"aeiouAEIOU\";\n        string consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n        int index = word.Length - 1;\n        while (index > 0) {\n       \
    \     if (consonants.Contains(word[index])) {\n                if (vowels.Contains(word[index\
    \ - 1])) {\n                    return word[index - 1].ToString();\n         \
    \       }\n                index--;\n            }\n            else {\n     \
    \           index--;\n            }\n        }\n        return \"\";", "     \
    \   // TODO: Implement this method\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        string vowels = \"aeiou\";\n        int\
    \ closest = -1;\n        for (int i = word.Length - 1; i >= 0; i--) {\n      \
    \      if (vowels.Contains(word[i])) {\n                closest = i;\n       \
    \         break;\n            }\n        }\n        if (closest == -1) return\
    \ \"\";\n        for (int i = closest - 1; i >= 0; i--) {\n            if (!vowels.Contains(word[i]))\
    \ {\n                return word[closest].ToString();\n            }\n       \
    \ }\n        return \"\";", "        // TODO: Implement this method\n        return\
    \ \"\";", "        string vowels = \"aeiouAEIOU\";\n        string consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n        int lastVowel = -1;\n\
    \        int lastConsonant = -1;\n        for (int i = word.Length - 1; i >= 0;\
    \ i--) {\n            if (vowels.Contains(word[i])) {\n                lastVowel\
    \ = i;\n            } else if (consonants.Contains(word[i])) {\n             \
    \   lastConsonant = i;\n                break;\n            }\n        }\n   \
    \     if (lastVowel == -1 || lastConsonant == -1) {\n            return \"\";\n\
    \        }\n        return word[lastVowel].ToString();", "        // TODO: Implement\
    \ this function\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        // TODO: Implement your solution here\n\
    \        return \"\";", "        // TODO: Implement this method\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // TODO: Implement your solution here\n        return \"\";", "        // TODO:\
    \ Implement your code here\n        return \"\";", "        // TODO: Implement\
    \ your code here\n        return \"\";", "        // TODO: Implement your code\
    \ here\n        return \"\";", "        // TODO: Implement your solution here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // TODO: Implement your solution here\n        return \"\";", "        // Your\
    \ code here\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        // TODO: Implement your solution here\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        string vowels = \"aeiouAEIOU\";\n        string result\
    \ = \"\";\n        int min = word.Length;\n        for (int i = 0; i < word.Length;\
    \ i++) {\n            if (vowels.Contains(word[i])) {\n                if (i >\
    \ 0 && !vowels.Contains(word[i - 1])) {\n                    if (i < min) {\n\
    \                        min = i;\n                        result = word[i].ToString();\n\
    \                    }\n                }\n                if (i < word.Length\
    \ - 1 && !vowels.Contains(word[i + 1])) {\n                    if (word.Length\
    \ - i - 1 < min) {\n                        min = word.Length - i - 1;\n     \
    \                   result = word[i].ToString();\n                    }\n    \
    \            }\n            }\n        }\n        return result;", "        //\
    \ Your code goes here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        // TODO: Implement your solution here\n\
    \        return \"\";", "        string vowels = \"aeiou\";\n        int lastConsonant\
    \ = -1;\n        for (int i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (vowels.IndexOf(word[i]) == -1) {\n                lastConsonant = i;\n    \
    \            break;\n            }\n        }\n        if (lastConsonant == -1)\
    \ {\n            return \"\";\n        }\n        int closestVowel = -1;\n   \
    \     for (int i = lastConsonant - 1; i >= 0; i--) {\n            if (vowels.IndexOf(word[i])\
    \ != -1) {\n                closestVowel = i;\n                break;\n      \
    \      }\n        }\n        if (closestVowel == -1) {\n            return \"\"\
    ;\n        }\n        return word[closestVowel].ToString();", "        // TODO:\
    \ Implement your solution here\n        return \"\";", "        // Your code here\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        // TODO: Implement this method\n        return \"\";", "  \
    \      var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var result\
    \ = \"\";\n        var lastConsonant = -1;\n        for (var i = word.Length -\
    \ 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n           \
    \     if (lastConsonant != -1) {\n                    result = word[i].ToString();\n\
    \                    break;\n                }\n            } else if (consonants.Contains(word[i]))\
    \ {\n                lastConsonant = i;\n            }\n        }\n        return\
    \ result;", "        // TODO: Implement your solution here\n        return \"\"\
    ;", "        // TODO: Implement your solution here\n        return \"\";", " \
    \       // TODO: Implement your solution here\n        return \"\";", "      \
    \  // TODO: implement your solution here\n        return \"\";", "        string\
    \ vowels = \"aeiou\";\n        int index = word.Length - 1;\n        while (index\
    \ >= 0) {\n            if (vowels.Contains(word[index])) {\n                if\
    \ (index == word.Length - 1) {\n                    return \"\";\n           \
    \     }\n                if (vowels.Contains(word[index + 1])) {\n           \
    \         return \"\";\n                }\n                return word[index].ToString();\n\
    \            }\n            index--;\n        }\n        return \"\";", "    \
    \    string vowels = \"aeiou\";\n        for (int i = word.Length - 1; i >= 0;\
    \ i--) {\n            if (vowels.Contains(word[i])) {\n                if (i >\
    \ 0 && !vowels.Contains(word[i - 1])) {\n                    return word[i].ToString();\n\
    \                }\n                if (i < word.Length - 1 && !vowels.Contains(word[i\
    \ + 1])) {\n                    return word[i].ToString();\n                }\n\
    \            }\n        }\n        return \"\";", "        string vowels = \"\
    aeiouAEIOU\";\n        string closestVowel = \"\";\n        int closestVowelIndex\
    \ = -1;\n        int closestVowelDistance = -1;\n        for (int i = 0; i < word.Length;\
    \ i++) {\n            if (vowels.Contains(word[i])) {\n                int distance\
    \ = 0;\n                for (int j = i; j < word.Length; j++) {\n            \
    \        if (vowels.Contains(word[j])) {\n                        break;\n   \
    \                 }\n                    distance++;\n                }\n    \
    \            if (distance > 1) {\n                    if (closestVowelDistance\
    \ == -1 || distance < closestVowelDistance) {\n                        closestVowelDistance\
    \ = distance;\n                        closestVowelIndex = i;\n              \
    \      }\n                }\n            }\n        }\n        if (closestVowelIndex\
    \ != -1) {\n            closestVowel = word[closestVowelIndex].ToString();\n \
    \       }\n        return closestVowel;", "        // TODO: Implement this method\n\
    \        return \"\";", "        string vowels = \"aeiou\";\n        int closest\
    \ = -1;\n        for (int i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (vowels.Contains(word[i])) {\n                closest = i;\n               \
    \ break;\n            }\n        }\n        if (closest == -1) {\n           \
    \ return \"\";\n        }\n        for (int i = closest - 1; i >= 0; i--) {\n\
    \            if (!vowels.Contains(word[i])) {\n                return word[closest].ToString();\n\
    \            }\n        }\n        return \"\";", "        // TODO: Implement\
    \ your code here\n        return \"\";"]
stop_tokens:
- "\n    }\n"
