language: cs
name: HumanEval_11_string_xor
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length.\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this method\n
    \       //throw new NotImplementedException();\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++)\n        {\n            sb.Append(a[i]
    ^ b[i]);\n        }\n        return sb.ToString();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Your code here\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd80f1d074d4b268e25279351480bd5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd80f1d074d4b268e25279351480bd5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function.\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i] ? '0' : '1');\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n
    \               result.Append(\"0\");\n            } else {\n                result.Append(\"1\");\n
    \           }\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       string result = \"\";\n        for (int i = 0; i < a.Length; i++) {\n
    \           result += (a[i] == b[i]) ? \"0\" : \"1\";\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function.\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00010] in <c7c6bbbef54d4a2e8d24f45c1af17305>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00010] in <c7c6bbbef54d4a2e8d24f45c1af17305>:0
    \n"
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       string result = \"\";\n        for (int i = 0; i < a.Length; i++) {\n
    \           if (a[i] == b[i]) {\n                result += \"0\";\n            }
    else {\n                result += \"1\";\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new Exception(\"Strings must be of equal length\");\n        }\n
    \       var result = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            result.Append(a[i] ^ b[i]);\n        }\n        return result.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       var result = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            result.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    result.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Inputs must be of same length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] == b[i]) ? \"0\"
    : \"1\";\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i] ? '0' : '1');\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert the strings to bytes.\n
    \       byte[] aBytes = Encoding.ASCII.GetBytes(a);\n        byte[] bBytes = Encoding.ASCII.GetBytes(b);\n
    \       // XOR the bytes.\n        byte[] xorBytes = new byte[aBytes.Length];\n
    \       for (int i = 0; i < aBytes.Length; i++) {\n            xorBytes[i] = (byte)(aBytes[i]
    ^ bBytes[i]);\n        }\n        // Convert the bytes back to a string and return.\n
    \       return Encoding.ASCII.GetString(xorBytes);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91f6ab6278d64a31b905dff0b2d48a1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <91f6ab6278d64a31b905dff0b2d48a1c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function.\n
    \       // Hint: You can use Convert.ToInt32(string, int) to convert a string
    to an integer.\n        // Hint: You can use Convert.ToString(int, int) to convert
    an integer to a string.\n        // Hint: You can use Convert.ToString(int, int)
    to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You can use Convert.ToString(int,
    int) to convert an integer to a string.\n        // Hint: You\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcj8b94i4.cs(13,26): error CS0161: ''Problem.StringXor(string, string)'':
    not all code paths return a value

    '
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function.\n
    \       // Hint: You may want to use Convert.ToInt32(string, 2) to convert binary
    strings to integers.\n        // Hint: You may want to use Convert.ToString(int,
    2) to convert integers to binary strings.\n        int aInt = Convert.ToInt32(a,
    2);\n        int bInt = Convert.ToInt32(b, 2);\n        int result = aInt ^ bInt;\n
    \       string resultString = Convert.ToString(result, 2);\n        return resultString;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <02d1f16b51ec487cb625f3df8a45cd76>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <02d1f16b51ec487cb625f3df8a45cd76>:0
    \n"
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function.\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        var sb = new StringBuilder();\n        for (int i = 0; i <
    a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Your code goes here.\n        string
    result = \"\";\n        for (int i = 0; i < a.Length; i++) {\n            if (a[i]
    == b[i]) {\n                result += \"0\";\n            } else {\n                result
    += \"1\";\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function.\n
    \       // Hint: You can use Convert.ToInt32(a, 2) to convert a binary string
    a to an integer.\n        // Note that Convert.ToInt32(a, 2) returns an integer
    whose binary representation is a.\n        // Then you can use the ^ operator
    to perform XOR on integers.\n        // Note that ^ is the bitwise XOR operator
    in C#.\n        // You can use Convert.ToString(n, 2) to convert an integer n
    to a binary string.\n        // Note that Convert.ToString(n, 2) returns a binary
    string whose integer representation is n.\n        // You can use the % operator
    to perform modulo 2 on integers.\n        // Note that % is the remainder operator
    in C#.\n        // You can use the + operator to concatenate two strings.\n        //
    Note that + is the concatenation operator in C#.\n        // You can use the ==
    operator to check if two strings are equal.\n        // Note that == is the equality
    operator in C#.\n        // You can use the != operator to check if two strings
    are not equal.\n        // Note that != is the inequality operator in C#.\n        //
    You can use the ?: operator to perform ternary operations.\n        // Note that
    ?: is the ternary operator in C#.\n        // You can use the .Length property
    to get the length of a string.\n        // You can use the .Substring(i, j) method
    to get a substring of a string.\n        // Note that the indices of the characters
    in a string start from 0.\n        // You can use the .PadLeft(n, c) method to
    pad a string on the left with a character c to make it of length n.\n        //
    You can use the .PadRight(n, c) method to pad a string on the right with a character
    c to make it of length n.\n        // You can use the .ToCharArray() method to
    convert a string to a character array.\n        // You can use the .Reverse()
    method to reverse an array.\n        // You can use the .Join(c, a) method to
    join the elements of an array a into a string using a character c as a separator.\n
    \       //\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpon8dch5p.cs(13,26): error CS0161: ''Problem.StringXor(string, string)'':
    not all code paths return a value

    '
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"0\");\n            }
    else {\n                sb.Append(\"1\");\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n
    \               sb.Append(\"0\");\n            } else {\n                sb.Append(\"1\");\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert to byte arrays\n        byte[]
    aBytes = a.Select(c => (byte)(c - '0')).ToArray();\n        byte[] bBytes = b.Select(c
    => (byte)(c - '0')).ToArray();\n        // XOR\n        byte[] result = new byte[aBytes.Length];\n
    \       for (int i = 0; i < aBytes.Length; i++) {\n            result[i] = (byte)(aBytes[i]
    ^ bBytes[i]);\n        }\n        // Convert back to string\n        return new
    string(result.Select(b1 => (char)(b1 + '0')).ToArray());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new Exception(\"Strings are not of equal length.\");\n        }\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"0\");\n            }
    else {\n                sb.Append(\"1\");\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"String lengths must be equal\");\n        }\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert the strings to bytes.\n
    \       byte[] aBytes = Encoding.UTF8.GetBytes(a);\n        byte[] bBytes = Encoding.UTF8.GetBytes(b);\n
    \       // Perform XOR on each byte.\n        byte[] result = new byte[aBytes.Length];\n
    \       for (int i = 0; i < aBytes.Length; i++) {\n            result[i] = (byte)(aBytes[i]
    ^ bBytes[i]);\n        }\n        // Convert the result to a string and return
    it.\n        return Encoding.UTF8.GetString(result);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <684e87c4afd64c87bbfdbbbef0168181>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <684e87c4afd64c87bbfdbbbef0168181>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? \"0\" : \"1\");\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"0\");\n            }
    else {\n                sb.Append(\"1\");\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n
    \               sb.Append(\"0\");\n            } else {\n                sb.Append(\"1\");\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new Exception(\"Strings must be of equal length\");\n        }\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"0\");\n            }
    else {\n                sb.Append(\"1\");\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new ArgumentException(\"Strings must be of equal length\");\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < a.Length; i++) {\n            sb.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this method\n
    \       //throw new NotImplementedException();\n        string result = \"\";\n
    \       for (int i = 0; i < a.Length; i++)\n        {\n            if (a[i] ==
    b[i])\n            {\n                result += \"0\";\n            }\n            else\n
    \           {\n                result += \"1\";\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new ArgumentException(\"Inputs must be of equal length\");\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < a.Length; i++) {\n            sb.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function.\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       var sb = new StringBuilder();\n        for (int i = 0; i < a.Length; i++)
    {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert the strings to bytes\n
    \       byte[] aBytes = Encoding.ASCII.GetBytes(a);\n        byte[] bBytes = Encoding.ASCII.GetBytes(b);\n
    \       // Perform XOR on each byte\n        byte[] result = new byte[aBytes.Length];\n
    \       for (int i = 0; i < aBytes.Length; i++) {\n            result[i] = (byte)(aBytes[i]
    ^ bBytes[i]);\n        }\n        // Return the result as a string\n        return
    Encoding.ASCII.GetString(result);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f287b34741d4eb88ecc48987d762fe3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f287b34741d4eb88ecc48987d762fe3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n
    \               sb.Append(\"0\");\n            } else {\n                sb.Append(\"1\");\n
    \           }\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert the strings to byte
    arrays.\n        byte[] aBytes = Encoding.ASCII.GetBytes(a);\n        byte[] bBytes
    = Encoding.ASCII.GetBytes(b);\n        // XOR the byte arrays.\n        byte[]
    result = new byte[aBytes.Length];\n        for (int i = 0; i < aBytes.Length;
    i++) {\n            result[i] = (byte)(aBytes[i] ^ bBytes[i]);\n        }\n        //
    Return the result as a string.\n        return Encoding.ASCII.GetString(result);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73efc9bf445a4dd0a8542d26f1f9e78d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73efc9bf445a4dd0a8542d26f1f9e78d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function.\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert to byte arrays\n        byte[]
    aBytes = a.Select(c => (byte)(c - '0')).ToArray();\n        byte[] bBytes = b.Select(c
    => (byte)(c - '0')).ToArray();\n        // XOR\n        byte[] result = new byte[aBytes.Length];\n
    \       for (int i = 0; i < aBytes.Length; i++) {\n            result[i] = (byte)(aBytes[i]
    ^ bBytes[i]);\n        }\n        // Convert back to string\n        return new
    string(result.Select(b1 => (char)(b1 + '0')).ToArray());\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n
    \               result.Append(\"0\");\n            } else {\n                result.Append(\"1\");\n
    \           }\n        }\n        return result.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert the strings to bytes\n
    \       byte[] aBytes = Encoding.UTF8.GetBytes(a);\n        byte[] bBytes = Encoding.UTF8.GetBytes(b);\n
    \       // XOR the bytes\n        byte[] result = new byte[aBytes.Length];\n        for
    (int i = 0; i < aBytes.Length; i++) {\n            result[i] = (byte)(aBytes[i]
    ^ bBytes[i]);\n        }\n        // Convert the bytes back to string and return\n
    \       return Encoding.UTF8.GetString(result);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f52896b5a5624e6a91c3f116bcb87cb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f52896b5a5624e6a91c3f116bcb87cb9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length)\n            throw
    new ArgumentException(\"Strings must be of equal length\");\n        StringBuilder
    sb = new StringBuilder();\n        for (int i = 0; i < a.Length; i++) {\n            if
    (a[i] == b[i])\n                sb.Append(\"0\");\n            else\n                sb.Append(\"1\");\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new Exception(\"String lengths must be equal\");\n        }\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return sb.ToString();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert the strings to bytes.\n
    \       byte[] aBytes = Encoding.ASCII.GetBytes(a);\n        byte[] bBytes = Encoding.ASCII.GetBytes(b);\n
    \       // XOR the bytes.\n        byte[] result = new byte[aBytes.Length];\n
    \       for (int i = 0; i < aBytes.Length; i++) {\n            result[i] = (byte)(aBytes[i]
    ^ bBytes[i]);\n        }\n        // Return the result as a string.\n        return
    Encoding.ASCII.GetString(result);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <431fbae477cc4056a421e51756633d54>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <431fbae477cc4056a421e51756633d54>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert input strings to bytes.\n
    \       byte[] aBytes = Encoding.UTF8.GetBytes(a);\n        byte[] bBytes = Encoding.UTF8.GetBytes(b);\n
    \       // Perform XOR operation on each byte.\n        byte[] result = new byte[aBytes.Length];\n
    \       for (int i = 0; i < aBytes.Length; i++) {\n            result[i] = (byte)(aBytes[i]
    ^ bBytes[i]);\n        }\n        // Return result as a string.\n        return
    Encoding.UTF8.GetString(result);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2df764b64b0447f28c7b7d439fe138e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2df764b64b0447f28c7b7d439fe138e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function.\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i] ? '0' : '1');\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00010] in <884b05fee2d9409eb566f54016cdc5a3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00010] in <884b05fee2d9409eb566f54016cdc5a3>:0
    \n"
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be equal length\");\n        }\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert the strings to bytes\n
    \       byte[] aBytes = Encoding.ASCII.GetBytes(a);\n        byte[] bBytes = Encoding.ASCII.GetBytes(b);\n
    \       // XOR the bytes\n        byte[] xorBytes = new byte[aBytes.Length];\n
    \       for (int i = 0; i < aBytes.Length; i++) {\n            xorBytes[i] = (byte)(aBytes[i]
    ^ bBytes[i]);\n        }\n        // Convert the bytes back to a string and return\n
    \       return Encoding.ASCII.GetString(xorBytes);\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79f62c6a027c4fb2ade275cdb1451cd9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <79f62c6a027c4fb2ade275cdb1451cd9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i] ? '0' : '1');\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement me\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0acc4311af8147828aaa06fde20fa40b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0acc4311af8147828aaa06fde20fa40b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] == b[i]) ? \"0\"
    : \"1\";\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement\n        return
    \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97aacd3a5547479a9ef880e7516659e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <97aacd3a5547479a9ef880e7516659e1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            result += (a[i] == b[i]) ? \"0\"
    : \"1\";\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"0\");\n            }
    else {\n                sb.Append(\"1\");\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        StringBuilder sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        int len = Math.Max(a.Length, b.Length);\n
    \       a = a.PadLeft(len, '0');\n        b = b.PadLeft(len, '0');\n        var
    sb = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n            sb.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            sb.Append((a[i] == b[i]) ? \"0\" : \"1\");\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        var result = new StringBuilder();\n        for (int i = 0;
    i < a.Length; i++) {\n            result.Append((a[i] == b[i]) ? '0' : '1');\n
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        var sb = new StringBuilder();\n        for (int i = 0; i <
    a.Length; i++) {\n            sb.Append((a[i] == b[i]) ? '0' : '1');\n        }\n
    \       return sb.ToString();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // Convert the strings to byte
    arrays.\n        byte[] aBytes = System.Text.Encoding.ASCII.GetBytes(a);\n        byte[]
    bBytes = System.Text.Encoding.ASCII.GetBytes(b);\n        // XOR the byte arrays.\n
    \       byte[] result = new byte[aBytes.Length];\n        for (int i = 0; i <
    aBytes.Length; i++) {\n            result[i] = (byte)(aBytes[i] ^ bBytes[i]);\n
    \       }\n        // Convert the result to a string and return.\n        return
    System.Text.Encoding.ASCII.GetString(result);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16192513719e4430a0d5c9150dfddb57>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16192513719e4430a0d5c9150dfddb57>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792932
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var result = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            result.Append((a[i]
    == b[i]) ? '0' : '1');\n        }\n        return result.ToString();\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length.\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new Exception(\"Strings must be of equal length\");\n        }\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"0\");\n            }
    else {\n                sb.Append(\"1\");\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length.\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        var sb = new StringBuilder();\n
    \       for (int i = 0; i < a.Length; i++) {\n            sb.Append(a[i] == b[i]
    ? '0' : '1');\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function.\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e927357c8bbf4a4883e582e84fe17812>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        string result = \"\";\n        for
    (int i = 0; i < a.Length; i++) {\n            if (a[i] == b[i]) {\n                result
    += \"0\";\n            } else {\n                result += \"1\";\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        Debug.Assert(a.Length == b.Length);\n
    \       StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < a.Length;
    i++) {\n            if (a[i] == b[i]) {\n                sb.Append(\"0\");\n            }
    else {\n                sb.Append(\"1\");\n            }\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792931
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        if (a.Length != b.Length) {\n
    \           throw new ArgumentException(\"Strings must be of equal length\");\n
    \       }\n        StringBuilder sb = new StringBuilder();\n        for (int i
    = 0; i < a.Length; i++) {\n            sb.Append(a[i] ^ b[i]);\n        }\n        return
    sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       return \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"),
    (\"101010\")).Equals((\"010010\")));\n    Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n
    \   Debug.Assert(StringXor((\"0101\"), (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <786be1c4243e46338970b60952555168>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792930
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n
    \   // Perform binary XOR on these inputs and return result also as a string.\n
    \   // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static
    string StringXor(string a, string b) {\n        // TODO: Implement this function\n
    \       int length = Math.Max(a.Length, b.Length);\n        string result = \"\";\n
    \       for (int i = 0; i < length; i++) {\n            if (a[i] == b[i]) {\n
    \               result += \"0\";\n            } else {\n                result
    += \"1\";\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(StringXor((\"111000\"), (\"101010\")).Equals((\"010010\")));\n
    \   Debug.Assert(StringXor((\"1\"), (\"1\")).Equals((\"0\")));\n    Debug.Assert(StringXor((\"0101\"),
    (\"0000\")).Equals((\"0101\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792932
