language: cs
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        float strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            float\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else {\n                    strength -= 1;\n                }\n          \
    \  }\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68e2fa9e8dbe44b0a2f82b5f149c18a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68e2fa9e8dbe44b0a2f82b5f149c18a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max = 0;\n        string max_ext = \"\";\n      \
    \  foreach (string ext in extensions) {\n            int cap = 0;\n          \
    \  int sm = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            if (cap - sm > max) {\n\
    \                max = cap - sm;\n                max_ext = ext;\n           \
    \ }\n        }\n        return class_name + \".\" + max_ext;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a90f6ea3e4574e41aeff357c1d844155>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a90f6ea3e4574e41aeff357c1d844155>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            double\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else {\n                    strength -= 1;\n                }\n          \
    \  }\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (Char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5380c468308841998ffea250efb03892>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5380c468308841998ffea250efb03892>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            double\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else {\n                    strength -= 1;\n                }\n          \
    \  }\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        double max = 0;\n        string max_ext = \"\";\n   \
    \     foreach (string ext in extensions) {\n            int cap = 0;\n       \
    \     int sm = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            double strength = cap\
    \ - sm;\n            if (strength > max) {\n                max = strength;\n\
    \                max_ext = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + max_ext;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e5b62aa68a4483db2d2683e868368e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e5b62aa68a4483db2d2683e868368e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max = -1;\n        string strongest = \"\";\n   \
    \     foreach (string ext in extensions) {\n            int cap = 0;\n       \
    \     int sm = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            if (cap - sm > max) {\n\
    \                max = cap - sm;\n                strongest = ext;\n         \
    \   }\n        }\n        return class_name + \".\" + strongest;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52c66e23fd534752851b7e7deb2ed233>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52c66e23fd534752851b7e7deb2ed233>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = -1;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7cfaa85dc5a4c388e38f39770ae9f0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7cfaa85dc5a4c388e38f39770ae9f0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string ext in extensions) {\n            int cap = 0;\n    \
    \        int sm = 0;\n            foreach (char c in ext) {\n                if\
    \ (char.IsUpper(c)) {\n                    cap++;\n                } else {\n\
    \                    sm++;\n                }\n            }\n            double\
    \ new_strength = (double)cap - (double)sm;\n            if (new_strength > strength)\
    \ {\n                strength = new_strength;\n                strongest = ext;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e74c713402da435c86e381a4562a4464>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e74c713402da435c86e381a4562a4464>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            double\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else {\n                    strength -= 1;\n                }\n          \
    \  }\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        float strength = 0;\n\
    \        foreach (string extension in extensions) {\n            float current_strength\
    \ = 0;\n            for (int i = 0; i < extension.Length; i++) {\n           \
    \     if (Char.IsUpper(extension[i])) {\n                    current_strength++;\n\
    \                } else {\n                    current_strength--;\n         \
    \       }\n            }\n            if (current_strength > strength) {\n   \
    \             strength = current_strength;\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <360e85fe7b2f4611890b2ec1ae07c658>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <360e85fe7b2f4611890b2ec1ae07c658>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = -1;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7cfaa85dc5a4c388e38f39770ae9f0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7cfaa85dc5a4c388e38f39770ae9f0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string ext in extensions) {\n            double curr = 0;\n\
    \            foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n\
    \                    curr++;\n                } else {\n                    curr--;\n\
    \                }\n            }\n            if (curr > strength) {\n      \
    \          strength = curr;\n                strongest = ext;\n            }\n\
    \        }\n        return class_name + \".\" + strongest;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef23a51c2d114cf494abec24f558d3a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef23a51c2d114cf494abec24f558d3a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        float strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            float\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else {\n                    strength -= 1;\n                }\n          \
    \  }\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68e2fa9e8dbe44b0a2f82b5f149c18a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68e2fa9e8dbe44b0a2f82b5f149c18a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            double\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else {\n                    strength -= 1;\n                }\n          \
    \  }\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string ext in extensions) {\n            double ext_strength\
    \ = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    ext_strength += 1;\n                } else {\n      \
    \              ext_strength -= 1;\n                }\n            }\n        \
    \    if (ext_strength > strength) {\n                strength = ext_strength;\n\
    \                strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            double\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else if (char.IsLower(c)) {\n                    strength -= 1;\n        \
    \        }\n            }\n            if (strength > strongest_strength) {\n\
    \                strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e607c9af5c4403397af84864409dac8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e607c9af5c4403397af84864409dac8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        float strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            float\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else {\n                    strength -= 1;\n                }\n          \
    \  }\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68e2fa9e8dbe44b0a2f82b5f149c18a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68e2fa9e8dbe44b0a2f82b5f149c18a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max = 0;\n        string result = \"\";\n       \
    \ foreach (string ext in extensions) {\n            int cap = 0;\n           \
    \ int sm = 0;\n            foreach (char c in ext) {\n                if (c >=\
    \ 'A' && c <= 'Z') {\n                    cap++;\n                } else if (c\
    \ >= 'a' && c <= 'z') {\n                    sm++;\n                }\n      \
    \      }\n            if (cap - sm > max) {\n                max = cap - sm;\n\
    \                result = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eaf3aa6a4dd2435aadb96a66ff860e4c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eaf3aa6a4dd2435aadb96a66ff860e4c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        var strongest = extensions.Select(ext => new { ext, strength\
    \ = ext.Count(c => char.IsUpper(c)) - ext.Count(c => char.IsLower(c)) })\n   \
    \         .OrderByDescending(x => x.strength).ThenBy(x => x.ext).First();\n  \
    \      return class_name + \".\" + strongest.ext;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a88c2e7a3259406d9c146c20d630e690>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a88c2e7a3259406d9c146c20d630e690>:0 \n"
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int cap = 0;\n        int sm = 0;\n        string strongest\
    \ = \"\";\n        foreach (string ext in extensions) {\n            foreach (char\
    \ c in ext) {\n                if (char.IsUpper(c)) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            if (cap - sm > cap - sm) {\n                strongest\
    \ = ext;\n            }\n        }\n        return class_name + \".\" + strongest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0df9fa22b094ce4a79a5efc3e8963cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0df9fa22b094ce4a79a5efc3e8963cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        float strength = 0;\n\
    \        foreach (string ext in extensions) {\n            int cap = 0;\n    \
    \        int sm = 0;\n            foreach (char c in ext) {\n                if\
    \ (char.IsUpper(c)) {\n                    cap++;\n                } else {\n\
    \                    sm++;\n                }\n            }\n            float\
    \ str = (float)cap / (float)sm;\n            if (str > strength) {\n         \
    \       strength = str;\n                strongest = ext;\n            }\n   \
    \     }\n        return class_name + \".\" + strongest;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <156440225d794e728c75679f9019e68c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <156440225d794e728c75679f9019e68c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = -1;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7cfaa85dc5a4c388e38f39770ae9f0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7cfaa85dc5a4c388e38f39770ae9f0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (Char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = -1;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7cfaa85dc5a4c388e38f39770ae9f0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7cfaa85dc5a4c388e38f39770ae9f0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string ext in extensions) {\n            double strength\
    \ = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    strength += 1;\n                } else {\n          \
    \          strength -= 1;\n                }\n            }\n            if (strength\
    \ > strongest_strength) {\n                strongest = ext;\n                strongest_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7262fd639ee4edc9900b79ea42bc567>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7262fd639ee4edc9900b79ea42bc567>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n        // (\"\
    my_class.AA\")\n        // >>> StrongestExtension((\"Slices\"), (new List<string>(new\
    \ string[]{(string)\"SErviNGSliCes\", (string)\"Cheese\", (string)\"StuFfed\"\
    })))\n        // (\"Slices.SErviNGSliCes\")\n        // >>> StrongestExtension((\"\
    Slices\"), (new List<string>(new string[]{(string)\"SErviNGSliCes\", (string)\"\
    Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\"})))\n        // (\"Slices.SErviNGSliCes\"\
    )\n        // >>> StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"\
    SErviNGSliCes\", (string)\"Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\"\
    , (string)\"SErviNGSliCes\"})))\n        // (\"Slices.SErviNGSliCes\")\n     \
    \   // >>> StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"\
    SErviNGSliCes\", (string)\"Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\"\
    , (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\"})))\n        // (\"Slices.SErviNGSliCes\"\
    )\n        // >>> StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"\
    SErviNGSliCes\", (string)\"Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\"\
    , (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\"\
    })))\n        // (\"Slices.SErviNGSliCes\")\n       \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzegbzmpg.cs(25,26): error CS0161: ''Problem.StrongestExtension(string,
    List<string>)'': not all code paths return a value

    '
  timestamp: 1659799231
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0002e] in <1d4ce996e5b04718a8dffc7b6f492e69>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0002e] in <1d4ce996e5b04718a8dffc7b6f492e69>:0\
    \ \n"
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max = 0;\n        string max_ext = \"\";\n      \
    \  foreach (string ext in extensions) {\n            int cap = 0;\n          \
    \  int sm = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            if (cap - sm > max) {\n\
    \                max = cap - sm;\n                max_ext = ext;\n           \
    \ }\n        }\n        return class_name + \".\" + max_ext;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a90f6ea3e4574e41aeff357c1d844155>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a90f6ea3e4574e41aeff357c1d844155>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max = 0;\n        string max_ext = \"\";\n      \
    \  foreach (string ext in extensions) {\n            int cap = 0;\n          \
    \  int sm = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            if (cap - sm > max) {\n\
    \                max = cap - sm;\n                max_ext = ext;\n           \
    \ }\n        }\n        return class_name + \".\" + max_ext;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a90f6ea3e4574e41aeff357c1d844155>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a90f6ea3e4574e41aeff357c1d844155>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        return \"\";\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d60f5ab53e3242e38f5c3d87a8021261>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d60f5ab53e3242e38f5c3d87a8021261>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        float strongest_strength\
    \ = -1;\n        foreach (string extension in extensions) {\n            float\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else {\n                    strength -= 1;\n                }\n          \
    \  }\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ad2604e52a3437abc7008f965b8bc2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ad2604e52a3437abc7008f965b8bc2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string ext in extensions) {\n            double extStrength\
    \ = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    extStrength++;\n                } else if (char.IsLower(c))\
    \ {\n                    extStrength--;\n                }\n            }\n  \
    \          if (extStrength > strength) {\n                strength = extStrength;\n\
    \                strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0cee513caf1d46de8b2565a05fe60297>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0cee513caf1d46de8b2565a05fe60297>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        float strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            float\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else {\n                    strength -= 1;\n                }\n          \
    \  }\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68e2fa9e8dbe44b0a2f82b5f149c18a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68e2fa9e8dbe44b0a2f82b5f149c18a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        double strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            double\
    \ current_strength = 0;\n            foreach (char c in extension) {\n       \
    \         if (char.IsUpper(c)) {\n                    current_strength += 1;\n\
    \                } else {\n                    current_strength -= 1;\n      \
    \          }\n            }\n            if (current_strength > strength) {\n\
    \                strength = current_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f36753bd8ad440d3bc1e777f12aae1b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f36753bd8ad440d3bc1e777f12aae1b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        for (int i = 0; i < extensions.Count; i++) {\n            double current_strength\
    \ = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n       \
    \         if (Char.IsUpper(extensions[i][j])) {\n                    current_strength++;\n\
    \                } else {\n                    current_strength--;\n         \
    \       }\n            }\n            if (current_strength > strength) {\n   \
    \             strength = current_strength;\n                strongest = extensions[i];\n\
    \            }\n        }\n        return class_name + \".\" + strongest;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d8c6eea4e15433facc8169d7a7dc7e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d8c6eea4e15433facc8169d7a7dc7e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string ext in extensions) {\n            double ext_strength\
    \ = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    ext_strength += 1;\n                } else {\n      \
    \              ext_strength -= 1;\n                }\n            }\n        \
    \    if (ext_strength > strength) {\n                strength = ext_strength;\n\
    \                strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n        // (\"\
    my_class.AA\")\n        // >>> StrongestExtension((\"Slices\"), (new List<string>(new\
    \ string[]{(string)\"SErviNGSliCes\", (string)\"Cheese\", (string)\"StuFfed\"\
    })))\n        // (\"Slices.SErviNGSliCes\")\n        // >>> StrongestExtension((\"\
    Slices\"), (new List<string>(new string[]{(string)\"SErviNGSliCes\", (string)\"\
    Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\"})))\n        // (\"Slices.SErviNGSliCes\"\
    )\n        // >>> StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"\
    SErviNGSliCes\", (string)\"Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\"\
    , (string)\"SErviNGSliCes\"})))\n        // (\"Slices.SErviNGSliCes\")\n     \
    \   // >>> StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"\
    SErviNGSliCes\", (string)\"Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\"\
    , (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\"})))\n        // (\"Slices.SErviNGSliCes\"\
    )\n        // >>> StrongestExtension((\"Slices\"), (new List<string>(new string[]{(string)\"\
    SErviNGSliCes\", (string)\"Cheese\", (string)\"StuFfed\", (string)\"SErviNGSliCes\"\
    , (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\", (string)\"SErviNGSliCes\"\
    })))\n        // (\"Slices.SErviNGSliCes\")\n       \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzegbzmpg.cs(25,26): error CS0161: ''Problem.StrongestExtension(string,
    List<string>)'': not all code paths return a value

    '
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (Char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c64bef32eaf4151b98afaab8e9fc83d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max = 0;\n        string strongest = \"\";\n    \
    \    foreach (string extension in extensions) {\n            int cap = 0;\n  \
    \          int sm = 0;\n            foreach (char c in extension) {\n        \
    \        if (char.IsUpper(c)) {\n                    cap++;\n                }\
    \ else {\n                    sm++;\n                }\n            }\n      \
    \      int strength = cap - sm;\n            if (strength > max) {\n         \
    \       max = strength;\n                strongest = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <937cef07052b484f8c7cdaad49b566b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <937cef07052b484f8c7cdaad49b566b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        var strongest_extension = extensions.First();\n     \
    \   var strongest_strength = 0;\n        foreach (var extension in extensions)\
    \ {\n            var strength = extension.Count(c => char.IsUpper(c)) - extension.Count(c\
    \ => char.IsLower(c));\n            if (strength > strongest_strength) {\n   \
    \             strongest_strength = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87028e45234e4856b26d900dbb05b89a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87028e45234e4856b26d900dbb05b89a>:0 \n"
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string ext in extensions) {\n            int cap = 0;\n    \
    \        int sm = 0;\n            foreach (char c in ext) {\n                if\
    \ (char.IsUpper(c)) {\n                    cap++;\n                } else {\n\
    \                    sm++;\n                }\n            }\n            double\
    \ s = cap - sm;\n            if (s > strength) {\n                strength = s;\n\
    \                strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2dd0e2c6aef44e40b400fa9bb727a6f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2dd0e2c6aef44e40b400fa9bb727a6f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        var strongest_extension = extensions.Select(ext => new\
    \ {\n            ext,\n            strength = ext.Count(c => char.IsUpper(c))\
    \ - ext.Count(c => char.IsLower(c))\n        }).OrderByDescending(x => x.strength).ThenBy(x\
    \ => x.ext).First();\n        return class_name + \".\" + strongest_extension.ext;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3dba2b060a8a483a8a3ee651eb775efb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3dba2b060a8a483a8a3ee651eb775efb>:0 \n"
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max = 0;\n        string strongest = \"\";\n    \
    \    foreach (string ext in extensions) {\n            int cap = 0;\n        \
    \    int sm = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    cap++;\n                } else {\n                  \
    \  sm++;\n                }\n            }\n            int strength = cap - sm;\n\
    \            if (strength > max) {\n                max = strength;\n        \
    \        strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea42adabb46c4bc48896092c2fabcce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea42adabb46c4bc48896092c2fabcce5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string ext in extensions) {\n            double cap = 0;\n \
    \           double sm = 0;\n            foreach (char c in ext) {\n          \
    \      if (char.IsUpper(c)) {\n                    cap++;\n                } else\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ double new_strength = cap - sm;\n            if (new_strength > strength) {\n\
    \                strength = new_strength;\n                strongest = ext;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd4c639578f54d38b019aa34474d4f23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd4c639578f54d38b019aa34474d4f23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string ext in extensions) {\n            double ext_strength\
    \ = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    ext_strength += 1;\n                } else {\n      \
    \              ext_strength -= 1;\n                }\n            }\n        \
    \    if (ext_strength > strength) {\n                strength = ext_strength;\n\
    \                strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b8e302f42334bcea3ba4dfcd542963e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max = 0;\n        string result = \"\";\n       \
    \ for (int i = 0; i < extensions.Count; i++) {\n            int cap = 0;\n   \
    \         int sm = 0;\n            for (int j = 0; j < extensions[i].Length; j++)\
    \ {\n                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            if (cap - sm > max) {\n       \
    \         max = cap - sm;\n                result = extensions[i];\n         \
    \   }\n        }\n        return class_name + \".\" + result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8daa8326125b48d3b0c8a4f41ad33f6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8daa8326125b48d3b0c8a4f41ad33f6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string extension in extensions) {\n            double current_strength\
    \ = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))\
    \ {\n                    current_strength += 1;\n                } else {\n  \
    \                  current_strength -= 1;\n                }\n            }\n\
    \            if (current_strength > strength) {\n                strength = current_strength;\n\
    \                strongest = extension;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d686f07f8df44dc8887265b7d44dbaba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d686f07f8df44dc8887265b7d44dbaba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string ext in extensions) {\n            double curr_strength\
    \ = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    curr_strength += 1;\n                } else {\n     \
    \               curr_strength -= 1;\n                }\n            }\n      \
    \      if (curr_strength > strength) {\n                strength = curr_strength;\n\
    \                strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <113ae85885344c8ab05495a2ffb52bc8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <113ae85885344c8ab05495a2ffb52bc8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string ext in extensions) {\n            double cap = 0;\n \
    \           double sm = 0;\n            foreach (char c in ext) {\n          \
    \      if (char.IsUpper(c)) {\n                    cap++;\n                } else\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ double s = cap - sm;\n            if (s > strength) {\n                strength\
    \ = s;\n                strongest = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <406be989b0f84308bbaee1e5c90c83d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <406be989b0f84308bbaee1e5c90c83d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        float strongest_strength\
    \ = -1;\n        foreach (string extension in extensions) {\n            float\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (Char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else {\n                    strength -= 1;\n                }\n          \
    \  }\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36a3de544735447aae6a1f93f83a16b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36a3de544735447aae6a1f93f83a16b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string extension in extensions) {\n            double extension_strength\
    \ = 0;\n            foreach (char c in extension) {\n                if (char.IsUpper(c))\
    \ {\n                    extension_strength += 1;\n                } else {\n\
    \                    extension_strength -= 1;\n                }\n           \
    \ }\n            if (extension_strength > strength) {\n                strength\
    \ = extension_strength;\n                strongest = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <883c831e76b34abdb64cefb4407d09d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <883c831e76b34abdb64cefb4407d09d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max_strength = 0;\n        string strongest_extension\
    \ = \"\";\n        foreach (string extension in extensions) {\n            int\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ {\n                    strength--;\n                }\n            }\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = extension;\n            }\n        }\n\
    \        return class_name + \".\" + strongest_extension;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234083617f2748d2a78c663d9e777a31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        double max = 0;\n        string max_ext = \"\";\n   \
    \     foreach (string ext in extensions) {\n            double strength = 0;\n\
    \            foreach (char c in ext) {\n                if (char.IsUpper(c)) {\n\
    \                    strength += 1;\n                } else {\n              \
    \      strength -= 1;\n                }\n            }\n            if (strength\
    \ > max) {\n                max = strength;\n                max_ext = ext;\n\
    \            }\n        }\n        return class_name + \".\" + max_ext;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf4eabb058284dfe90b71c7a73508d89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf4eabb058284dfe90b71c7a73508d89>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            double\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else {\n                    strength -= 1;\n                }\n          \
    \  }\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = -1;\n\
    \        foreach (string ext in extensions) {\n            double curr_strength\
    \ = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    curr_strength++;\n                } else {\n        \
    \            curr_strength--;\n                }\n            }\n            if\
    \ (curr_strength > strength) {\n                strength = curr_strength;\n  \
    \              strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3037a57c2d0f4152892ccd4ff8b64a82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3037a57c2d0f4152892ccd4ff8b64a82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string ext in extensions) {\n            double ext_strength\
    \ = 0;\n            foreach (char c in ext) {\n                if (Char.IsUpper(c))\
    \ {\n                    ext_strength += 1;\n                } else {\n      \
    \              ext_strength -= 1;\n                }\n            }\n        \
    \    if (ext_strength > strength) {\n                strength = ext_strength;\n\
    \                strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b43ad9b140c345e592e3d472df06a57d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b43ad9b140c345e592e3d472df06a57d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        float strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            float\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength++;\n                } else\
    \ if (char.IsLower(c)) {\n                    strength--;\n                }\n\
    \            }\n            if (strength > strongest_strength) {\n           \
    \     strongest_strength = strength;\n                strongest_extension = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8be9fb96d1d042718c73ed61b8ec60cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8be9fb96d1d042718c73ed61b8ec60cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max = -1;\n        string strongest = \"\";\n   \
    \     foreach (string ext in extensions) {\n            int cap = 0;\n       \
    \     int sm = 0;\n            foreach (char c in ext) {\n                if (c\
    \ >= 'A' && c <= 'Z') {\n                    cap++;\n                } else if\
    \ (c >= 'a' && c <= 'z') {\n                    sm++;\n                }\n   \
    \         }\n            if (cap - sm > max) {\n                max = cap - sm;\n\
    \                strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0002e] in <1d4ce996e5b04718a8dffc7b6f492e69>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0002e] in <1d4ce996e5b04718a8dffc7b6f492e69>:0\
    \ \n"
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            double\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else {\n                    strength -= 1;\n                }\n          \
    \  }\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int strongest_extension_index = 0;\n        double strongest_extension_strength\
    \ = 0;\n        for (int i = 0; i < extensions.Count; i++) {\n            double\
    \ strength = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n\
    \                if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n \
    \                   strength += 1;\n                } else if (extensions[i][j]\
    \ >= 'a' && extensions[i][j] <= 'z') {\n                    strength -= 1;\n \
    \               }\n            }\n            if (strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strength;\n              \
    \  strongest_extension_index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[strongest_extension_index];\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new\
    \ List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"\
    }))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f0a45bb74d14def8e7c4b96d29cdb8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f0a45bb74d14def8e7c4b96d29cdb8f>:0 \n"
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        float strength = 0;\n\
    \        foreach (string ext in extensions) {\n            float ext_strength\
    \ = 0;\n            foreach (char c in ext) {\n                if (char.IsUpper(c))\
    \ {\n                    ext_strength++;\n                } else {\n         \
    \           ext_strength--;\n                }\n            }\n            if\
    \ (ext_strength > strength) {\n                strength = ext_strength;\n    \
    \            strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6700b3f9133a43b6a4b01706cf87429c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6700b3f9133a43b6a4b01706cf87429c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        float strength = 0;\n\
    \        foreach (string extension in extensions) {\n            int cap = 0;\n\
    \            int sm = 0;\n            foreach (char c in extension) {\n      \
    \          if (char.IsUpper(c)) {\n                    cap++;\n              \
    \  } else {\n                    sm++;\n                }\n            }\n   \
    \         float new_strength = cap - sm;\n            if (new_strength > strength)\
    \ {\n                strength = new_strength;\n                strongest = extension;\n\
    \            }\n        }\n        return class_name + \".\" + strongest;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f611c7b4c8149d08560816bcffebb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f611c7b4c8149d08560816bcffebb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        int max = 0;\n        int index = 0;\n        for (int\
    \ i = 0; i < extensions.Count; i++) {\n            int cap = 0;\n            int\
    \ sm = 0;\n            for (int j = 0; j < extensions[i].Length; j++) {\n    \
    \            if (char.IsUpper(extensions[i][j])) {\n                    cap++;\n\
    \                } else {\n                    sm++;\n                }\n    \
    \        }\n            if (cap - sm > max) {\n                max = cap - sm;\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions[index];\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new\
    \ string[]{(string)\"tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"\
    Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new\
    \ List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\"\
    , (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afb88406580a427781c32bd9bbef7c5e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afb88406580a427781c32bd9bbef7c5e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799234
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n        // (\"\
    my_class.AA\")\n        // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\", (string)\"DD\"})))\n\
    \        // (\"my_class.AA\")\n        // >>> StrongestExtension((\"my_class\"\
    ), (new List<string>(new string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"\
    , (string)\"DD\", (string)\"EE\"})))\n        // (\"my_class.AA\")\n        //\
    \ >>> StrongestExtension((\"my_class\"), (new List<string>(new string[]{(string)\"\
    AA\", (string)\"Be\", (string)\"CC\", (string)\"DD\", (string)\"EE\", (string)\"\
    FF\"})))\n        // (\"my_class.AA\")\n        // >>> StrongestExtension((\"\
    my_class\"), (new List<string>(new string[]{(string)\"AA\", (string)\"Be\", (string)\"\
    CC\", (string)\"DD\", (string)\"EE\", (string)\"FF\", (string)\"GG\"})))\n   \
    \     // (\"my_class.AA\")\n        // >>> StrongestExtension((\"my_class\"),\
    \ (new List<string>(new string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"\
    , (string)\"DD\", (string)\"EE\", (string)\"FF\", (string)\"GG\", (string)\"HH\"\
    })))\n        // (\"my_class.AA\")\n        // >>> StrongestExtension((\"my_class\"\
    ), (new List<string>(new string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"\
    , (string)\"DD\", (string)\"EE\", (string)\"FF\", (string)\"GG\", (string)\"HH\"\
    , (string)\"II\"})))\n        // (\"my_class.AA\")\n        // >>> StrongestExtension((\"\
    my_class\"), (new List<string>(new string[]{(string)\"AA\", (string)\"Be\", (string)\"\
    CC\", (string)\"DD\", (string)\"EE\", (string)\"FF\", (string)\"\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1xbdj228.cs(25,26): error CS0161: ''Problem.StrongestExtension(string,
    List<string>)'': not all code paths return a value

    '
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here.\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7561d935d28a4d59a4a603d36b89c558>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code goes here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4b82394120f4dadb837f663a6aa5b59>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest = \"\";\n        double strength = 0;\n\
    \        foreach (string ext in extensions) {\n            double ext_strength\
    \ = 0;\n            foreach (char c in ext) {\n                if (Char.IsUpper(c))\
    \ {\n                    ext_strength += 1;\n                } else {\n      \
    \              ext_strength -= 1;\n                }\n            }\n        \
    \    if (ext_strength > strength) {\n                strength = ext_strength;\n\
    \                strongest = ext;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(StrongestExtension((\"Watashi\"), (new List<string>(new string[]{(string)\"\
    tEN\", (string)\"niNE\", (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\"\
    )));\n    Debug.Assert(StrongestExtension((\"Boku123\"), (new List<string>(new\
    \ string[]{(string)\"nani\", (string)\"NazeDa\", (string)\"YEs.WeCaNe\", (string)\"\
    32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\")));\n    Debug.Assert(StrongestExtension((\"\
    __YESIMHERE\"), (new List<string>(new string[]{(string)\"t\", (string)\"eMptY\"\
    , (string)\"nothing\", (string)\"zeR00\", (string)\"NuLl__\", (string)\"123NoooneB321\"\
    }))).Equals((\"__YESIMHERE.NuLl__\")));\n    Debug.Assert(StrongestExtension((\"\
    K\"), (new List<string>(new string[]{(string)\"Ta\", (string)\"TAR\", (string)\"\
    t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\")));\n    Debug.Assert(StrongestExtension((\"\
    __HAHA\"), (new List<string>(new string[]{(string)\"Tab\", (string)\"123\", (string)\"\
    781345\", (string)\"-_-\"}))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"\
    YameRore\"), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\"\
    , (string)\"WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b43ad9b140c345e592e3d472df06a57d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b43ad9b140c345e592e3d472df06a57d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799233
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        string strongest_extension = \"\";\n        double strongest_strength\
    \ = 0;\n        foreach (string extension in extensions) {\n            double\
    \ strength = 0;\n            foreach (char c in extension) {\n               \
    \ if (char.IsUpper(c)) {\n                    strength += 1;\n               \
    \ } else {\n                    strength -= 1;\n                }\n          \
    \  }\n            if (strength > strongest_strength) {\n                strongest_strength\
    \ = strength;\n                strongest_extension = extension;\n            }\n\
    \        }\n        return class_name + \".\" + strongest_extension;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"\
    Watashi\"), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\",\
    \ (string)\"eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <873bdcc31b254db7b73728c70560ef17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799231
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You will be given the name of a class (a string) and a\
    \ list of extensions.\n    // The extensions are to be used to load additional\
    \ classes to the class. The\n    // strength of the extension is as follows: Let\
    \ CAP be the number of the uppercase\n    // letters in the extension's name,\
    \ and let SM be the number of lowercase letters \n    // in the extension's name,\
    \ the strength is given by the fraction CAP - SM. \n    // You should find the\
    \ strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new\
    \ string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\"\
    )\n    public static string StrongestExtension(string class_name, List<string>\
    \ extensions) {\n        // Your code here\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(StrongestExtension((\"Watashi\"\
    ), (new List<string>(new string[]{(string)\"tEN\", (string)\"niNE\", (string)\"\
    eIGHt8OKe\"}))).Equals((\"Watashi.eIGHt8OKe\")));\n    Debug.Assert(StrongestExtension((\"\
    Boku123\"), (new List<string>(new string[]{(string)\"nani\", (string)\"NazeDa\"\
    , (string)\"YEs.WeCaNe\", (string)\"32145tggg\"}))).Equals((\"Boku123.YEs.WeCaNe\"\
    )));\n    Debug.Assert(StrongestExtension((\"__YESIMHERE\"), (new List<string>(new\
    \ string[]{(string)\"t\", (string)\"eMptY\", (string)\"nothing\", (string)\"zeR00\"\
    , (string)\"NuLl__\", (string)\"123NoooneB321\"}))).Equals((\"__YESIMHERE.NuLl__\"\
    )));\n    Debug.Assert(StrongestExtension((\"K\"), (new List<string>(new string[]{(string)\"\
    Ta\", (string)\"TAR\", (string)\"t234An\", (string)\"cosSo\"}))).Equals((\"K.TAR\"\
    )));\n    Debug.Assert(StrongestExtension((\"__HAHA\"), (new List<string>(new\
    \ string[]{(string)\"Tab\", (string)\"123\", (string)\"781345\", (string)\"-_-\"\
    }))).Equals((\"__HAHA.123\")));\n    Debug.Assert(StrongestExtension((\"YameRore\"\
    ), (new List<string>(new string[]{(string)\"HhAas\", (string)\"okIWILL123\", (string)\"\
    WorkOut\", (string)\"Fails\", (string)\"-_-\"}))).Equals((\"YameRore.okIWILL123\"\
    )));\n    Debug.Assert(StrongestExtension((\"finNNalLLly\"), (new List<string>(new\
    \ string[]{(string)\"Die\", (string)\"NowW\", (string)\"Wow\", (string)\"WoW\"\
    }))).Equals((\"finNNalLLly.WoW\")));\n    Debug.Assert(StrongestExtension((\"\
    _\"), (new List<string>(new string[]{(string)\"Bb\", (string)\"91245\"}))).Equals((\"\
    _.Bb\")));\n    Debug.Assert(StrongestExtension((\"Sp\"), (new List<string>(new\
    \ string[]{(string)\"671235\", (string)\"Bb\"}))).Equals((\"Sp.671235\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3b2c9b18c674e0cbb900d7789f8b5b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799232
