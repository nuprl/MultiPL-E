name: HumanEval_6_parse_nested_parens
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Input to this function is a string represented multiple groups\
  \ for nested parentheses separated by spaces.\n    // For each of the group, output\
  \ the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two\
  \ levels of nesting while ((())) has three.\n    // >>> ParseNestedParens((\"(()())\
  \ ((())) () ((())()())\"))\n    // (new List<long>(new long[]{(long)2L, (long)3L,\
  \ (long)1L, (long)3L}))\n    public static List<long> ParseNestedParens(string paren_string)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ParseNestedParens((\"\
  (()()) ((())) () ((())()())\")).Equals((new List<long>(new long[]{(long)2L, (long)3L,\
  \ (long)1L, (long)3L}))));\n    Debug.Assert(ParseNestedParens((\"() (()) ((()))\
  \ (((())))\")).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(ParseNestedParens((\"(()(())((())))\")).Equals((new List<long>(new\
  \ long[]{(long)4L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        int cur_level\
    \ = 0;\n        int max_level = 0;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                cur_level += 1;\n              \
    \  max_level = Math.Max(max_level, cur_level);\n            } else if (c == ')')\
    \ {\n                cur_level -= 1;\n            } else if (c == ' ') {\n   \
    \             result.Add(max_level);\n                max_level = 0;\n       \
    \         cur_level = 0;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        // Write your code here\n        return new\
    \ List<long>();", "        var result = new List<long>();\n        var parens\
    \ = paren_string.Split(' ');\n        foreach (var paren in parens) {\n      \
    \      var max_nesting = 0L;\n            var current_nesting = 0L;\n        \
    \    foreach (var c in paren) {\n                if (c == '(') {\n           \
    \         current_nesting += 1L;\n                    max_nesting = Math.Max(max_nesting,\
    \ current_nesting);\n                }\n                else {\n             \
    \       current_nesting -= 1L;\n                }\n            }\n           \
    \ result.Add(max_nesting);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0L;\n        long cur_depth\
    \ = 0L;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                cur_depth++;\n                if (cur_depth > max_depth)\
    \ {\n                    max_depth = cur_depth;\n                }\n         \
    \   } else if (c == ')') {\n                cur_depth--;\n            } else if\
    \ (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0L;\n                cur_depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // >>> ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))\n        List<long> result = new List<long>();\n        // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n        List<long> stack = new List<long>();\n\
    \        // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n       \
    \ // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n  \
    \      long max_depth = 0L;\n        // >>> ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        long depth = 0L;\n        // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n        foreach (char c in paren_string) {\n\
    \            // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n   \
    \         // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n\
    \            if (c == '(') {\n                // >>> ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\"))\n                // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (", "        // >>> ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))\n        var ret = new List<long>();\n        var paren_groups =\
    \ paren_string.Split(' ');\n        foreach (var paren_group in paren_groups)\
    \ {\n            var max_depth = 0L;\n            var depth = 0L;\n          \
    \  foreach (var c in paren_group) {\n                if (c == '(') {\n       \
    \             depth++;\n                    if (depth > max_depth) {\n       \
    \                 max_depth = depth;\n                    }\n                }\n\
    \                else if (c == ')') {\n                    depth--;\n        \
    \        }\n            }\n            ret.Add(max_depth);\n        }\n      \
    \  return ret;", "        var result = new List<long>();\n        var parens =\
    \ paren_string.Split(' ');\n        foreach (var paren in parens) {\n        \
    \    var max_level = 0L;\n            var level = 0L;\n            foreach (var\
    \ c in paren) {\n                if (c == '(') {\n                    level++;\n\
    \                    if (level > max_level) {\n                        max_level\
    \ = level;\n                    }\n                } else if (c == ')') {\n  \
    \                  level--;\n                }\n            }\n            result.Add(max_level);\n\
    \        }\n        return result;", "        // >>> ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        var groups = paren_string.Split(' ');\n     \
    \   List<long> result = new List<long>();\n        foreach (var group in groups)\
    \ {\n            long max_depth = 0L;\n            long current_depth = 0L;\n\
    \            foreach (var c in group) {\n                if (c == '(') {\n   \
    \                 current_depth++;\n                    if (current_depth > max_depth)\
    \ {\n                        max_depth = current_depth;\n                    }\n\
    \                }\n                else if (c == ')') {\n                   \
    \ current_depth--;\n                }\n            }\n            result.Add(max_depth);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        var depth = 0L;\n        var max_depth = 0L;\n        foreach (var c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                max_depth = Math.Max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth--;\n            } else if (c == ' ') {\n\
    \                result.Add(max_depth);\n                max_depth = 0L;\n   \
    \             depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0L;\n        long depth = 0L;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (c == ')') {\n                depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        // (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n        var\
    \ parens = paren_string.Split(' ');\n        var result = new List<long>();\n\
    \        foreach (var paren in parens) {\n            var max_depth = 0L;\n  \
    \          var depth = 0L;\n            foreach (var c in paren) {\n         \
    \       if (c == '(') {\n                    depth++;\n                    if\
    \ (depth > max_depth) {\n                        max_depth = depth;\n        \
    \            }\n                }\n                else {\n                  \
    \  depth--;\n                }\n            }\n            result.Add(max_depth);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        // Fill in your code here\n        return result;", "        // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n        var parens = paren_string.Split(' ');\n\
    \        var ans = new List<long>();\n        foreach (var paren in parens) {\n\
    \            var stack = new Stack<char>();\n            var max = 0L;\n     \
    \       var cur = 0L;\n            foreach (var c in paren) {\n              \
    \  if (c == '(') {\n                    stack.Push(c);\n                    cur++;\n\
    \                    max = Math.Max(max, cur);\n                } else if (c ==\
    \ ')') {\n                    if (stack.Count == 0) {\n                      \
    \  throw new Exception(\"Invalid parens\");\n                    }\n         \
    \           stack.Pop();\n                    cur--;\n                }\n    \
    \        }\n            if (stack.Count != 0) {\n                throw new Exception(\"\
    Invalid parens\");\n            }\n            ans.Add(max);\n        }\n    \
    \    return ans;", "        List<long> result = new List<long>();\n        //\
    \ TODO: Implement this function.\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0L;\n        long depth\
    \ = 0L;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                depth++;\n                if (depth > max_depth) {\n    \
    \                max_depth = depth;\n                }\n            } else if\
    \ (c == ')') {\n                depth--;\n            } else if (c == ' ') {\n\
    \                result.Add(max_depth);\n                max_depth = 0L;\n   \
    \             depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0L;\n        long depth = 0L;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (c == ')') {\n                depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ var result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var current_depth = 0L;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    current_depth += 1L;\n\
    \                    max_depth = Math.Max(max_depth, current_depth);\n       \
    \         } else if (c == ')') {\n                    current_depth -= 1L;\n \
    \               }\n            }\n            result.Add(max_depth);\n       \
    \ }\n        return result;", "        // Write your code here\n        List<long>\
    \ result = new List<long>();\n        string[] groups = paren_string.Split(' ');\n\
    \        foreach (string group in groups) {\n            int max_level = 0;\n\
    \            int level = 0;\n            foreach (char c in group) {\n       \
    \         if (c == '(') {\n                    level++;\n                    max_level\
    \ = Math.Max(max_level, level);\n                } else if (c == ')') {\n    \
    \                level--;\n                }\n            }\n            result.Add(max_level);\n\
    \        }\n        return result;", "        // >>> ParseNestedParens(\"(()())\
    \ ((())) () ((())()())\")\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        var groups = paren_string.Split(' ');\n     \
    \   var result = new List<long>();\n        foreach (var group in groups) {\n\
    \            var max_depth = 0L;\n            var depth = 0L;\n            foreach\
    \ (var c in group) {\n                if (c == '(') {\n                    depth\
    \ += 1L;\n                    max_depth = Math.Max(max_depth, depth);\n      \
    \          } else if (c == ')') {\n                    depth -= 1L;\n        \
    \        }\n            }\n            result.Add(max_depth);\n        }\n   \
    \     return result;", "        // >>> ParseNestedParens(\"(()()) ((())) () ((())()())\"\
    )\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n\
    \        var result = new List<long>();\n        var parens = paren_string.Split('\
    \ ');\n        foreach (var paren in parens) {\n            var max_depth = 0L;\n\
    \            var current_depth = 0L;\n            foreach (var c in paren) {\n\
    \                if (c == '(') {\n                    current_depth++;\n     \
    \               if (current_depth > max_depth) {\n                        max_depth\
    \ = current_depth;\n                    }\n                } else if (c == ')')\
    \ {\n                    current_depth--;\n                }\n            }\n\
    \            result.Add(max_depth);\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long max_depth = 0L;\n  \
    \      long current_depth = 0L;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                current_depth++;\n             \
    \   if (current_depth > max_depth) {\n                    max_depth = current_depth;\n\
    \                }\n            } else if (c == ')') {\n                current_depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                current_depth = 0L;\n      \
    \      }\n        }\n        result.Add(max_depth);\n        return result;",
  "        List<long> result = new List<long>();\n        long curr_level = 0L;\n\
    \        long max_level = 0L;\n        foreach (char c in paren_string) {\n  \
    \          if (c == '(') {\n                curr_level++;\n                if\
    \ (curr_level > max_level) {\n                    max_level = curr_level;\n  \
    \              }\n            } else if (c == ')') {\n                curr_level--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0L;\n                curr_level = 0L;\n         \
    \   }\n        }\n        result.Add(max_level);\n        return result;", " \
    \       // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        //\
    \ (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n     \
    \   var result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        for (long i = 0L; i < (long)paren_groups.Length; i++) {\n     \
    \       var paren_group = paren_groups[i];\n            var max_depth = 0L;\n\
    \            var depth = 0L;\n            for (long j = 0L; j < (long)paren_group.Length;\
    \ j++) {\n                var c = paren_group[j];\n                if (c == '(')\
    \ {\n                    depth++;\n                    if (depth > max_depth)\
    \ {\n                        max_depth = depth;\n                    }\n     \
    \           }\n                else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.Add(max_depth);\n      \
    \  }\n        return result;", "        // >>> ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        var parens = paren_string.Split(' ');\n     \
    \   var result = new List<long>();\n        foreach (var paren in parens) {\n\
    \            var max_depth = 0L;\n            var depth = 0L;\n            foreach\
    \ (var c in paren) {\n                if (c == '(') {\n                    depth\
    \ += 1L;\n                    max_depth = Math.Max(max_depth, depth);\n      \
    \          } else {\n                    depth -= 1L;\n                }\n   \
    \         }\n            result.Add(max_depth);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long count = 0;\n      \
    \  long max = 0;\n        foreach (char c in paren_string) {\n            if (c\
    \ == '(') {\n                count += 1;\n                if (count > max) {\n\
    \                    max = count;\n                }\n            }\n        \
    \    else if (c == ')') {\n                count -= 1;\n            }\n      \
    \      else if (c == ' ') {\n                result.Add(max);\n              \
    \  max = 0;\n                count = 0;\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long depth = 0L;\n        long max_depth = 0L;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (c == ')') {\n                depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ var ret = new List<long>();\n        var stack = new Stack<long>();\n      \
    \  var max = 0L;\n        foreach (var c in paren_string) {\n            if (c\
    \ == '(') {\n                stack.Push(1L);\n            } else if (c == ')')\
    \ {\n                if (stack.Count == 0) {\n                    throw new Exception(\"\
    Unmatched right paren\");\n                }\n                var count = stack.Pop();\n\
    \                if (stack.Count == 0) {\n                    ret.Add(count);\n\
    \                    max = Math.Max(max, count);\n                } else {\n \
    \                   stack.Push(stack.Pop() + count);\n                }\n    \
    \        } else if (c == ' ') {\n                continue;\n            } else\
    \ {\n                throw new Exception(\"Invalid character\");\n           \
    \ }\n        }\n        if (stack.Count != 0) {\n            throw new Exception(\"\
    Unmatched left paren\");\n        }\n        return ret;", "        var result\
    \ = new List<long>();\n        var paren_groups = paren_string.Split(' ');\n \
    \       foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var current_depth = 0L;\n            foreach (var paren in\
    \ paren_group) {\n                if (paren == '(') {\n                    current_depth\
    \ += 1L;\n                    max_depth = Math.Max(max_depth, current_depth);\n\
    \                } else if (paren == ')') {\n                    current_depth\
    \ -= 1L;\n                }\n            }\n            result.Add(max_depth);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        int max_depth = 0;\n        int depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth += 1;\n\
    \                max_depth = Math.Max(max_depth, depth);\n            } else if\
    \ (c == ')') {\n                depth -= 1;\n            } else if (c == ' ')\
    \ {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \                depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long depth = 0L;\n        long max_depth = 0L;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (c == ')') {\n                depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        // (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n        var\
    \ result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var depth = 0L;\n            foreach (var paren in paren_group)\
    \ {\n                if (paren == '(') {\n                    depth += 1L;\n \
    \                   if (depth > max_depth) {\n                        max_depth\
    \ = depth;\n                    }\n                }\n                else {\n\
    \                    depth -= 1L;\n                }\n            }\n        \
    \    result.Add(max_depth);\n        }\n        return result;", "        var\
    \ max_depth = 0L;\n        var depth = 0L;\n        var result = new List<long>();\n\
    \        foreach (var c in paren_string) {\n            if (c == '(') {\n    \
    \            depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0L;\n                depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // >>> ParseNestedParens(\"(()()) ((())) ()\
    \ ((())()())\")\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))\n        var paren_groups = paren_string.Split(' ');\n        var\
    \ max_nesting = new List<long>();\n        foreach (var paren_group in paren_groups)\
    \ {\n            var max_nesting_level = 0L;\n            var nesting_level =\
    \ 0L;\n            foreach (var paren in paren_group) {\n                if (paren\
    \ == '(') {\n                    nesting_level += 1L;\n                } else\
    \ if (paren == ')') {\n                    nesting_level -= 1L;\n            \
    \    }\n                if (nesting_level > max_nesting_level) {\n           \
    \         max_nesting_level = nesting_level;\n                }\n            }\n\
    \            max_nesting.Add(max_nesting_level);\n        }\n        return max_nesting;",
  "        List<long> result = new List<long>();\n        long max_depth = 0L;\n \
    \       long depth = 0L;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                depth++;\n                if (depth > max_depth)\
    \ {\n                    max_depth = depth;\n                }\n            }\
    \ else if (c == ')') {\n                depth--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0L;\n                depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // >>> ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))\n        var result = new List<long>();\n        var paren_groups\
    \ = paren_string.Split(' ');\n        foreach (var paren_group in paren_groups)\
    \ {\n            var max_nesting = 0L;\n            var current_nesting = 0L;\n\
    \            foreach (var paren in paren_group) {\n                if (paren ==\
    \ '(') {\n                    current_nesting += 1L;\n                    if (current_nesting\
    \ > max_nesting) {\n                        max_nesting = current_nesting;\n \
    \                   }\n                }\n                else {\n           \
    \         current_nesting -= 1L;\n                }\n            }\n         \
    \   result.Add(max_nesting);\n        }\n        return result;", "        var\
    \ result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var depth = 0L;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           if (depth > max_depth) {\n                        max_depth = depth;\n\
    \                    }\n                }\n                else if (c == ')')\
    \ {\n                    depth--;\n                }\n            }\n        \
    \    result.Add(max_depth);\n        }\n        return result;", "        var\
    \ result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var depth = 0L;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           if (depth > max_depth) {\n                        max_depth = depth;\n\
    \                    }\n                }\n                else if (c == ')')\
    \ {\n                    depth--;\n                }\n            }\n        \
    \    result.Add(max_depth);\n        }\n        return result;", "        var\
    \ parens = paren_string.Split(' ');\n        var result = new List<long>();\n\
    \        foreach (var paren in parens) {\n            var max_depth = 0L;\n  \
    \          var depth = 0L;\n            foreach (var c in paren) {\n         \
    \       if (c == '(') {\n                    depth++;\n                    max_depth\
    \ = Math.Max(max_depth, depth);\n                }\n                else {\n \
    \                   depth--;\n                }\n            }\n            result.Add(max_depth);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        var paren_groups = paren_string.Split(' ');\n        foreach (var paren_group\
    \ in paren_groups) {\n            var max_depth = 0L;\n            var depth =\
    \ 0L;\n            foreach (var paren in paren_group) {\n                if (paren\
    \ == '(') {\n                    depth += 1L;\n                    if (depth >\
    \ max_depth) {\n                        max_depth = depth;\n                 \
    \   }\n                }\n                else {\n                    depth -=\
    \ 1L;\n                }\n            }\n            result.Add(max_depth);\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  List<long> result = new List<long>();\n        string[] groups = paren_string.Split('\
    \ ');\n        foreach (string group in groups) {\n            long count = 0;\n\
    \            long max = 0;\n            foreach (char c in group) {\n        \
    \        if (c == '(') {\n                    count++;\n                    if\
    \ (count > max) {\n                        max = count;\n                    }\n\
    \                } else if (c == ')') {\n                    count--;\n      \
    \          }\n            }\n            result.Add(max);\n        }\n       \
    \ return result;", "        var paren_groups = paren_string.Split(' ');\n    \
    \    var max_levels = new List<long>();\n        foreach (var paren_group in paren_groups)\
    \ {\n            var level = 0L;\n            var max_level = 0L;\n          \
    \  foreach (var c in paren_group) {\n                if (c == '(') {\n       \
    \             level += 1L;\n                    if (level > max_level) {\n   \
    \                     max_level = level;\n                    }\n            \
    \    } else if (c == ')') {\n                    level -= 1L;\n              \
    \  }\n            }\n            max_levels.Add(max_level);\n        }\n     \
    \   return max_levels;", "        var result = new List<long>();\n        var\
    \ paren_groups = paren_string.Split(' ');\n        foreach (var paren_group in\
    \ paren_groups) {\n            var max_depth = 0L;\n            var depth = 0L;\n\
    \            foreach (var c in paren_group) {\n                if (c == '(') {\n\
    \                    depth++;\n                    if (depth > max_depth) {\n\
    \                        max_depth = depth;\n                    }\n         \
    \       }\n                else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.Add(max_depth);\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max_depth = 0L;\n        long depth = 0L;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (c == ')') {\n                depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n        // >>> ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        // >>> ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))\n        // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    ))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n\
    \        // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n       \
    \ // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n  \
    \      // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        //\
    \ (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n     \
    \   // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        // (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n        //\
    \ >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        // (new List<long>(new\
    \ long[]{(long)2L, (long)3L", "        // Implement this function.\n        //\
    \ You can add more functions and classes as needed.\n        // You can also modify\
    \ the signature of the function if needed.\n        // The function signature\
    \ is not restricted to the one given below.\n        // You can also modify the\
    \ main function to take input from STDIN.\n        // You can also modify the\
    \ main function to write output to STDOUT.\n        // You can also modify the\
    \ main function to write output to a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        // You can also modify the\
    \ main function to read input from a file.\n        //", "        // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n        var result = new List<long>();\n  \
    \      var parens = paren_string.Split(' ');\n        foreach (var paren in parens)\
    \ {\n            var depth = 0L;\n            var max_depth = 0L;\n          \
    \  foreach (var c in paren) {\n                if (c == '(') {\n             \
    \       depth += 1L;\n                    if (depth > max_depth) {\n         \
    \               max_depth = depth;\n                    }\n                } else\
    \ {\n                    depth -= 1L;\n                }\n            }\n    \
    \        result.Add(max_depth);\n        }\n        return result;", "       \
    \ // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        // (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n        var\
    \ parens = paren_string.Split(' ');\n        var max_nesting = new List<long>();\n\
    \        foreach (var paren in parens) {\n            var max = 0L;\n        \
    \    var cur = 0L;\n            foreach (var c in paren) {\n                if\
    \ (c == '(') {\n                    cur++;\n                    if (cur > max)\
    \ {\n                        max = cur;\n                    }\n             \
    \   } else {\n                    cur--;\n                }\n            }\n \
    \           max_nesting.Add(max);\n        }\n        return max_nesting;", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0L;\n\
    \        long depth = 0L;\n        foreach (char c in paren_string) {\n      \
    \      if (c == '(') {\n                depth++;\n                if (depth >\
    \ max_depth) {\n                    max_depth = depth;\n                }\n  \
    \          } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0L;\n                depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long current_level = 0L;\n        long max_level = 0L;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                current_level\
    \ += 1L;\n                max_level = Math.Max(max_level, current_level);\n  \
    \          } else if (c == ')') {\n                current_level -= 1L;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_level);\n    \
    \            max_level = 0L;\n                current_level = 0L;\n          \
    \  }\n        }\n        result.Add(max_level);\n        return result;", "  \
    \      // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        //\
    \ (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n     \
    \   var result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var current_depth = 0L;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    current_depth += 1L;\n\
    \                    if (current_depth > max_depth) {\n                      \
    \  max_depth = current_depth;\n                    }\n                }\n    \
    \            else if (c == ')') {\n                    current_depth -= 1L;\n\
    \                }\n            }\n            result.Add(max_depth);\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max_depth = 0L;\n        long depth = 0L;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (c == ')') {\n                depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ var result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var depth = 0L;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           if (depth > max_depth) {\n                        max_depth = depth;\n\
    \                    }\n                }\n                else if (c == ')')\
    \ {\n                    depth--;\n                }\n            }\n        \
    \    result.Add(max_depth);\n        }\n        return result;", "        var\
    \ result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var cur_depth = 0L;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    cur_depth += 1L;\n \
    \                   max_depth = Math.Max(max_depth, cur_depth);\n            \
    \    }\n                else if (c == ')') {\n                    cur_depth -=\
    \ 1L;\n                }\n            }\n            result.Add(max_depth);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max_depth = 0L;\n        long cur_depth = 0L;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                cur_depth++;\n\
    \                if (cur_depth > max_depth) {\n                    max_depth =\
    \ cur_depth;\n                }\n            } else if (c == ')') {\n        \
    \        cur_depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                cur_depth = 0L;\n          \
    \  }\n        }\n        result.Add(max_depth);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long max_depth = 0L;\n \
    \       long depth = 0L;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                depth++;\n                if (depth > max_depth)\
    \ {\n                    max_depth = depth;\n                }\n            }\
    \ else if (c == ')') {\n                depth--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0L;\n                depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // >>> ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))\n        var parens = paren_string.Split(' ');\n        var max_nesting\
    \ = new List<long>();\n        foreach (var paren in parens) {\n            var\
    \ max_depth = 0L;\n            var depth = 0L;\n            foreach (var c in\
    \ paren) {\n                if (c == '(') {\n                    depth++;\n  \
    \                  if (depth > max_depth) {\n                        max_depth\
    \ = depth;\n                    }\n                } else {\n                \
    \    depth--;\n                }\n            }\n            max_nesting.Add(max_depth);\n\
    \        }\n        return max_nesting;", "        List<long> result = new List<long>();\n\
    \        int max_depth = 0;\n        int depth = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                depth++;\n   \
    \             max_depth = Math.Max(max_depth, depth);\n            } else if (c\
    \ == ')') {\n                depth--;\n            } else if (c == ' ') {\n  \
    \              result.Add(max_depth);\n                max_depth = 0;\n      \
    \          depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // Your code here\n        List<long> result\
    \ = new List<long>();\n        string[] groups = paren_string.Split(' ');\n  \
    \      foreach (string group in groups) {\n            int max_depth = 0;\n  \
    \          int depth = 0;\n            foreach (char c in group) {\n         \
    \       if (c == '(') {\n                    depth++;\n                    max_depth\
    \ = Math.Max(max_depth, depth);\n                } else if (c == ')') {\n    \
    \                depth--;\n                }\n            }\n            result.Add(max_depth);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        var groups = paren_string.Split(' ');\n        foreach (var group in\
    \ groups) {\n            var max_depth = 0L;\n            var depth = 0L;\n  \
    \          foreach (var c in group) {\n                if (c == '(') {\n     \
    \               depth++;\n                    if (depth > max_depth) {\n     \
    \                   max_depth = depth;\n                    }\n              \
    \  } else if (c == ')') {\n                    depth--;\n                }\n \
    \           }\n            result.Add(max_depth);\n        }\n        return result;",
  "        var result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var depth = 0L;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           if (depth > max_depth) {\n                        max_depth = depth;\n\
    \                    }\n                }\n                else if (c == ')')\
    \ {\n                    depth--;\n                }\n            }\n        \
    \    result.Add(max_depth);\n        }\n        return result;", "        var\
    \ result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var depth = 0L;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           if (depth > max_depth) {\n                        max_depth = depth;\n\
    \                    }\n                }\n                else if (c == ')')\
    \ {\n                    depth--;\n                }\n            }\n        \
    \    result.Add(max_depth);\n        }\n        return result;", "        var\
    \ result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var depth = 0L;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           if (depth > max_depth) {\n                        max_depth = depth;\n\
    \                    }\n                }\n                else if (c == ')')\
    \ {\n                    depth--;\n                }\n            }\n        \
    \    result.Add(max_depth);\n        }\n        return result;", "        // >>>\
    \ ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        // (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n        var parens = paren_string.Split('\
    \ ');\n        var result = new List<long>();\n        foreach (var paren in parens)\
    \ {\n            var max_depth = 0L;\n            var depth = 0L;\n          \
    \  foreach (var c in paren) {\n                if (c == '(') {\n             \
    \       depth += 1L;\n                    max_depth = Math.Max(max_depth, depth);\n\
    \                } else {\n                    depth -= 1L;\n                }\n\
    \            }\n            result.Add(max_depth);\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var paren_groups\
    \ = paren_string.Split(' ');\n        foreach (var paren_group in paren_groups)\
    \ {\n            var max_depth = 0L;\n            var depth = 0L;\n          \
    \  foreach (var c in paren_group) {\n                if (c == '(') {\n       \
    \             depth++;\n                    if (depth > max_depth) {\n       \
    \                 max_depth = depth;\n                    }\n                }\n\
    \                else if (c == ')') {\n                    depth--;\n        \
    \        }\n            }\n            result.Add(max_depth);\n        }\n   \
    \     return result;", "        var result = new List<long>();\n        var paren_groups\
    \ = paren_string.Split(' ');\n        foreach (var paren_group in paren_groups)\
    \ {\n            var stack = new Stack<char>();\n            var max_depth = 0L;\n\
    \            var depth = 0L;\n            foreach (var c in paren_group) {\n \
    \               if (c == '(') {\n                    stack.Push(c);\n        \
    \            depth += 1L;\n                    max_depth = Math.Max(max_depth,\
    \ depth);\n                } else if (c == ')') {\n                    if (stack.Count\
    \ == 0) {\n                        throw new Exception(\"Invalid parens\");\n\
    \                    }\n                    stack.Pop();\n                   \
    \ depth -= 1L;\n                } else {\n                    throw new Exception(\"\
    Invalid parens\");\n                }\n            }\n            if (stack.Count\
    \ != 0) {\n                throw new Exception(\"Invalid parens\");\n        \
    \    }\n            result.Add(max_depth);\n        }\n        return result;",
  "        // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        //\
    \ (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n     \
    \   List<long> result = new List<long>();\n        // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n        string[] groups = paren_string.Split(new\
    \ char[] { ' ' });\n        // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    ))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n\
    \        foreach (string group in groups) {\n            // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n            // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n            long max_depth = 0L;\n        \
    \    // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n           \
    \ // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n  \
    \          long depth = 0L;\n            // >>> ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\"))\n            // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n            foreach (char c in group) {\n           \
    \     // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n          \
    \      // (new List<long>(new long[]{(long)2L, (long)3L, (long)", "        var\
    \ result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var depth = 0L;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           if (depth > max_depth) {\n                        max_depth = depth;\n\
    \                    }\n                }\n                else if (c == ')')\
    \ {\n                    depth--;\n                }\n            }\n        \
    \    result.Add(max_depth);\n        }\n        return result;", "        var\
    \ result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var depth = 0L;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           if (depth > max_depth) {\n                        max_depth = depth;\n\
    \                    }\n                }\n                else if (c == ')')\
    \ {\n                    depth--;\n                }\n            }\n        \
    \    result.Add(max_depth);\n        }\n        return result;", "        // Fill\
    \ in your code here\n        List<long> result = new List<long>();\n        string[]\
    \ groups = paren_string.Split(' ');\n        foreach (string group in groups)\
    \ {\n            long max = 0;\n            long current = 0;\n            foreach\
    \ (char c in group) {\n                if (c == '(') {\n                    current++;\n\
    \                    if (current > max) {\n                        max = current;\n\
    \                    }\n                } else if (c == ')') {\n             \
    \       current--;\n                }\n            }\n            result.Add(max);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        var paren_groups = paren_string.Split(' ');\n        foreach (var paren_group\
    \ in paren_groups) {\n            var max_depth = 0L;\n            var current_depth\
    \ = 0L;\n            foreach (var paren in paren_group) {\n                if\
    \ (paren == '(') {\n                    current_depth++;\n                   \
    \ max_depth = Math.Max(max_depth, current_depth);\n                } else if (paren\
    \ == ')') {\n                    current_depth--;\n                }\n       \
    \     }\n            result.Add(max_depth);\n        }\n        return result;",
  "        // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        //\
    \ (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n     \
    \   var parens = paren_string.Split(' ');\n        var result = new List<long>();\n\
    \        foreach (var paren in parens) {\n            var max_nesting = 0L;\n\
    \            var current_nesting = 0L;\n            foreach (var c in paren) {\n\
    \                if (c == '(') {\n                    current_nesting++;\n   \
    \                 if (current_nesting > max_nesting) {\n                     \
    \   max_nesting = current_nesting;\n                    }\n                }\n\
    \                else if (c == ')') {\n                    current_nesting--;\n\
    \                }\n            }\n            result.Add(max_nesting);\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long current_level = 0L;\n        long max_level = 0L;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                current_level\
    \ += 1L;\n                max_level = Math.Max(max_level, current_level);\n  \
    \          } else if (c == ')') {\n                current_level -= 1L;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_level);\n    \
    \            max_level = 0L;\n                current_level = 0L;\n          \
    \  }\n        }\n        result.Add(max_level);\n        return result;", "  \
    \      var res = new List<long>();\n        var stack = new Stack<long>();\n \
    \       var max = 0L;\n        foreach (var c in paren_string) {\n           \
    \ if (c == '(') {\n                stack.Push(max);\n                max = 0;\n\
    \            } else if (c == ')') {\n                res.Add(max);\n         \
    \       max = stack.Pop();\n            } else if (c == ' ') {\n             \
    \   max = Math.Max(max, 0);\n            }\n        }\n        return res;", " \
    \       var result = new List<long>();\n        var stack = new Stack<long>();\n\
    \        var max = 0L;\n        foreach (var c in paren_string) {\n          \
    \  if (c == '(') {\n                stack.Push(1L);\n            } else if (c\
    \ == ')') {\n                var count = 0L;\n                while (stack.Count\
    \ > 0 && stack.Peek() > 0) {\n                    count += stack.Pop();\n    \
    \            }\n                stack.Push(count + 1);\n                max =\
    \ Math.Max(max, count + 1);\n            } else if (c == ' ') {\n            \
    \    result.Add(max);\n                max = 0L;\n                stack.Clear();\n\
    \            }\n        }\n        result.Add(max);\n        return result;",
  "        var result = new List<long>();\n        var current_level = 0L;\n     \
    \   var max_level = 0L;\n        foreach (var c in paren_string) {\n         \
    \   if (c == '(') {\n                current_level++;\n                max_level\
    \ = Math.Max(max_level, current_level);\n            } else if (c == ')') {\n\
    \                current_level--;\n            } else if (c == ' ') {\n      \
    \          result.Add(max_level);\n                max_level = 0L;\n         \
    \       current_level = 0L;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0L;\n        long depth = 0L;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (c == ')') {\n                depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long max_depth = 0L;\n      \
    \  long depth = 0L;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                depth++;\n                if (depth > max_depth)\
    \ {\n                    max_depth = depth;\n                }\n            }\
    \ else if (c == ')') {\n                depth--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0L;\n                depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int cur_max = 0;\n        int cur_count = 0;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                cur_count += 1;\n\
    \                cur_max = Math.Max(cur_max, cur_count);\n            } else if\
    \ (c == ')') {\n                cur_count -= 1;\n            } else if (c == '\
    \ ') {\n                result.Add(cur_max);\n                cur_max = 0;\n \
    \               cur_count = 0;\n            }\n        }\n        result.Add(cur_max);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ paren_groups = paren_string.Split(' ');\n        foreach (var paren_group in\
    \ paren_groups) {\n            var max_nesting = 0L;\n            var current_nesting\
    \ = 0L;\n            foreach (var paren in paren_group) {\n                if\
    \ (paren == '(') {\n                    current_nesting += 1L;\n             \
    \       max_nesting = Math.Max(max_nesting, current_nesting);\n              \
    \  } else if (paren == ')') {\n                    current_nesting -= 1L;\n  \
    \              }\n            }\n            result.Add(max_nesting);\n      \
    \  }\n        return result;", "        // >>> ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        var result = new List<long>();\n        var current_level\
    \ = 0L;\n        var max_level = 0L;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                current_level += 1L;\n     \
    \           max_level = Math.Max(max_level, current_level);\n            } else\
    \ if (c == ')') {\n                current_level -= 1L;\n            } else if\
    \ (c == ' ') {\n                result.Add(max_level);\n                max_level\
    \ = 0L;\n                current_level = 0L;\n            }\n        }\n     \
    \   result.Add(max_level);\n        return result;", "        // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n        List<long> result = new List<long>();\n\
    \        // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n       \
    \ // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n  \
    \      string[] groups = paren_string.Split(' ');\n        // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n        foreach (string group in groups) {\n\
    \            // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n   \
    \         // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n\
    \            long max_nesting = 0L;\n            // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n            // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n            long nesting = 0L;\n          \
    \  // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n            //\
    \ (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n     \
    \       foreach (char c in group) {\n                // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n                // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (", "        // >>> ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))\n        var result = new List<long>();\n        var paren_groups\
    \ = paren_string.Split(' ');\n        foreach (var group in paren_groups) {\n\
    \            var max_depth = 0L;\n            var depth = 0L;\n            foreach\
    \ (var c in group) {\n                if (c == '(') {\n                    depth++;\n\
    \                    if (depth > max_depth) {\n                        max_depth\
    \ = depth;\n                    }\n                }\n                else if\
    \ (c == ')') {\n                    depth--;\n                }\n            }\n\
    \            result.Add(max_depth);\n        }\n        return result;", "   \
    \     // TODO: Implement this function.\n        // Hint: You may find the Stack\
    \ class useful.\n        List<long> result = new List<long>();\n        string[]\
    \ groups = paren_string.Split(' ');\n        foreach (string group in groups)\
    \ {\n            Stack<char> stack = new Stack<char>();\n            long max\
    \ = 0;\n            foreach (char c in group) {\n                if (c == '(')\
    \ {\n                    stack.Push(c);\n                    max = Math.Max(max,\
    \ stack.Count);\n                } else if (c == ')') {\n                    stack.Pop();\n\
    \                }\n            }\n            result.Add(max);\n        }\n \
    \       return result;", "        var parens = paren_string.Split(' ');\n    \
    \    var result = new List<long>();\n        foreach (var paren in parens) {\n\
    \            var max_depth = 0L;\n            var depth = 0L;\n            foreach\
    \ (var c in paren) {\n                if (c == '(') {\n                    depth++;\n\
    \                    if (depth > max_depth) {\n                        max_depth\
    \ = depth;\n                    }\n                }\n                else {\n\
    \                    depth--;\n                }\n            }\n            result.Add(max_depth);\n\
    \        }\n        return result;", "        // >>> ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        var parens = paren_string.Split(' ');\n     \
    \   var result = new List<long>();\n        foreach (var paren in parens) {\n\
    \            result.Add(ParseNestedParensHelper(paren));\n        }\n        return\
    \ result;", "        // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    ))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n\
    \        List<long> result = new List<long>();\n        // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n        List<string> paren_groups = paren_string.Split('\
    \ ').ToList();\n        // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    ))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n\
    \        foreach (string paren_group in paren_groups) {\n            // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n            // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n            long max_depth = 0L;\n        \
    \    // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n           \
    \ // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n  \
    \          long current_depth = 0L;\n            // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n            // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n            foreach (char c in paren_group)\
    \ {\n                // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    ))\n                // (new List<long>(new long[]{(", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0L;\n        long current_depth\
    \ = 0L;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (c == ')') {\n                current_depth--;\n           \
    \ } else if (c == ' ') {\n                result.Add(max_depth);\n           \
    \     max_depth = 0L;\n                current_depth = 0L;\n            }\n  \
    \      }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long current_level = 0L;\n        long max_level\
    \ = 0L;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                current_level += 1L;\n                max_level = Math.Max(max_level,\
    \ current_level);\n            } else if (c == ')') {\n                current_level\
    \ -= 1L;\n            } else if (c == ' ') {\n                result.Add(max_level);\n\
    \                max_level = 0L;\n                current_level = 0L;\n      \
    \      }\n        }\n        result.Add(max_level);\n        return result;",
  "        List<long> result = new List<long>();\n        long max_depth = 0L;\n \
    \       long depth = 0L;\n        foreach (char c in paren_string) {\n       \
    \     if (c == '(') {\n                depth++;\n                if (depth > max_depth)\
    \ {\n                    max_depth = depth;\n                }\n            }\
    \ else if (c == ')') {\n                depth--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0L;\n                depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ paren_groups = paren_string.Split(' ');\n        foreach (var paren_group in\
    \ paren_groups) {\n            var max_depth = 0L;\n            var depth = 0L;\n\
    \            foreach (var c in paren_group) {\n                if (c == '(') {\n\
    \                    depth++;\n                    if (depth > max_depth) {\n\
    \                        max_depth = depth;\n                    }\n         \
    \       }\n                else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.Add(max_depth);\n      \
    \  }\n        return result;", "        // >>> ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        var paren_groups = paren_string.Split(' ');\n\
    \        var result = new List<long>();\n        foreach (var paren_group in paren_groups)\
    \ {\n            var max_depth = 0L;\n            var depth = 0L;\n          \
    \  foreach (var c in paren_group) {\n                if (c == '(') {\n       \
    \             depth += 1L;\n                    if (depth > max_depth) {\n   \
    \                     max_depth = depth;\n                    }\n            \
    \    }\n                else {\n                    depth -= 1L;\n           \
    \     }\n            }\n            result.Add(max_depth);\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ current_level = 0L;\n        long max_level = 0L;\n        foreach (char c in\
    \ paren_string) {\n            if (c == '(') {\n                current_level\
    \ += 1L;\n                max_level = Math.Max(max_level, current_level);\n  \
    \          } else if (c == ')') {\n                current_level -= 1L;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_level);\n    \
    \            max_level = 0L;\n                current_level = 0L;\n          \
    \  }\n        }\n        result.Add(max_level);\n        return result;", "  \
    \      // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        //\
    \ (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n     \
    \   var parens = paren_string.Split(' ');\n        var result = new List<long>();\n\
    \        foreach (var paren in parens) {\n            var max_depth = 0L;\n  \
    \          var depth = 0L;\n            foreach (var c in paren) {\n         \
    \       if (c == '(') {\n                    depth += 1L;\n                  \
    \  max_depth = Math.Max(max_depth, depth);\n                } else {\n       \
    \             depth -= 1L;\n                }\n            }\n            result.Add(max_depth);\n\
    \        }\n        return result;", "        // >>> ParseNestedParens((\"(()())\
    \ ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        var paren_groups = paren_string.Split(' ');\n\
    \        var result = new List<long>();\n        foreach (var paren_group in paren_groups)\
    \ {\n            var max_depth = 0L;\n            var depth = 0L;\n          \
    \  foreach (var c in paren_group) {\n                if (c == '(') {\n       \
    \             depth++;\n                    if (depth > max_depth) {\n       \
    \                 max_depth = depth;\n                    }\n                }\
    \ else if (c == ')') {\n                    depth--;\n                }\n    \
    \        }\n            result.Add(max_depth);\n        }\n        return result;",
  "        // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        //\
    \ (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n     \
    \   var parens = paren_string.Split(' ');\n        var max_levels = new List<long>();\n\
    \        foreach (var paren in parens) {\n            var level = 0L;\n      \
    \      var max_level = 0L;\n            foreach (var c in paren) {\n         \
    \       switch (c) {\n                    case '(':\n                        level++;\n\
    \                        break;\n                    case ')':\n             \
    \           level--;\n                        break;\n                }\n    \
    \            if (level > max_level) {\n                    max_level = level;\n\
    \                }\n            }\n            max_levels.Add(max_level);\n  \
    \      }\n        return max_levels;", "        // Your code here\n        List<long>\
    \ result = new List<long>();\n        string[] groups = paren_string.Split(' ');\n\
    \        foreach (string group in groups) {\n            long max = 0;\n     \
    \       long count = 0;\n            foreach (char c in group) {\n           \
    \     if (c == '(') {\n                    count++;\n                    if (count\
    \ > max) {\n                        max = count;\n                    }\n    \
    \            } else if (c == ')') {\n                    count--;\n          \
    \      }\n            }\n            result.Add(max);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max_depth\
    \ = 0L;\n        long cur_depth = 0L;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                cur_depth += 1L;\n         \
    \       max_depth = Math.Max(max_depth, cur_depth);\n            } else if (c\
    \ == ')') {\n                cur_depth -= 1L;\n            } else if (c == ' ')\
    \ {\n                result.Add(max_depth);\n                max_depth = 0L;\n\
    \                cur_depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long depth = 0L;\n        long max_depth = 0L;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (c == ')') {\n                depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ var result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var depth = 0L;\n            foreach (var c in paren_group)\
    \ {\n                if (c == '(') {\n                    depth++;\n         \
    \           if (depth > max_depth) {\n                        max_depth = depth;\n\
    \                    }\n                }\n                else if (c == ')')\
    \ {\n                    depth--;\n                }\n            }\n        \
    \    result.Add(max_depth);\n        }\n        return result;", "        var\
    \ result = new List<long>();\n        var stack = new Stack<long>();\n       \
    \ var max = 0L;\n        foreach (var c in paren_string) {\n            if (c\
    \ == '(') {\n                stack.Push(1L);\n            } else if (c == ')')\
    \ {\n                var count = 0L;\n                while (stack.Count > 0 &&\
    \ stack.Peek() > 0) {\n                    count += stack.Pop();\n           \
    \     }\n                stack.Pop();\n                stack.Push(count + 1);\n\
    \                max = Math.Max(max, count + 1);\n            } else if (c ==\
    \ ' ') {\n                result.Add(max);\n                max = 0L;\n      \
    \          stack.Clear();\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int max_depth = 0;\n        int depth = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                depth += 1;\n              \
    \  max_depth = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n\
    \                depth -= 1;\n            } else if (c == ' ') {\n           \
    \     result.Add(max_depth);\n                max_depth = 0;\n               \
    \ depth = 0;\n            }\n        }\n        result.Add(max_depth);\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ max_depth = 0L;\n        long depth = 0L;\n        foreach (var c in paren_string)\
    \ {\n            if (c == '(') {\n                depth++;\n                if\
    \ (depth > max_depth) {\n                    max_depth = depth;\n            \
    \    }\n            } else if (c == ')') {\n                depth--;\n       \
    \     } else if (c == ' ') {\n                result.Add(max_depth);\n       \
    \         max_depth = 0L;\n                depth = 0L;\n            }\n      \
    \  }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0L;\n        long depth\
    \ = 0L;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                depth++;\n                if (depth > max_depth) {\n    \
    \                max_depth = depth;\n                }\n            } else if\
    \ (c == ')') {\n                depth--;\n            } else if (c == ' ') {\n\
    \                result.Add(max_depth);\n                max_depth = 0L;\n   \
    \             depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // >>> ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))\n        var paren_groups = paren_string.Split(new char[]{' '},\
    \ StringSplitOptions.RemoveEmptyEntries);\n        var max_nesting = new List<long>();\n\
    \        foreach (var paren_group in paren_groups) {\n            var stack =\
    \ new Stack<char>();\n            var max_nesting_level = 0L;\n            var\
    \ nesting_level = 0L;\n            foreach (var c in paren_group) {\n        \
    \        if (c == '(') {\n                    stack.Push(c);\n               \
    \     nesting_level += 1L;\n                    if (nesting_level > max_nesting_level)\
    \ {\n                        max_nesting_level = nesting_level;\n            \
    \        }\n                } else if (c == ')') {\n                    if (stack.Count\
    \ == 0) {\n                        throw new Exception(string.Format(\"Invalid\
    \ paren group: {0}\", paren_group));\n                    }\n                \
    \    stack.Pop();\n                    nesting_level -= 1L;\n                }\
    \ else {\n                    throw new Exception(string.Format(\"Invalid paren\
    \ group: {0}\", paren_group));\n                }\n            }\n           \
    \ if (stack.Count != 0) {\n                throw new Exception(string.Format(\"\
    Invalid paren group: {0}\", paren_group));\n            }\n            max_nesting.Add(max_nesting_level);\n\
    \        }\n        return max_nesting;", "        // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n        var result = new List<long>();\n  \
    \      var parens = paren_string.Split(' ');\n        foreach (var paren in parens)\
    \ {\n            var max_depth = 0L;\n            var depth = 0L;\n          \
    \  foreach (var c in paren) {\n                if (c == '(') {\n             \
    \       depth += 1L;\n                    if (depth > max_depth) {\n         \
    \               max_depth = depth;\n                    }\n                }\n\
    \                else {\n                    depth -= 1L;\n                }\n\
    \            }\n            result.Add(max_depth);\n        }\n        return\
    \ result;", "        // Fill in your code here.\n        List<long> result = new\
    \ List<long>();\n        foreach (var group in paren_string.Split(' '))\n    \
    \    {\n            long maxDepth = 0;\n            long currentDepth = 0;\n \
    \           foreach (var paren in group)\n            {\n                if (paren\
    \ == '(')\n                {\n                    currentDepth++;\n          \
    \          if (currentDepth > maxDepth)\n                    {\n             \
    \           maxDepth = currentDepth;\n                    }\n                }\n\
    \                else if (paren == ')')\n                {\n                 \
    \   currentDepth--;\n                }\n            }\n            result.Add(maxDepth);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        var current_level = 0L;\n        var max_level = 0L;\n        foreach\
    \ (var c in paren_string) {\n            if (c == '(') {\n                current_level\
    \ += 1L;\n                max_level = Math.Max(max_level, current_level);\n  \
    \          } else if (c == ')') {\n                current_level -= 1L;\n    \
    \        } else if (c == ' ') {\n                result.Add(max_level);\n    \
    \            max_level = 0L;\n                current_level = 0L;\n          \
    \  }\n        }\n        result.Add(max_level);\n        return result;", "  \
    \      var groups = paren_string.Split(' ');\n        var result = new List<long>();\n\
    \        foreach (var group in groups) {\n            var max_depth = 0L;\n  \
    \          var depth = 0L;\n            foreach (var c in group) {\n         \
    \       if (c == '(') {\n                    depth += 1L;\n                  \
    \  max_depth = Math.Max(max_depth, depth);\n                } else if (c == ')')\
    \ {\n                    depth -= 1L;\n                }\n            }\n    \
    \        result.Add(max_depth);\n        }\n        return result;", "       \
    \ // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        // (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n        List<long>\
    \ result = new List<long>();\n        // >>> ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        string[] groups = paren_string.Split(' ');\n\
    \        // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n       \
    \ // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n  \
    \      foreach (string group in groups) {\n            // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n            // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n            long max_depth = 0L;\n        \
    \    // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n           \
    \ // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n  \
    \          long depth = 0L;\n            // >>> ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\"))\n            // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n            foreach (char c in group) {\n           \
    \     // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n          \
    \      // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long", " \
    \       List<long> result = new List<long>();\n        long max_depth = 0L;\n\
    \        long depth = 0L;\n        foreach (char c in paren_string) {\n      \
    \      if (c == '(') {\n                depth++;\n                if (depth >\
    \ max_depth) {\n                    max_depth = depth;\n                }\n  \
    \          } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0L;\n                depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     int max_depth = 0;\n        int cur_depth = 0;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                cur_depth++;\n\
    \                max_depth = Math.Max(max_depth, cur_depth);\n            } else\
    \ if (c == ')') {\n                cur_depth--;\n            } else if (c == '\
    \ ') {\n                result.Add(max_depth);\n                max_depth = 0;\n\
    \                cur_depth = 0;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long current_level = 0L;\n        long max_level = 0L;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                current_level++;\n\
    \                if (current_level > max_level) {\n                    max_level\
    \ = current_level;\n                }\n            } else if (c == ')') {\n  \
    \              current_level--;\n            } else if (c == ' ') {\n        \
    \        result.Add(max_level);\n                max_level = 0L;\n           \
    \     current_level = 0L;\n            }\n        }\n        result.Add(max_level);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ paren_groups = paren_string.Split(' ');\n        foreach (var paren_group in\
    \ paren_groups) {\n            var max_nesting = 0L;\n            var current_nesting\
    \ = 0L;\n            foreach (var paren in paren_group) {\n                if\
    \ (paren == '(') {\n                    current_nesting += 1L;\n             \
    \       max_nesting = Math.Max(max_nesting, current_nesting);\n              \
    \  } else if (paren == ')') {\n                    current_nesting -= 1L;\n  \
    \              }\n            }\n            result.Add(max_nesting);\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max_depth = 0L;\n        long depth = 0L;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (c == ')') {\n                depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long max_depth = 0L;\n      \
    \  long depth = 0L;\n        foreach (char c in paren_string) {\n            if\
    \ (c == '(') {\n                depth++;\n                if (depth > max_depth)\
    \ {\n                    max_depth = depth;\n                }\n            }\
    \ else if (c == ')') {\n                depth--;\n            } else if (c ==\
    \ ' ') {\n                result.Add(max_depth);\n                max_depth =\
    \ 0L;\n                depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // Fill in your code here.\n        List<long>\
    \ result = new List<long>();\n        string[] groups = paren_string.Split(' ');\n\
    \        foreach (string group in groups) {\n            long maxDepth = 0;\n\
    \            long currentDepth = 0;\n            foreach (char c in group) {\n\
    \                if (c == '(') {\n                    currentDepth++;\n      \
    \              if (currentDepth > maxDepth) {\n                        maxDepth\
    \ = currentDepth;\n                    }\n                } else if (c == ')')\
    \ {\n                    currentDepth--;\n                }\n            }\n \
    \           result.Add(maxDepth);\n        }\n        return result;", "     \
    \   // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        // (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n        var\
    \ result = new List<long>();\n        var paren_groups = paren_string.Split(new\
    \ char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n        foreach (var\
    \ paren_group in paren_groups) {\n            var max_depth = 0L;\n          \
    \  var depth = 0L;\n            foreach (var c in paren_group) {\n           \
    \     if (c == '(') {\n                    depth++;\n                    if (depth\
    \ > max_depth) {\n                        max_depth = depth;\n               \
    \     }\n                } else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            result.Add(max_depth);\n      \
    \  }\n        return result;", "        var result = new List<long>();\n     \
    \   var paren_groups = paren_string.Split(' ');\n        foreach (var group in\
    \ paren_groups) {\n            var max_depth = 0L;\n            var cur_depth\
    \ = 0L;\n            foreach (var c in group) {\n                if (c == '(')\
    \ {\n                    cur_depth++;\n                    max_depth = Math.Max(max_depth,\
    \ cur_depth);\n                } else if (c == ')') {\n                    cur_depth--;\n\
    \                }\n            }\n            result.Add(max_depth);\n      \
    \  }\n        return result;", "        // >>> ParseNestedParens(\"(()()) ((()))\
    \ () ((())()())\")\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        var paren_groups = paren_string.Split(' ');\n\
    \        var max_nesting = new List<long>();\n        foreach (var paren_group\
    \ in paren_groups) {\n            var nesting = 0L;\n            var max_nesting_in_group\
    \ = 0L;\n            foreach (var paren in paren_group) {\n                if\
    \ (paren == '(') {\n                    nesting += 1L;\n                } else\
    \ if (paren == ')') {\n                    nesting -= 1L;\n                }\n\
    \                if (nesting > max_nesting_in_group) {\n                    max_nesting_in_group\
    \ = nesting;\n                }\n            }\n            max_nesting.Add(max_nesting_in_group);\n\
    \        }\n        return max_nesting;", "        List<long> result = new List<long>();\n\
    \        long max_nesting = 0L;\n        long current_nesting = 0L;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                current_nesting++;\n\
    \                if (current_nesting > max_nesting) {\n                    max_nesting\
    \ = current_nesting;\n                }\n            } else if (c == ')') {\n\
    \                current_nesting--;\n            } else if (c == ' ') {\n    \
    \            result.Add(max_nesting);\n                max_nesting = 0L;\n   \
    \             current_nesting = 0L;\n            }\n        }\n        result.Add(max_nesting);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0L;\n        long cur_depth = 0L;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                cur_depth++;\n\
    \                if (cur_depth > max_depth) {\n                    max_depth =\
    \ cur_depth;\n                }\n            } else if (c == ')') {\n        \
    \        cur_depth--;\n            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                cur_depth = 0L;\n          \
    \  }\n        }\n        result.Add(max_depth);\n        return result;", "  \
    \      var result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var group in paren_groups) {\n            var max_depth\
    \ = 0L;\n            var current_depth = 0L;\n            foreach (var c in group)\
    \ {\n                if (c == '(') {\n                    current_depth += 1L;\n\
    \                    max_depth = Math.Max(max_depth, current_depth);\n       \
    \         } else if (c == ')') {\n                    current_depth -= 1L;\n \
    \               }\n            }\n            result.Add(max_depth);\n       \
    \ }\n        return result;", "        // >>> ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        var result = new List<long>();\n        var paren_groups\
    \ = paren_string.Split(' ');\n        foreach (var paren_group in paren_groups)\
    \ {\n            var max_depth = 0L;\n            var depth = 0L;\n          \
    \  foreach (var c in paren_group) {\n                if (c == '(') {\n       \
    \             depth += 1L;\n                    if (depth > max_depth) {\n   \
    \                     max_depth = depth;\n                    }\n            \
    \    }\n                else if (c == ')') {\n                    depth -= 1L;\n\
    \                }\n            }\n            result.Add(max_depth);\n      \
    \  }\n        return result;", "        var res = new List<long>();\n        var\
    \ paren_groups = paren_string.Split(' ');\n        foreach (var paren_group in\
    \ paren_groups) {\n            var max_depth = 0L;\n            var depth = 0L;\n\
    \            foreach (var c in paren_group) {\n                if (c == '(') {\n\
    \                    depth++;\n                    if (depth > max_depth) {\n\
    \                        max_depth = depth;\n                    }\n         \
    \       }\n                else if (c == ')') {\n                    depth--;\n\
    \                }\n            }\n            res.Add(max_depth);\n        }\n\
    \        return res;", "        var result = new List<long>();\n        var paren_groups\
    \ = paren_string.Split(' ');\n        foreach (var paren_group in paren_groups)\
    \ {\n            var max_depth = 0L;\n            var depth = 0L;\n          \
    \  foreach (var paren in paren_group) {\n                if (paren == '(') {\n\
    \                    depth++;\n                    if (depth > max_depth) {\n\
    \                        max_depth = depth;\n                    }\n         \
    \       } else if (paren == ')') {\n                    depth--;\n           \
    \     }\n            }\n            result.Add(max_depth);\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ max_depth = 0L;\n        long depth = 0L;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                depth++;\n                if\
    \ (depth > max_depth) {\n                    max_depth = depth;\n            \
    \    }\n            } else if (c == ')') {\n                depth--;\n       \
    \     } else if (c == ' ') {\n                result.Add(max_depth);\n       \
    \         max_depth = 0L;\n                depth = 0L;\n            }\n      \
    \  }\n        result.Add(max_depth);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0L;\n        long cur_depth\
    \ = 0L;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                cur_depth++;\n                if (cur_depth > max_depth)\
    \ {\n                    max_depth = cur_depth;\n                }\n         \
    \   } else if (c == ')') {\n                cur_depth--;\n            } else if\
    \ (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0L;\n                cur_depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var parens = new List<long>();\n        var\
    \ stack = new Stack<long>();\n        var max = 0L;\n        foreach (var c in\
    \ paren_string) {\n            if (c == '(') {\n                stack.Push(max);\n\
    \                max = 0;\n            } else if (c == ')') {\n              \
    \  parens.Add(max);\n                max = stack.Pop();\n            } else if\
    \ (c == ' ') {\n                max = Math.Max(max, stack.Peek());\n         \
    \   }\n        }\n        return parens;", "        List<long> result = new List<long>();\n\
    \        long depth = 0L;\n        long max_depth = 0L;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (c == ')') {\n                depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ var max_depth = 0L;\n        var depth = 0L;\n        var result = new List<long>();\n\
    \        foreach (var c in paren_string) {\n            if (c == '(') {\n    \
    \            depth++;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0L;\n                depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // >>> ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))\n        List<long> result = new List<long>();\n        long max_depth\
    \ = 0L;\n        long depth = 0L;\n        foreach (char c in paren_string) {\n\
    \            if (c == '(') {\n                depth++;\n                if (depth\
    \ > max_depth) {\n                    max_depth = depth;\n                }\n\
    \            }\n            else if (c == ')') {\n                depth--;\n \
    \           }\n            else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        // (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n        var\
    \ parens = paren_string.Split(' ');\n        var result = new List<long>();\n\
    \        foreach (var paren in parens) {\n            var count = 0L;\n      \
    \      var max = 0L;\n            foreach (var c in paren) {\n               \
    \ if (c == '(') {\n                    count++;\n                    if (count\
    \ > max) {\n                        max = count;\n                    }\n    \
    \            } else {\n                    count--;\n                }\n     \
    \       }\n            result.Add(max);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long depth = 0L;\n    \
    \    long max_depth = 0L;\n        foreach (char c in paren_string) {\n      \
    \      if (c == '(') {\n                depth++;\n                if (depth >\
    \ max_depth) {\n                    max_depth = depth;\n                }\n  \
    \          } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0L;\n                depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ paren_groups = paren_string.Split(' ');\n        foreach (var paren_group in\
    \ paren_groups) {\n            var max_nesting = 0L;\n            var current_nesting\
    \ = 0L;\n            foreach (var c in paren_group) {\n                if (c ==\
    \ '(') {\n                    current_nesting += 1L;\n                    max_nesting\
    \ = Math.Max(max_nesting, current_nesting);\n                }\n             \
    \   else if (c == ')') {\n                    current_nesting -= 1L;\n       \
    \         }\n            }\n            result.Add(max_nesting);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long depth = 0L;\n        long max_depth = 0L;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (c == ')') {\n                depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ // Fill in the code here.\n        List<long> result = new List<long>();\n \
    \       string[] groups = paren_string.Split(' ');\n        foreach (string group\
    \ in groups) {\n            long max_depth = 0;\n            long depth = 0;\n\
    \            foreach (char c in group) {\n                if (c == '(') {\n  \
    \                  depth += 1;\n                    if (depth > max_depth) {\n\
    \                        max_depth = depth;\n                    }\n         \
    \       } else if (c == ')') {\n                    depth -= 1;\n            \
    \    }\n            }\n            result.Add(max_depth);\n        }\n       \
    \ return result;", "        List<long> result = new List<long>();\n        int\
    \ max_depth = 0;\n        int depth = 0;\n        foreach (char c in paren_string)\
    \ {\n            if (c == '(') {\n                depth += 1;\n              \
    \  max_depth = Math.Max(max_depth, depth);\n            } else if (c == ')') {\n\
    \                depth -= 1;\n            } else if (c == ' ') {\n           \
    \     result.Add(max_depth);\n                max_depth = 0;\n               \
    \ depth = 0;\n            }\n        }\n        result.Add(max_depth);\n     \
    \   return result;", "        // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"\
    ))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n\
    \        var result = new List<long>();\n        var stack = new Stack<long>();\n\
    \        long max = 0L;\n        foreach (var c in paren_string) {\n         \
    \   if (c == '(') {\n                stack.Push(1L);\n            } else if (c\
    \ == ')') {\n                if (stack.Count == 0) {\n                    result.Add(max);\n\
    \                    max = 0L;\n                } else {\n                   \
    \ stack.Pop();\n                }\n            } else if (c == ' ') {\n      \
    \          if (stack.Count == 0) {\n                    result.Add(max);\n   \
    \                 max = 0L;\n                }\n            }\n            max\
    \ = Math.Max(max, stack.Count);\n        }\n        if (stack.Count == 0) {\n\
    \            result.Add(max);\n        }\n        return result;", "        //\
    \ >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        // (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n        List<long> result\
    \ = new List<long>();\n        long max_depth = 0L;\n        long depth = 0L;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             depth += 1L;\n                max_depth = Math.Max(max_depth, depth);\n\
    \            }\n            else if (c == ')') {\n                depth -= 1L;\n\
    \            }\n            else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        // (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n        List<long>\
    \ result = new List<long>();\n        // >>> ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        string[] groups = paren_string.Split(' ');\n\
    \        // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n       \
    \ // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n  \
    \      foreach (string group in groups) {\n            // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n            // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n            long max_depth = 0L;\n        \
    \    // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n           \
    \ // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n  \
    \          long current_depth = 0L;\n            // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n            // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n            foreach (char c in group) {\n \
    \               // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n\
    \                // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L,",
  "        // Write your code here\n        List<long> result = new List<long>();\n\
    \        string[] groups = paren_string.Split(' ');\n        foreach (string group\
    \ in groups) {\n            int max = 0;\n            int count = 0;\n       \
    \     foreach (char c in group) {\n                if (c == '(') {\n         \
    \           count++;\n                    if (count > max) {\n               \
    \         max = count;\n                    }\n                } else if (c ==\
    \ ')') {\n                    count--;\n                }\n            }\n   \
    \         result.Add(max);\n        }\n        return result;", "        // >>>\
    \ ParseNestedParens(\"(()()) ((())) () ((())()())\")\n        // (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n        var parens = paren_string.Split('\
    \ ');\n        var result = new List<long>();\n        foreach (var paren in parens)\
    \ {\n            var max_depth = 0L;\n            var depth = 0L;\n          \
    \  foreach (var c in paren) {\n                if (c == '(') {\n             \
    \       depth++;\n                    if (depth > max_depth) {\n             \
    \           max_depth = depth;\n                    }\n                } else\
    \ if (c == ')') {\n                    depth--;\n                }\n         \
    \   }\n            result.Add(max_depth);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max_depth = 0L;\n \
    \       long current_depth = 0L;\n        foreach (var c in paren_string) {\n\
    \            if (c == '(') {\n                current_depth += 1L;\n         \
    \       max_depth = Math.Max(max_depth, current_depth);\n            } else if\
    \ (c == ')') {\n                current_depth -= 1L;\n            } else if (c\
    \ == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0L;\n                current_depth = 0L;\n            }\n        }\n     \
    \   result.Add(max_depth);\n        return result;", "        // >>> ParseNestedParens((\"\
    (()()) ((())) () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)3L, (long)1L, (long)3L}))\n        var parens = paren_string.Split(' ');\n\
    \        var result = new List<long>();\n        foreach (var paren in parens)\
    \ {\n            var max_depth = 0L;\n            var depth = 0L;\n          \
    \  foreach (var c in paren) {\n                if (c == '(') {\n             \
    \       depth++;\n                    if (depth > max_depth) {\n             \
    \           max_depth = depth;\n                    }\n                } else\
    \ {\n                    depth--;\n                }\n            }\n        \
    \    result.Add(max_depth);\n        }\n        return result;", "        // >>>\
    \ ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n        // (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n        var parens = paren_string.Split('\
    \ ');\n        var max_nesting = new List<long>();\n        foreach (var paren\
    \ in parens) {\n            var max_nesting_in_paren = 0L;\n            var nesting\
    \ = 0L;\n            foreach (var c in paren) {\n                if (c == '(')\
    \ {\n                    nesting++;\n                    if (nesting > max_nesting_in_paren)\
    \ {\n                        max_nesting_in_paren = nesting;\n               \
    \     }\n                } else if (c == ')') {\n                    nesting--;\n\
    \                }\n            }\n            max_nesting.Add(max_nesting_in_paren);\n\
    \        }\n        return max_nesting;", "        List<long> result = new List<long>();\n\
    \        long max_depth = 0L;\n        long current_depth = 0L;\n        foreach\
    \ (char c in paren_string) {\n            if (c == '(') {\n                current_depth++;\n\
    \                if (current_depth > max_depth) {\n                    max_depth\
    \ = current_depth;\n                }\n            } else if (c == ')') {\n  \
    \              current_depth--;\n            } else if (c == ' ') {\n        \
    \        result.Add(max_depth);\n                max_depth = 0L;\n           \
    \     current_depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        // >>> ParseNestedParens((\"(()()) ((())) ()\
    \ ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L,\
    \ (long)3L}))\n        var parens = paren_string.Split(' ');\n        var result\
    \ = new List<long>();\n        foreach (var paren in parens) {\n            var\
    \ stack = new Stack<char>();\n            var max = 0L;\n            var current\
    \ = 0L;\n            foreach (var c in paren) {\n                if (c == '(')\
    \ {\n                    stack.Push(c);\n                    current += 1L;\n\
    \                    max = Math.Max(max, current);\n                } else if\
    \ (c == ')') {\n                    stack.Pop();\n                    current\
    \ -= 1L;\n                }\n            }\n            result.Add(max);\n   \
    \     }\n        return result;", "        List<long> max_levels = new List<long>();\n\
    \        long max_level = 0L;\n        long cur_level = 0L;\n        foreach (char\
    \ c in paren_string) {\n            if (c == '(') {\n                cur_level\
    \ += 1L;\n                if (cur_level > max_level) {\n                    max_level\
    \ = cur_level;\n                }\n            } else if (c == ')') {\n      \
    \          cur_level -= 1L;\n            } else if (c == ' ') {\n            \
    \    max_levels.Add(max_level);\n                max_level = 0L;\n           \
    \     cur_level = 0L;\n            }\n        }\n        max_levels.Add(max_level);\n\
    \        return max_levels;", "        // >>> ParseNestedParens((\"(()()) ((()))\
    \ () ((())()())\"))\n        // (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)1L, (long)3L}))\n        var result = new List<long>();\n        var paren_groups\
    \ = paren_string.Split(' ');\n        foreach (var paren_group in paren_groups)\
    \ {\n            var max_depth = 0L;\n            var current_depth = 0L;\n  \
    \          foreach (var paren in paren_group) {\n                if (paren ==\
    \ '(') {\n                    current_depth++;\n                    if (current_depth\
    \ > max_depth) {\n                        max_depth = current_depth;\n       \
    \             }\n                }\n                else if (paren == ')') {\n\
    \                    current_depth--;\n                }\n            }\n    \
    \        result.Add(max_depth);\n        }\n        return result;", "       \
    \ var result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_nesting\
    \ = 0L;\n            var current_nesting = 0L;\n            foreach (var paren\
    \ in paren_group) {\n                if (paren == '(') {\n                   \
    \ current_nesting++;\n                    max_nesting = Math.Max(max_nesting,\
    \ current_nesting);\n                } else if (paren == ')') {\n            \
    \        current_nesting--;\n                }\n            }\n            result.Add(max_nesting);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  List<long> result = new List<long>();\n        int max = 0;\n        int count\
    \ = 0;\n        for (int i = 0; i < paren_string.Length; i++)\n        {\n   \
    \         if (paren_string[i] == '(')\n            {\n                count++;\n\
    \                if (count > max)\n                {\n                    max\
    \ = count;\n                }\n            }\n            else if (paren_string[i]\
    \ == ')')\n            {\n                count--;\n            }\n          \
    \  else if (paren_string[i] == ' ')\n            {\n                result.Add(max);\n\
    \                max = 0;\n                count = 0;\n            }\n       \
    \ }\n        result.Add(max);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max_depth = 0L;\n        long depth = 0L;\n\
    \        foreach (char c in paren_string) {\n            if (c == '(') {\n   \
    \             depth++;\n                if (depth > max_depth) {\n           \
    \         max_depth = depth;\n                }\n            } else if (c == ')')\
    \ {\n                depth--;\n            } else if (c == ' ') {\n          \
    \      result.Add(max_depth);\n                max_depth = 0L;\n             \
    \   depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n  \
    \      return result;", "        var result = new List<long>();\n        var paren_groups\
    \ = paren_string.Split(' ');\n        foreach (var paren_group in paren_groups)\
    \ {\n            var max_nesting = 0L;\n            var current_nesting = 0L;\n\
    \            foreach (var c in paren_group) {\n                if (c == '(') {\n\
    \                    current_nesting++;\n                    max_nesting = Math.Max(max_nesting,\
    \ current_nesting);\n                } else if (c == ')') {\n                \
    \    current_nesting--;\n                }\n            }\n            result.Add(max_nesting);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        var stack = new Stack<char>();\n        var max = 0;\n        foreach\
    \ (var c in paren_string) {\n            if (c == '(') {\n                stack.Push(c);\n\
    \                max = Math.Max(max, stack.Count);\n            } else if (c ==\
    \ ')') {\n                stack.Pop();\n            } else if (c == ' ') {\n \
    \               result.Add(max);\n                max = 0;\n            }\n  \
    \      }\n        result.Add(max);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max_depth = 0L;\n        long cur_depth\
    \ = 0L;\n        foreach (char c in paren_string) {\n            if (c == '(')\
    \ {\n                cur_depth++;\n                if (cur_depth > max_depth)\
    \ {\n                    max_depth = cur_depth;\n                }\n         \
    \   } else if (c == ')') {\n                cur_depth--;\n            } else if\
    \ (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0L;\n                cur_depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max_depth = 0L;\n        long depth = 0L;\n        foreach (char c\
    \ in paren_string) {\n            if (c == '(') {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                }\n            } else if (c == ')') {\n                depth--;\n\
    \            } else if (c == ' ') {\n                result.Add(max_depth);\n\
    \                max_depth = 0L;\n                depth = 0L;\n            }\n\
    \        }\n        result.Add(max_depth);\n        return result;", "       \
    \ var result = new List<long>();\n        var paren_groups = paren_string.Split('\
    \ ');\n        foreach (var paren_group in paren_groups) {\n            var max_nesting\
    \ = 0L;\n            var current_nesting = 0L;\n            foreach (var paren\
    \ in paren_group) {\n                if (paren == '(') {\n                   \
    \ current_nesting++;\n                    max_nesting = Math.Max(max_nesting,\
    \ current_nesting);\n                } else if (paren == ')') {\n            \
    \        current_nesting--;\n                }\n            }\n            result.Add(max_nesting);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        var parens = paren_string.Split(' ');\n        foreach (var paren in\
    \ parens) {\n            var max_depth = 0L;\n            var depth = 0L;\n  \
    \          foreach (var c in paren) {\n                if (c == '(') {\n     \
    \               depth++;\n                    if (depth > max_depth) {\n     \
    \                   max_depth = depth;\n                    }\n              \
    \  }\n                else {\n                    depth--;\n                }\n\
    \            }\n            result.Add(max_depth);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        int max =\
    \ 0;\n        int count = 0;\n        for (int i = 0; i < paren_string.Length;\
    \ i++) {\n            if (paren_string[i] == '(') {\n                count++;\n\
    \                if (count > max) {\n                    max = count;\n      \
    \          }\n            } else if (paren_string[i] == ')') {\n             \
    \   count--;\n            } else if (paren_string[i] == ' ') {\n             \
    \   result.Add(max);\n                max = 0;\n                count = 0;\n \
    \           }\n        }\n        result.Add(max);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long depth = 0L;\n    \
    \    long max_depth = 0L;\n        foreach (char c in paren_string) {\n      \
    \      if (c == '(') {\n                depth++;\n                if (depth >\
    \ max_depth) {\n                    max_depth = depth;\n                }\n  \
    \          } else if (c == ')') {\n                depth--;\n            } else\
    \ if (c == ' ') {\n                result.Add(max_depth);\n                max_depth\
    \ = 0L;\n                depth = 0L;\n            }\n        }\n        result.Add(max_depth);\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
