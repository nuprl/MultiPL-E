language: cs
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var maxes = new List<long>();\n        var max = numbers[0];\n
    \       maxes.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n            if
    (numbers[i] > max) {\n                max = numbers[i];\n            }\n            maxes.Add(max);\n
    \       }\n        return maxes;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f1d81ac57ce54c8b9639be45b5d12fae>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f1d81ac57ce54c8b9639be45b5d12fae>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f1d81ac57ce54c8b9639be45b5d12fae>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f1d81ac57ce54c8b9639be45b5d12fae>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = new List<long>();\n        long currentMax = numbers[0];\n
    \       max.Add(currentMax);\n        for (int i = 1; i < numbers.Count; i++)
    {\n            if (numbers[i] > currentMax) {\n                currentMax = numbers[i];\n
    \           }\n            max.Add(currentMax);\n        }\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0dd5b292023741ab88eb27357f0e414e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0dd5b292023741ab88eb27357f0e414e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0dd5b292023741ab88eb27357f0e414e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0dd5b292023741ab88eb27357f0e414e>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = new List<long>();\n        long currentMax = numbers[0];\n
    \       max.Add(currentMax);\n        for (int i = 1; i < numbers.Count; i++)
    {\n            if (numbers[i] > currentMax) {\n                currentMax = numbers[i];\n
    \           }\n            max.Add(currentMax);\n        }\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0dd5b292023741ab88eb27357f0e414e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0dd5b292023741ab88eb27357f0e414e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0dd5b292023741ab88eb27357f0e414e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0dd5b292023741ab88eb27357f0e414e>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> maxes = new List<long>();\n        long currentMax
    = numbers[0];\n        maxes.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            maxes.Add(currentMax);\n        }\n
    \       return maxes;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3295a6caf88e4aa3807a23b43934db46>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3295a6caf88e4aa3807a23b43934db46>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3295a6caf88e4aa3807a23b43934db46>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3295a6caf88e4aa3807a23b43934db46>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            currentMax = Math.Max(currentMax, numbers[i]);\n            result.Add(currentMax);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b60a2353c1324c8a9ddd471bccdd1af6>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b60a2353c1324c8a9ddd471bccdd1af6>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b60a2353c1324c8a9ddd471bccdd1af6>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b60a2353c1324c8a9ddd471bccdd1af6>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = new List<long>();\n        long currentMax = numbers[0];\n
    \       max.Add(currentMax);\n        for (int i = 1; i < numbers.Count; i++)
    {\n            if (numbers[i] > currentMax) {\n                currentMax = numbers[i];\n
    \           }\n            max.Add(currentMax);\n        }\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0dd5b292023741ab88eb27357f0e414e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0dd5b292023741ab88eb27357f0e414e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0dd5b292023741ab88eb27357f0e414e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0dd5b292023741ab88eb27357f0e414e>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long currentMax =
    numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long currentMax =
    numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long currentMax =
    numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           var n = numbers[i];\n            if (n > max) {\n                max
    = n;\n            }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <ec6546eb6f98493d9859ba49d05ba6ea>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ec6546eb6f98493d9859ba49d05ba6ea>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <ec6546eb6f98493d9859ba49d05ba6ea>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <ec6546eb6f98493d9859ba49d05ba6ea>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long currentMax =
    numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long maxSoFar
    = numbers[0];\n        result.Add(maxSoFar);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > maxSoFar) {\n                maxSoFar = numbers[i];\n
    \           }\n            result.Add(maxSoFar);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <4c828b46f9514f7c909df705ed166da3>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <4c828b46f9514f7c909df705ed166da3>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <4c828b46f9514f7c909df705ed166da3>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <4c828b46f9514f7c909df705ed166da3>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = 0;\n        foreach
    (var n in numbers) {\n            max = Math.Max(max, n);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9bbc7b545824acbb5a777bdef403c2d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b9bbc7b545824acbb5a777bdef403c2d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var maxSoFar = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(maxSoFar);\n        for (int i = 1; i < numbers.Count; i++)
    {\n            maxSoFar = Math.Max(maxSoFar, numbers[i]);\n            result.Add(maxSoFar);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <0295cbe981284b6ba38d017b6cf92a50>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0295cbe981284b6ba38d017b6cf92a50>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <0295cbe981284b6ba38d017b6cf92a50>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0295cbe981284b6ba38d017b6cf92a50>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        for (int i = 0; i < numbers.Count; i++) {\n            max
    = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <9f2eaa3cf9834896aabdb62de8cbb5a4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9f2eaa3cf9834896aabdb62de8cbb5a4>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <9f2eaa3cf9834896aabdb62de8cbb5a4>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <9f2eaa3cf9834896aabdb62de8cbb5a4>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var maxes = new List<long>();\n        long max = numbers[0];\n
    \       maxes.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n            if
    (numbers[i] > max) {\n                max = numbers[i];\n            }\n            maxes.Add(max);\n
    \       }\n        return maxes;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <cc8189bf258c48cdaa1496bac0ad7ef1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long currentMax
    = numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <2e584f5162a04f6092bda554a6dd71d0>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> res = new List<long>();\n        long max = numbers[0];\n
    \       res.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n            if
    (numbers[i] > max) {\n                max = numbers[i];\n            }\n            res.Add(max);\n
    \       }\n        return res;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <bc34e8412f674f3ab13cb84e3da4eef7>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <bc34e8412f674f3ab13cb84e3da4eef7>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <bc34e8412f674f3ab13cb84e3da4eef7>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <bc34e8412f674f3ab13cb84e3da4eef7>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = new List<long>();\n        var currentMax = numbers[0];\n
    \       max.Add(currentMax);\n        for (int i = 1; i < numbers.Count; i++)
    {\n            if (numbers[i] > currentMax) {\n                currentMax = numbers[i];\n
    \           }\n            max.Add(currentMax);\n        }\n        return max;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <dfc526c787eb465f840c6ad7b8dbb6c5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <dfc526c787eb465f840c6ad7b8dbb6c5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <dfc526c787eb465f840c6ad7b8dbb6c5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <dfc526c787eb465f840c6ad7b8dbb6c5>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> rollingMax = new List<long>();\n        long max
    = numbers[0];\n        rollingMax.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            rollingMax.Add(max);\n        }\n        return rollingMax;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f217c6d28bbc4cb28951e994ce685616>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f217c6d28bbc4cb28951e994ce685616>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f217c6d28bbc4cb28951e994ce685616>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f217c6d28bbc4cb28951e994ce685616>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var maxes = new List<long>();\n        long currentMax = numbers[0];\n
    \       maxes.Add(currentMax);\n        for (int i = 1; i < numbers.Count; i++)
    {\n            if (numbers[i] > currentMax) {\n                currentMax = numbers[i];\n
    \           }\n            maxes.Add(currentMax);\n        }\n        return maxes;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3483d846ef734708924ad6b7f033b62e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3483d846ef734708924ad6b7f033b62e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3483d846ef734708924ad6b7f033b62e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3483d846ef734708924ad6b7f033b62e>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long currentMax =
    numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            max = Math.Max(max, numbers[i]);\n            result.Add(max);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b850238bdf9f44aea7a64116731de81a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <b850238bdf9f44aea7a64116731de81a>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <90e5c13429a54af7bdf80b8fcb3d00f2>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var maxes = new List<long>();\n        long currentMax = numbers[0];\n
    \       maxes.Add(currentMax);\n        for (int i = 1; i < numbers.Count; i++)
    {\n            currentMax = Math.Max(currentMax, numbers[i]);\n            maxes.Add(currentMax);\n
    \       }\n        return maxes;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <8ed3fabbb2654f1f93bcb3ee070c2b91>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <8ed3fabbb2654f1f93bcb3ee070c2b91>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <8ed3fabbb2654f1f93bcb3ee070c2b91>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <8ed3fabbb2654f1f93bcb3ee070c2b91>:0
    \n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var maxes = new List<long>();\n        long currentMax = numbers[0];\n
    \       maxes.Add(currentMax);\n        for (int i = 1; i < numbers.Count; i++)
    {\n            if (numbers[i] > currentMax) {\n                currentMax = numbers[i];\n
    \           }\n            maxes.Add(currentMax);\n        }\n        return maxes;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3483d846ef734708924ad6b7f033b62e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3483d846ef734708924ad6b7f033b62e>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <3483d846ef734708924ad6b7f033b62e>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3483d846ef734708924ad6b7f033b62e>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long currentMax =
    numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long currentMax =
    numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var max = numbers[0];\n        var result = new List<long>();\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00001] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <857c8e12ca8e4a06aef0cc960effd3c9>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        List<long> result = new List<long>();\n        long max =
    numbers[0];\n        result.Add(max);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n
    \           }\n            result.Add(max);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new
    List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5c400f7eca7a4f7d9b70132bb6f1bb74>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <df9c9b22efcd4cb3b0cc9c9355de2301>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long currentMax =
    numbers[0];\n        result.Add(currentMax);\n        for (int i = 1; i < numbers.Count;
    i++) {\n            if (numbers[i] > currentMax) {\n                currentMax
    = numbers[i];\n            }\n            result.Add(currentMax);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <0e4f59b96fc64a33a0f069fa974055fc>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        long max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           if (numbers[i] > max) {\n                max = numbers[i];\n            }\n
    \           result.Add(max);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,
    (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L,
    (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L,
    (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L,
    (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <40ba888c5de5416eb5a8337f40afefb1>:0
    \n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // From a given list of integers, generate a list of rolling maximum
    element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L,
    (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long>
    numbers) {\n        var result = new List<long>();\n        var max = numbers[0];\n
    \       result.Add(max);\n        for (int i = 1; i < numbers.Count; i++) {\n
    \           max = Math.Max(max, numbers[i]);\n            result.Add(max);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n
    \   Debug.Assert(RollingMax((new List<long>(new long[]{(long)3L, (long)2L, (long)3L,
    (long)100L, (long)3L}))).Equals((new List<long>(new long[]{(long)3L, (long)3L,
    (long)3L, (long)100L, (long)100L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax
    (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <5d0d9a9703e74f0bb56790b545339400>:0
    \n"
  stdout: ''
  timestamp: 1659795074
