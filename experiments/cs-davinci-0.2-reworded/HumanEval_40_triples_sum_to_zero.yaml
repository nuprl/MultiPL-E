name: HumanEval_40_triples_sum_to_zero
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // triples_sum_to_zero takes a list of integers as an input.\n\
  \    // it returns true if there are three distinct elements in the list that\n\
  \    // sum to zero, and false otherwise.\n    // >>> TriplesSumToZero((new List<long>(new\
  \ long[]{(long)1L, (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>>\
  \ TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n\
  \    // (true)\n    // >>> TriplesSumToZero((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)7L})))\n    // (false)\n    // >>> TriplesSumToZero((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)9L, (long)7L})))\n\
  \    // (true)\n    // >>> TriplesSumToZero((new List<long>(new long[]{(long)1L})))\n\
  \    // (false)\n    public static bool TriplesSumToZero(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriplesSumToZero((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
  \    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)5L, (long)-1L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new\
  \ long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (true));\n    Debug.Assert(TriplesSumToZero((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n\
  \    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)5L, (long)7L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)9L, (long)7L}))) == (true));\n\
  \    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n\
  \    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)5L, (long)-100L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new\
  \ List<long>(new long[]{(long)100L, (long)3L, (long)5L, (long)-100L}))) == (false));\n\
  \    }\n\n}\n"
completions: ["        // your code here\n        return false;", "        // YOUR\
    \ CODE HERE\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        if (l.Count < 3) {\n           \
    \ return false;\n        }\n        long[] a = l.ToArray();\n        Array.Sort(a);\n\
    \        for (int i = 0; i < a.Length; i++) {\n            int j = i + 1;\n  \
    \          int k = a.Length - 1;\n            while (j < k) {\n              \
    \  long sum = a[i] + a[j] + a[k];\n                if (sum == 0) {\n         \
    \           return true;\n                }\n                if (sum > 0) {\n\
    \                    k--;\n                } else {\n                    j++;\n\
    \                }\n            }\n        }\n        return false;", "      \
    \  // Your code here\n        return false;", "        // your code here\n   \
    \     return false;", "        // your code here\n        return false;", "  \
    \      // your code here\n        return false;", "        if (l.Count < 3) {\n\
    \            return false;\n        }\n        l.Sort();\n        for (long i\
    \ = 0; i < l.Count; i++) {\n            for (long j = i + 1; j < l.Count; j++)\
    \ {\n                for (long k = j + 1; k < l.Count; k++) {\n              \
    \      if (l[(int)i] + l[(int)j] + l[(int)k] == 0) {\n                       \
    \ return true;\n                    }\n                }\n            }\n    \
    \    }\n        return false;", "        // your code here\n        return false;",
  "        // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        var s = new HashSet<long>();\n        foreach\
    \ (var x in l) {\n            if (s.Contains(x)) {\n                return true;\n\
    \            }\n            s.Add(-x);\n        }\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // Your code here.\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        if (l.Count < 3) {\n            return false;\n\
    \        }\n        l.Sort();\n        for (int i = 0; i < l.Count; i++) {\n \
    \           for (int j = i + 1; j < l.Count; j++) {\n                if (l.BinarySearch(-(l[i]\
    \ + l[j])) >= 0) {\n                    return true;\n                }\n    \
    \        }\n        }\n        return false;", "        // your code here\n  \
    \      return false;", "        // your code here\n        return false;", " \
    \       var s = new HashSet<long>();\n        foreach (var x in l) {\n       \
    \     if (s.Contains(-x)) {\n                return true;\n            }\n   \
    \         s.Add(x);\n        }\n        return false;", "        // your code\
    \ here\n        return false;", "        if (l.Count < 3) {\n            return\
    \ false;\n        }\n        l.Sort();\n        for (int i = 0; i < l.Count; i++)\
    \ {\n            for (int j = i + 1; j < l.Count; j++) {\n                for\
    \ (int k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k]\
    \ == 0) {\n                        return true;\n                    }\n     \
    \           }\n            }\n        }\n        return false;", "        if (l.Count\
    \ < 3) {\n            return false;\n        }\n        l.Sort();\n        for\
    \ (long i = 0; i < l.Count; i++) {\n            long j = i + 1;\n            long\
    \ k = l.Count - 1;\n            while (j < k) {\n                if (l[i] + l[j]\
    \ + l[k] == 0) {\n                    return true;\n                }\n      \
    \          else if (l[i] + l[j] + l[k] < 0) {\n                    j++;\n    \
    \            }\n                else {\n                    k--;\n           \
    \     }\n            }\n        }\n        return false;", "        // your code\
    \ here\n        return false;", '        return false;', "        // your code\
    \ here\n        return false;", "        // your code here\n        return false;",
  "        // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       if (l.Count < 3) {\n            return false;\n        }\n        l.Sort();\n\
    \        for (int i = 0; i < l.Count - 2; i++) {\n            int j = i + 1;\n\
    \            int k = l.Count - 1;\n            while (j < k) {\n             \
    \   long sum = l[i] + l[j] + l[k];\n                if (sum == 0) {\n        \
    \            return true;\n                }\n                else if (sum < 0)\
    \ {\n                    j++;\n                }\n                else {\n   \
    \                 k--;\n                }\n            }\n        }\n        return\
    \ false;", "        if (l.Count < 3) {\n            return false;\n        }\n\
    \        l.Sort();\n        for (int i = 0; i < l.Count; i++) {\n            int\
    \ j = i + 1;\n            int k = l.Count - 1;\n            while (j < k) {\n\
    \                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n\
    \                }\n                else if (l[i] + l[j] + l[k] < 0) {\n     \
    \               j++;\n                }\n                else {\n            \
    \        k--;\n                }\n            }\n        }\n        return false;",
  "        if (l.Count < 3) {\n            return false;\n        }\n        l.Sort();\n\
    \        for (int i = 0; i < l.Count - 2; i++) {\n            int j = i + 1;\n\
    \            int k = l.Count - 1;\n            while (j < k) {\n             \
    \   long sum = l[i] + l[j] + l[k];\n                if (sum == 0) {\n        \
    \            return true;\n                }\n                else if (sum < 0)\
    \ {\n                    j++;\n                }\n                else {\n   \
    \                 k--;\n                }\n            }\n        }\n        return\
    \ false;", "        if (l.Count < 3) {\n            return false;\n        }\n\
    \        l.Sort();\n        for (int i = 0; i < l.Count - 2; i++) {\n        \
    \    int j = i + 1;\n            int k = l.Count - 1;\n            while (j <\
    \ k) {\n                long sum = l[i] + l[j] + l[k];\n                if (sum\
    \ == 0) {\n                    return true;\n                }\n             \
    \   else if (sum < 0) {\n                    j++;\n                }\n       \
    \         else {\n                    k--;\n                }\n            }\n\
    \        }\n        return false;", "        if (l.Count < 3) {\n            return\
    \ false;\n        }\n        for (int i = 0; i < l.Count; i++) {\n           \
    \ for (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1;\
    \ k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n  \
    \                      return true;\n                    }\n                }\n\
    \            }\n        }\n        return false;", "        if (l.Count < 3) {\n\
    \            return false;\n        }\n        l.Sort();\n        for (int i =\
    \ 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n\
    \                for (int k = j + 1; k < l.Count; k++) {\n                   \
    \ if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ false;", "        // TODO: implement this function\n        return false;",
  "        // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        if (l.Count < 3) {\n            return false;\n\
    \        }\n        l.Sort();\n        long a = 0L;\n        long b = 0L;\n  \
    \      long c = 0L;\n        long sum = 0L;\n        for (long i = 0L; i < l.Count;\
    \ i++) {\n            a = l[(int)i];\n            for (long j = i + 1L; j < l.Count;\
    \ j++) {\n                b = l[(int)j];\n                for (long k = j + 1L;\
    \ k < l.Count; k++) {\n                    c = l[(int)k];\n                  \
    \  sum = a + b + c;\n                    if (sum == 0L) {\n                  \
    \      return true;\n                    }\n                }\n            }\n\
    \        }\n        return false;", "        if (l.Count < 3) {\n            return\
    \ false;\n        }\n        l.Sort();\n        for (int i = 0; i < l.Count; i++)\
    \ {\n            int j = i + 1;\n            int k = l.Count - 1;\n          \
    \  while (j < k) {\n                if (l[i] + l[j] + l[k] == 0) {\n         \
    \           return true;\n                }\n                else if (l[i] + l[j]\
    \ + l[k] < 0) {\n                    j++;\n                }\n               \
    \ else {\n                    k--;\n                }\n            }\n       \
    \ }\n        return false;", "        // your code here\n        return false;",
  "        if (l.Count < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++)\
    \ {\n                for (int k = j + 1; k < l.Count; k++) {\n               \
    \     if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ false;", "        if (l.Count < 3) {\n            return false;\n        }\n\
    \        l.Sort();\n        for (int i = 0; i < l.Count; i++) {\n            long\
    \ a = l[i];\n            int j = i + 1;\n            int k = l.Count - 1;\n  \
    \          while (j < k) {\n                long b = l[j];\n                long\
    \ c = l[k];\n                if (a + b + c == 0) {\n                    return\
    \ true;\n                }\n                else if (a + b + c < 0) {\n      \
    \              j++;\n                }\n                else {\n             \
    \       k--;\n                }\n            }\n        }\n        return false;",
  "        // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        if (l.Count < 3) {\n            return false;\n\
    \        }\n        l.Sort();\n        for (int i = 0; i < l.Count; i++) {\n \
    \           for (int j = i + 1; j < l.Count; j++) {\n                for (int\
    \ k = j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] ==\
    \ 0) {\n                        return true;\n                    }\n        \
    \        }\n            }\n        }\n        return false;", "        // your\
    \ code here\n        return false;", "        // your code here\n        return\
    \ false;", "        // your code here\n        return false;", "        if (l.Count\
    \ < 3) {\n            return false;\n        }\n        var s = new HashSet<long>();\n\
    \        foreach (var x in l) {\n            s.Add(x);\n        }\n        foreach\
    \ (var x in l) {\n            foreach (var y in l) {\n                if (x !=\
    \ y) {\n                    if (s.Contains(-(x + y))) {\n                    \
    \    return true;\n                    }\n                }\n            }\n \
    \       }\n        return false;", "        // your code here\n        return\
    \ false;", "        var r = new List<long>();\n        foreach (var i in l) {\n\
    \            r.Add(i);\n        }\n        r.Sort();\n        for (var i = 0;\
    \ i < r.Count; i++) {\n            for (var j = i + 1; j < r.Count; j++) {\n \
    \               for (var k = j + 1; k < r.Count; k++) {\n                    if\
    \ (r[i] + r[j] + r[k] == 0L) {\n                        return true;\n       \
    \             }\n                }\n            }\n        }\n        return false;",
  "        if (l.Count < 3) {\n            return false;\n        }\n        l.Sort();\n\
    \        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1;\
    \ j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n\
    \                    if (l[i] + l[j] + l[k] == 0) {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;", "        if (l.Count < 3) {\n            return false;\n\
    \        }\n        l.Sort();\n        long i = 0L;\n        long j = 0L;\n  \
    \      long k = 0L;\n        long n = l.Count;\n        while (i < n) {\n    \
    \        j = i + 1L;\n            while (j < n) {\n                k = j + 1L;\n\
    \                while (k < n) {\n                    if (l[(int)i] + l[(int)j]\
    \ + l[(int)k] == 0L) {\n                        return true;\n               \
    \     }\n                    k++;\n                }\n                j++;\n \
    \           }\n            i++;\n        }\n        return false;", "        //\
    \ your code here\n        return false;", "        // your code here\n       \
    \ return false;", "        long n = (long)l.Count;\n        long i = (long)0L;\n\
    \        while (i < n)\n        {\n            long j = (long)i + (long)1L;\n\
    \            while (j < n)\n            {\n                long k = (long)j +\
    \ (long)1L;\n                while (k < n)\n                {\n              \
    \      if (l[(int)i] + l[(int)j] + l[(int)k] == (long)0L)\n                  \
    \  {\n                        return true;\n                    }\n\n        \
    \            k = k + (long)1L;\n\n                }\n\n\n                j = j\
    \ + (long)1L;\n\n            }\n\n\n            i = i + (long)1L;\n\n        }\n\
    \n\n        return false;\n", "        // your code here\n        return false;",
  "        if (l.Count < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++)\
    \ {\n                for (int k = j + 1; k < l.Count; k++) {\n               \
    \     if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ false;", "        if (l.Count < 3) {\n            return false;\n        }\n\
    \        else {\n            var h = new Dictionary<long, long>();\n         \
    \   foreach (var x in l) {\n                if (h.ContainsKey(x)) {\n        \
    \            h[x] = h[x] + 1L;\n                }\n                else {\n  \
    \                  h[x] = 1L;\n                }\n            }\n            foreach\
    \ (var x in l) {\n                foreach (var y in l) {\n                   \
    \ if (x == y) {\n                        if (h[x] > 1L) {\n                  \
    \          if (h.ContainsKey(-(x + y))) {\n                                return\
    \ true;\n                            }\n                        }\n          \
    \          }\n                    else {\n                        if (h.ContainsKey(-(x\
    \ + y))) {\n                            return true;\n                       \
    \ }\n                    }\n                }\n            }\n            return\
    \ false;\n        }", "        // your code here\n        return false;", "  \
    \      // Your code here.\n        return false;", "        if (l.Count < 3) {\n\
    \            return false;\n        }\n        l.Sort();\n        for (int i =\
    \ 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++) {\n\
    \                for (int k = j + 1; k < l.Count; k++) {\n                   \
    \ if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ false;", "        if (l.Count < 3) {\n            return false;\n        }\n\
    \        l.Sort();\n        for (int i = 0; i < l.Count; i++) {\n            for\
    \ (int j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k <\
    \ l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n      \
    \                  return true;\n                    }\n                }\n  \
    \          }\n        }\n        return false;", "        long i = 0L;\n     \
    \   long j = 0L;\n        long k = 0L;\n        long n = (long)l.Count;\n    \
    \    while ((i < n)) {\n            j = (i + 1L);\n            while ((j < n))\
    \ {\n                k = (j + 1L);\n                while ((k < n)) {\n      \
    \              if (((l[(int)i] + l[(int)j]) + l[(int)k]) == 0L) {\n          \
    \              return true;\n                    }\n                    k = (k\
    \ + 1L);\n                }\n                j = (j + 1L);\n            }\n  \
    \          i = (i + 1L);\n        }\n        return false;", "        // your\
    \ code here\n        return false;", "        if (l.Count < 3) {\n           \
    \ return false;\n        }\n        for (int i = 0; i < l.Count; i++) {\n    \
    \        for (int j = i + 1; j < l.Count; j++) {\n                for (int k =\
    \ j + 1; k < l.Count; k++) {\n                    if (l[i] + l[j] + l[k] == 0)\
    \ {\n                        return true;\n                    }\n           \
    \     }\n            }\n        }\n        return false;", "        var s = new\
    \ HashSet<long>();\n        foreach (var x in l) {\n            if (s.Contains(-x))\
    \ {\n                return true;\n            }\n            s.Add(x);\n    \
    \    }\n        return false;", "        if (l.Count < 3) {\n            return\
    \ false;\n        }\n        l.Sort();\n        for (int i = 0; i < l.Count; i++)\
    \ {\n            int j = i + 1;\n            int k = l.Count - 1;\n          \
    \  while (j < k) {\n                long sum = l[i] + l[j] + l[k];\n         \
    \       if (sum == 0) {\n                    return true;\n                }\n\
    \                if (sum > 0) {\n                    k--;\n                } else\
    \ {\n                    j++;\n                }\n            }\n        }\n \
    \       return false;", "        // your code here\n        return false;", " \
    \       // your code here\n        return false;", "        // your code here\n\
    \        return false;", "        // your code here\n        return false;", " \
    \       if (l.Count < 3) {\n            return false;\n        }\n        for\
    \ (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count;\
    \ j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n          \
    \          if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;", "        for (int i = 0; i < l.Count; i++) {\n            for (int\
    \ j = i + 1; j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count;\
    \ k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n               \
    \         return true;\n                    }\n                }\n           \
    \ }\n        }\n        return false;", "        // your code here\n        return\
    \ false;", "        if (l.Count < 3) {\n            return false;\n        }\n\
    \        for (int i = 0; i < l.Count; i++) {\n            for (int j = i + 1;\
    \ j < l.Count; j++) {\n                for (int k = j + 1; k < l.Count; k++) {\n\
    \                    if (l[i] + l[j] + l[k] == 0) {\n                        return\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        return false;", "        if (l.Count < 3) {\n            return false;\n\
    \        }\n        l.Sort();\n        for (int i = 0; i < l.Count; i++) {\n \
    \           int j = i + 1;\n            int k = l.Count - 1;\n            while\
    \ (j < k) {\n                long sum = l[i] + l[j] + l[k];\n                if\
    \ (sum == 0) {\n                    return true;\n                }\n        \
    \        if (sum > 0) {\n                    k--;\n                } else {\n\
    \                    j++;\n                }\n            }\n        }\n     \
    \   return false;", "        var s = new HashSet<long>();\n        foreach (var\
    \ x in l) {\n            if (s.Contains(-x)) {\n                return true;\n\
    \            }\n            foreach (var y in s) {\n                if (s.Contains(x\
    \ - y)) {\n                    return true;\n                }\n            }\n\
    \            s.Add(x);\n        }\n        return false;", "        // your code\
    \ here\n        return false;", "        // your code here\n        return false;",
  "        if (l.Count < 3) {\n            return false;\n        }\n        for (int\
    \ i = 0; i < l.Count; i++) {\n            for (int j = i + 1; j < l.Count; j++)\
    \ {\n                for (int k = j + 1; k < l.Count; k++) {\n               \
    \     if (l[i] + l[j] + l[k] == 0) {\n                        return true;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ false;", "        // your code here\n        return false;", "        // your\
    \ code here\n        return false;", "        var n = l.Count;\n        if (n\
    \ < 3) {\n            return false;\n        }\n        var s = new HashSet<long>();\n\
    \        for (var i = 0; i < n; i++) {\n            s.Add(l[i]);\n        }\n\
    \        for (var i = 0; i < n; i++) {\n            for (var j = i + 1; j < n;\
    \ j++) {\n                var a = l[i];\n                var b = l[j];\n     \
    \           var c = -(a + b);\n                if (s.Contains(c)) {\n        \
    \            return true;\n                }\n            }\n        }\n     \
    \   return false;", "        // your code here\n        return false;", "    \
    \    if (l.Count < 3) {\n            return false;\n        }\n        l.Sort();\n\
    \        for (int i = 0; i < l.Count - 2; i++) {\n            for (int j = i +\
    \ 1; j < l.Count - 1; j++) {\n                for (int k = j + 1; k < l.Count;\
    \ k++) {\n                    if (l[i] + l[j] + l[k] == 0) {\n               \
    \         return true;\n                    }\n                }\n           \
    \ }\n        }\n        return false;"]
stop_tokens:
- "\n    }\n"
