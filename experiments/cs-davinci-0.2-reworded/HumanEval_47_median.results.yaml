language: cs
name: HumanEval_47_median
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n       \
    \ }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int len = l.Count;\n\
    \        if (len % 2 == 1) {\n            return (float)l[len / 2];\n        }\n\
    \        else {\n            return (float)((l[len / 2] + l[len / 2 - 1]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int mid = l.Count\
    \ / 2;\n        if (l.Count % 2 == 1) {\n            return (float)l[mid];\n \
    \       }\n        else {\n            return (float)(l[mid - 1] + l[mid]) / 2;\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)((l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0);\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ % 2 == 1) {\n            return (float)l[n / 2];\n        }\n        else {\n\
    \            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fd9719c1da5a4f76b8ac2932514fc31d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fd9719c1da5a4f76b8ac2932514fc31d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        if (l.Count == 0) {\n         \
    \   return 0;\n        }\n        l.Sort();\n        if (l.Count % 2 == 1) {\n\
    \            return l[l.Count / 2];\n        }\n        else {\n            return\
    \ (l[l.Count / 2 - 1] + l[l.Count / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if ((l.Count\
    \ % 2L) == 0L) {\n            return ((float)((l[(l.Count / 2L) - 1L] + l[l.Count\
    \ / 2L])) / 2f);\n        }\n\n        return (float)l[l.Count / 2L];\n\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe86h2c74.cs(17,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpe86h2c74.cs(17,57): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpe86h2c74.cs(20,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n       \
    \ }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        if (n == 1) {\n         \
    \   return l[0];\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n  \
    \          return l[n / 2];\n        }\n        else {\n            return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L,\
    \ (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L,\
    \ (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int len = l.Count;\n\
    \        if (len % 2 == 1) {\n            return (float)l[len / 2];\n        }\n\
    \        else {\n            return (float)(l[len / 2 - 1] + l[len / 2]) / 2;\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        if (l.Count == 0) {\n         \
    \   return 0;\n        }\n        l.Sort();\n        if (l.Count % 2 == 1) {\n\
    \            return l[l.Count / 2];\n        }\n        else {\n            return\
    \ (l[l.Count / 2 - 1] + l[l.Count / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n       \
    \ }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n       \
    \ }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if ((l.Count\
    \ % 2L) == 0L) {\n            return ((float)(l[(l.Count / 2L) - 1L] + l[l.Count\
    \ / 2L]) / 2f);\n        }\n\n        return (float)l[l.Count / 2L];\n\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxzmw8w25.cs(17,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxzmw8w25.cs(17,56): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxzmw8w25.cs(20,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        var sorted = l.OrderBy((long x)\
    \ => x).ToList();\n        var mid = sorted.Count / 2;\n        if (sorted.Count\
    \ % 2 == 0) {\n            return (float)(sorted[mid - 1] + sorted[mid]) / 2;\n\
    \        }\n        else {\n            return (float)sorted[mid];\n        }\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        if (n == 1) {\n         \
    \   return l[0];\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n  \
    \          return l[n / 2];\n        }\n        else {\n            return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L,\
    \ (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L,\
    \ (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        var n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return l[n / 2];\n        }\n        else\
    \ {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n       \
    \ }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        if (l.Count == 0) {\n         \
    \   return 0;\n        }\n        l.Sort();\n        if (l.Count % 2 == 1) {\n\
    \            return l[l.Count / 2];\n        }\n        else {\n            return\
    \ (l[l.Count / 2 - 1] + l[l.Count / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n       \
    \ }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int len = l.Count;\n\
    \        if (len % 2 == 1) {\n            return (float)l[len / 2];\n        }\n\
    \        else {\n            return (float)(l[len / 2 - 1] + l[len / 2]) / 2;\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n       \
    \ }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L,\
    \ (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L,\
    \ (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n       \
    \ }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        long n = (long)l.Count;\n     \
    \   if (n == 0L) {\n            return 0.0f;\n        }\n\n        l.Sort();\n\
    \        if (n % 2L == 1L) {\n            return (float)l[(int)((n - 1L) / 2L)];\n\
    \        }\n\n        return (float)((l[(int)(n / 2L)] + l[(int)((n / 2L) - 1L)])\
    \ / 2L);\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a8a1f459a6b44259b423b201f3294b5>:0 \n"
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        if (l.Count == 0) {\n         \
    \   return 0;\n        }\n        l.Sort();\n        if (l.Count % 2 == 1) {\n\
    \            return l[l.Count / 2];\n        }\n        else {\n            return\
    \ (l[l.Count / 2 - 1] + l[l.Count / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        if (l.Count == 0) {\n         \
    \   return 0;\n        }\n        l.Sort();\n        if (l.Count % 2 == 1) {\n\
    \            return l[l.Count / 2];\n        }\n        else {\n            return\
    \ (l[l.Count / 2 - 1] + l[l.Count / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L,\
    \ (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L,\
    \ (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n       \
    \ }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        var n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return l[n / 2];\n        }\n        else\
    \ {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int len = l.Count;\n\
    \        if (len % 2 == 1) {\n            return (float)l[len / 2];\n        }\n\
    \        else {\n            return (float)((l[len / 2] + l[len / 2 - 1]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        if (n == 1) {\n         \
    \   return l[0];\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n  \
    \          return l[n / 2];\n        }\n        else {\n            return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L,\
    \ (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L,\
    \ (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        l.Sort();\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if ((l.Count\
    \ % 2L) == 0L) {\n            return ((float)(l[(l.Count / 2L) - 1L] + l[l.Count\
    \ / 2L]) / 2f);\n        }\n        else {\n            return (float)l[l.Count\
    \ / 2L];\n        }\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L, (long)2L,\
    \ (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L})))\
    \ == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1gwldpm4.cs(17,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1gwldpm4.cs(17,56): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1gwldpm4.cs(20,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n       \
    \ }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        return (float)(l[l.Count\
    \ / 2] + l[(l.Count - 1) / 2]) / 2;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L,\
    \ (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L,\
    \ (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if ((l.Count\
    \ % 2L) == 0L) {\n            return ((float)(l[(l.Count / 2L) - 1L] + l[l.Count\
    \ / 2L]) / 2f);\n        }\n\n        return (float)l[l.Count / 2L];\n\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxzmw8w25.cs(17,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxzmw8w25.cs(17,56): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxzmw8w25.cs(20,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int mid = l.Count\
    \ / 2;\n        if (l.Count % 2 == 1) {\n            return (float)l[mid];\n \
    \       }\n        else {\n            return (float)(l[mid - 1] + l[mid]) / 2;\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int mid = l.Count\
    \ / 2;\n        if (l.Count % 2 == 1) {\n            return (float)l[mid];\n \
    \       }\n        else {\n            return (float)((l[mid - 1] + l[mid]) /\
    \ 2.0);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L,\
    \ (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L,\
    \ (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)((l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0);\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        if (l.Count == 0) {\n         \
    \   return 0;\n        }\n        l.Sort();\n        if (l.Count % 2 == 1) {\n\
    \            return l[l.Count / 2];\n        }\n        return (l[l.Count / 2\
    \ - 1] + l[l.Count / 2]) / 2.0f;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L,\
    \ (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L,\
    \ (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       return (float)((l[n / 2 - 1] + l[n / 2]) / 2);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L,\
    \ (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L,\
    \ (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58f0c71563654840ae0b03307981b22f>:0 \n"
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)((l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0);\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L,\
    \ (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L,\
    \ (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        }\n        else\
    \ {\n            return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n  \
    \      }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        if (n == 1) {\n         \
    \   return l[0];\n        }\n        if (n % 2 == 0) {\n            return (l[n\
    \ / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n        return l[n / 2];\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c67734b8cded41cbb4c6dac17c49110d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c67734b8cded41cbb4c6dac17c49110d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int len = l.Count;\n\
    \        if (len % 2 == 1) {\n            return (float)l[len / 2];\n        }\n\
    \        else {\n            return (float)((l[len / 2] + l[len / 2 - 1]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        }\n        else\
    \ {\n            return (float)((l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        }\n        else\
    \ {\n            return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n  \
    \      }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        if (l.Count == 0) {\n         \
    \   return 0;\n        }\n        l.Sort();\n        if (l.Count % 2 == 1) {\n\
    \            return l[l.Count / 2];\n        }\n        else {\n            return\
    \ (l[l.Count / 2 - 1] + l[l.Count / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        long n = (long)l.Count;\n     \
    \   long m = n / 2L;\n        if (n % 2L == 1L) {\n            return (float)l[(int)m];\n\
    \        }\n        else {\n            return ((float)l[(int)m] + (float)l[(int)(m\
    \ - 1L)]) / 2f;\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L, (long)2L,\
    \ (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L})))\
    \ == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <874233ea665f40c4b73aac11db1c89f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <874233ea665f40c4b73aac11db1c89f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        }\n        else\
    \ {\n            return (float)((l[l.Count / 2] + l[l.Count / 2 - 1]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n       \
    \ }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        var sorted = l.OrderBy((long x)\
    \ => x).ToList();\n        if (sorted.Count % 2 == 1) {\n            return sorted[sorted.Count\
    \ / 2];\n        }\n        else {\n            return (sorted[sorted.Count /\
    \ 2] + sorted[sorted.Count / 2 - 1]) / 2.0f;\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L,\
    \ (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L,\
    \ (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if ((l.Count\
    \ % 2L) == 0L) {\n            return ((float)(l[(l.Count / 2L) - 1L] + l[l.Count\
    \ / 2L]) / 2f);\n        }\n        else {\n            return (float)l[l.Count\
    \ / 2L];\n        }\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L, (long)2L,\
    \ (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L})))\
    \ == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1gwldpm4.cs(17,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1gwldpm4.cs(17,56): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1gwldpm4.cs(20,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if ((l.Count\
    \ % 2L) == 0L) {\n            return ((float)(l[(l.Count / 2L) - 1L] + l[l.Count\
    \ / 2L]) / 2f);\n        }\n        else {\n            return (float)l[l.Count\
    \ / 2L];\n        }\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Median((new List<long>(new long[]{(long)3L, (long)1L, (long)2L,\
    \ (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L})))\
    \ == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1gwldpm4.cs(17,31): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1gwldpm4.cs(17,56): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp1gwldpm4.cs(20,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new long[]{(long)3L,\
    \ (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L,\
    \ (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)5L})))\
    \ == (float)5L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)6L,\
    \ (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new List<long>(new long[]{(long)8L,\
    \ (long)1L, (long)3L, (long)9L, (long)9L, (long)2L, (long)7L}))) == (float)7L);\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        l.Sort();\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int mid = l.Count\
    \ / 2;\n        if (l.Count % 2 == 1) {\n            return (float)l[mid];\n \
    \       }\n        else {\n            return (float)(l[mid - 1] + l[mid]) / 2;\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        long n = (long)l.Count;\n\
    \        if (n % 2L == 0L) {\n            return (float)((l[(int)(n / 2L - 1L)]\
    \ + l[(int)(n / 2L)]) / 2L);\n        }\n\n        return (float)l[(int)(n / 2L)];\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e812d3111ff48d59f6a3fb18b41bc97>:0 \n"
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[l.Count / 2];\n        } else {\n \
    \           return (float)(l[l.Count / 2 - 1] + l[l.Count / 2]) / 2;\n       \
    \ }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0.0f;\n        }\n        l.Sort();\n        if\
    \ (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n        else\
    \ {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792380
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        if (n\
    \ == 0) {\n            return 0;\n        }\n        l.Sort();\n        if (n\
    \ % 2 == 1) {\n            return l[n / 2];\n        }\n        else {\n     \
    \       return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Median((new List<long>(new\
    \ long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) == (float)3L);\n\
    \    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L,\
    \ (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        l.Sort();\n        int n = l.Count;\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n   \
    \     }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792379
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n\
    \    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
    \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public\
    \ static float Median(List<long> l) {\n        int n = l.Count;\n        l.Sort();\n\
    \        if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n \
    \       else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0f);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
    \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L,\
    \ (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
    \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
    \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659792380
