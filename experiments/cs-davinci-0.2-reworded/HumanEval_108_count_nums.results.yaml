language: cs
name: HumanEval_108_count_nums
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            while (n != 0) {\n                sum
    += Math.Abs(n % 10);\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6296f54ceca4626aa1013fd4fa2260b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6296f54ceca4626aa1013fd4fa2260b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = 0;\n            long num = arr[i];\n            if (num
    < 0) {\n                sum += num;\n                num = -num;\n            }\n
    \           while (num > 0) {\n                sum += num % 10;\n                num
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47a5c4e2e7d14291b4047993341d29a4>:0
    \n"
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            long
    sum = 0;\n            long n = i;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0d2bb6efe2324907a6dc1376bc03888b>:0
    \n"
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9b6a33857947a18936f89e5ab3cbb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9b6a33857947a18936f89e5ab3cbb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n = -n / 10;\n            }\n            while (n
    > 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b9ae7c6309f4f2b8b007739f99f194c>:0
    \n"
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n = -(n / 10);\n            }\n            while (n
    > 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1bc25d96c7634e64ae67c7ff0c390af0>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code here\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d3bab3ca92a40f1b5bf51bf7a97a11f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d3bab3ca92a40f1b5bf51bf7a97a11f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798456
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            if (num < 0) {\n                sum += Math.Abs(num) % 10;\n
    \               num = -num / 10;\n            }\n            while (num > 0) {\n
    \               sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc9r2mnok.cs(25,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmpc9r2mnok.cs(29,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Sum(c => c - '0') > 0).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c783794192c41c5b13e30372400d49c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c783794192c41c5b13e30372400d49c>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df09e2e2044019a9770af56b144481>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code here\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d3bab3ca92a40f1b5bf51bf7a97a11f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d3bab3ca92a40f1b5bf51bf7a97a11f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long n in arr) {\n            long
    sum = 0;\n            long nn = n;\n            if (nn < 0) {\n                sum
    += -nn % 10;\n                nn /= 10;\n            }\n            while (nn
    > 0) {\n                sum += nn % 10;\n                nn /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7d455366ffe4074afa458cb95654d46>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7d455366ffe4074afa458cb95654d46>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => y - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Select(y => y - '0').Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => Math.Abs(y - '0')).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7f0e70e6fc34b8688f8278dc24e11fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7f0e70e6fc34b8688f8278dc24e11fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n = -n;\n            }\n            while (n > 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += Math.Abs(n % 10);\n                n /= 10;\n            }\n            while
    (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cac991ad3cc4487ba51651128067f501>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cac991ad3cc4487ba51651128067f501>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48841ac654cb4f76b9b73df5f94ae735>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48841ac654cb4f76b9b73df5f94ae735>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => SumDigits(x) > 0);\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjkjcfj_9.cs(20,31): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = 0;\n            long num = arr[i];\n            if (num
    < 0) {\n                num = -num;\n                sum += num % 10;\n                num
    /= 10;\n            }\n            while (num > 0) {\n                sum += num
    % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n
    \               count++;\n            }\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1f9696bfdc4423a9f0d6952b505b154>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1f9696bfdc4423a9f0d6952b505b154>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            while (n != 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            if (sum > 0)
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d3c4e025a244f379eedcc260fb734fb>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            long
    sum = 0;\n            long num = i;\n            if (num < 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            while (num
    != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfd5c151b19c4748a8454f504c8dcf19>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = 0;\n            long num = arr[i];\n            if (num
    < 0) {\n                sum += num;\n                num = -num;\n            }\n
    \           while (num > 0) {\n                sum += num % 10;\n                num
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47a5c4e2e7d14291b4047993341d29a4>:0
    \n"
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => y - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n = -(n / 10);\n            }\n            while (n
    > 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1bc25d96c7634e64ae67c7ff0c390af0>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Select(y => y - '0').Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Select(y => int.Parse(y.ToString())).Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <b16d52b6b9704ddb8308b1ceafb77f23>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <b16d52b6b9704ddb8308b1ceafb77f23>:0
    \n  at System.Linq.Enumerable+WhereListIterator`1[TSource].GetCount (System.Boolean
    onlyIfCheap) [0x00018] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Count[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00029] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00026]
    in <b16d52b6b9704ddb8308b1ceafb77f23>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <b16d52b6b9704ddb8308b1ceafb77f23>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => y - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9b6a33857947a18936f89e5ab3cbb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9b6a33857947a18936f89e5ab3cbb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Sum(c => c - '0') > 0).Count();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c783794192c41c5b13e30372400d49c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c783794192c41c5b13e30372400d49c>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += -n % 10;\n                n /= 10;\n            }\n            while (n !=
    0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d6b695623264dfba5ac7d20ac162db2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d6b695623264dfba5ac7d20ac162db2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3858feb29914aae98b17153a0999a68>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3858feb29914aae98b17153a0999a68>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            long
    sum = 0;\n            long num = i;\n            if (num < 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            while (num
    != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfd5c151b19c4748a8454f504c8dcf19>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => Math.Abs(int.Parse(y.ToString()))).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <54045573e80846ca8c6034d375c878f7>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <54045573e80846ca8c6034d375c878f7>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <54045573e80846ca8c6034d375c878f7>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <54045573e80846ca8c6034d375c878f7>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <54045573e80846ca"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(c => c - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <868c1e50cf0f47d39e0ad76ef4b8e23d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <868c1e50cf0f47d39e0ad76ef4b8e23d>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df09e2e2044019a9770af56b144481>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code here\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d3bab3ca92a40f1b5bf51bf7a97a11f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d3bab3ca92a40f1b5bf51bf7a97a11f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => long.Parse(y.ToString())).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <a6f3c36c6fe1409991591293ad196e9d>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <a6f3c36c6fe1409991591293ad196e9d>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <a6f3c36c6fe1409991591293ad196e9d>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <a6f3c36c6fe1409991591293ad196e9d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <a6f3c36c6fe14099"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            if
    (i < 0) {\n                count += 1;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e942e7ca108b4d5d89cbbdb22f8d9a42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e942e7ca108b4d5d89cbbdb22f8d9a42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => int.Parse(y.ToString())).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <7665e1b5816f40e99bedce072070b944>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <7665e1b5816f40e99bedce072070b944>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <7665e1b5816f40e99bedce072070b944>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <7665e1b5816f40e99bedce072070b944>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <7665e1b5816f40e9"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(c => c - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <868c1e50cf0f47d39e0ad76ef4b8e23d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <868c1e50cf0f47d39e0ad76ef4b8e23d>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long result = 0;\n        for (int i = 0; i < arr.Count; i++)
    {\n            long num = arr[i];\n            long sum = 0;\n            while
    (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                result++;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bfe6a70c6eca4991b97f7845309c1e82>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            while (n != 0) {\n                sum
    += Math.Abs(n % 10);\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6296f54ceca4626aa1013fd4fa2260b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6296f54ceca4626aa1013fd4fa2260b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            long
    sum = 0;\n            long num = i;\n            if (num < 0) {\n                sum
    += Math.Abs(num % 10);\n                num /= 10;\n            }\n            while
    (num != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <161d6c411e534fc7967cec5afadf4e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <161d6c411e534fc7967cec5afadf4e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            while (n != 0) {\n                sum
    += Math.Abs(n % 10);\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6296f54ceca4626aa1013fd4fa2260b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6296f54ceca4626aa1013fd4fa2260b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48841ac654cb4f76b9b73df5f94ae735>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48841ac654cb4f76b9b73df5f94ae735>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = 0;\n            long n = arr[i];\n            if (n < 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            while
    (n > 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cbe4ae2fc0d34162aecede3619dbba46>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            if
    (i < 0) {\n                count += 1;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e942e7ca108b4d5d89cbbdb22f8d9a42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e942e7ca108b4d5d89cbbdb22f8d9a42>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => y - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df09e2e2044019a9770af56b144481>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(c => c - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <868c1e50cf0f47d39e0ad76ef4b8e23d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <868c1e50cf0f47d39e0ad76ef4b8e23d>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9b6a33857947a18936f89e5ab3cbb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9b6a33857947a18936f89e5ab3cbb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fef058de3f0432f88b234023553c111>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fef058de3f0432f88b234023553c111>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            long
    sum = 0;\n            if (i < 0) {\n                sum += Math.Abs(i % 10);\n
    \               i = Math.Abs(i / 10);\n            }\n            while (i > 0)
    {\n                sum += i % 10;\n                i /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxkkxjvff.cs(25,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    /tmp/tmpxkkxjvff.cs(29,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df09e2e2044019a9770af56b144481>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            if
    (SumOfDigits(num) > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9lzwl46_.cs(22,17): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9b6a33857947a18936f89e5ab3cbb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9b6a33857947a18936f89e5ab3cbb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long abs = Math.Abs(num);\n            while (abs > 0) {\n
    \               sum += abs % 10;\n                abs /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38ebc5f13b294c0d8c0b5945848ee67f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <38ebc5f13b294c0d8c0b5945848ee67f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => y - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += -n % 10;\n                n /= 10;\n            }\n            while (n !=
    0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d6b695623264dfba5ac7d20ac162db2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d6b695623264dfba5ac7d20ac162db2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Select(y => y - '0').Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += -n % 10;\n                n = -n / 10;\n            }\n            while (n
    > 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6115120e6a6743b4bceeaa5feefe5bd0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6115120e6a6743b4bceeaa5feefe5bd0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            long
    sum = 0;\n            long num = i;\n            if (num < 0) {\n                sum
    += num % 10;\n                num = num / 10;\n            }\n            while
    (num != 0) {\n                sum += num % 10;\n                num = num / 10;\n
    \           }\n            if (sum > 0) {\n                count++;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1da17856188b4139aa8bdc5d1e6a3b51>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = 0;\n            long num = arr[i];\n            if (num
    < 0) {\n                sum += num % 10;\n                num = num / 10;\n            }\n
    \           while (num != 0) {\n                sum += num % 10;\n                num
    = num / 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <303d39917fba48eca93cd5a6217c0884>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df09e2e2044019a9770af56b144481>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9b6a33857947a18936f89e5ab3cbb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9b6a33857947a18936f89e5ab3cbb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            if (num < 0) {\n                sum += -1 * (num % 10);\n
    \               num = -1 * (num / 10);\n            }\n            while (num
    > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg_pev95s.cs(25,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmpg_pev95s.cs(29,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => int.Parse(y.ToString())).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <7665e1b5816f40e99bedce072070b944>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <7665e1b5816f40e99bedce072070b944>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <7665e1b5816f40e99bedce072070b944>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <7665e1b5816f40e99bedce072070b944>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <7665e1b5816f40e9"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => Math.Abs(x).ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf9de1fe10354804ba999a815b52fc43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cf9de1fe10354804ba999a815b52fc43>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = 0;\n            long num = arr[i];\n            if (num
    < 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           while (num != 0) {\n                sum += num % 10;\n                num
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d2462cd5d2e4cff8f5c8a352ba8e919>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (var item in arr) {\n            if
    (SumDigits(item) > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp93rykm3g.cs(22,17): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            if
    (i < 0) {\n                count += i.ToString().Length - 1;\n            } else
    {\n                count += i.ToString().Length;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f68843c530341c6941913e589239e03>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8f68843c530341c6941913e589239e03>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798458
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            if
    (i < 0) {\n                i = -i;\n            }\n            long sum = 0;\n
    \           while (i > 0) {\n                sum += i % 10;\n                i
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpstsnj0m1.cs(23,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    /tmp/tmpstsnj0m1.cs(28,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659798458
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48841ac654cb4f76b9b73df5f94ae735>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48841ac654cb4f76b9b73df5f94ae735>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n = -n / 10;\n            }\n            while (n
    > 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b9ae7c6309f4f2b8b007739f99f194c>:0
    \n"
  stdout: ''
  timestamp: 1659798456
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            long
    sum = 0;\n            if (i < 0) {\n                sum += Math.Abs(i) % 10;\n
    \               i = Math.Abs(i) / 10;\n            }\n            while (i > 0)
    {\n                sum += i % 10;\n                i /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmkwj1woe.cs(25,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    /tmp/tmpmkwj1woe.cs(29,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659798458
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = 0;\n            long num = arr[i];\n            if (num
    < 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           while (num != 0) {\n                sum += num % 10;\n                num
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d2462cd5d2e4cff8f5c8a352ba8e919>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => y - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            while (n != 0) {\n                sum
    += Math.Abs(n % 10);\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6296f54ceca4626aa1013fd4fa2260b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6296f54ceca4626aa1013fd4fa2260b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df09e2e2044019a9770af56b144481>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df09e2e2044019a9770af56b144481>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = 0;\n            long num = arr[i];\n            if (num
    < 0) {\n                sum += num % 10;\n                num = -num / 10;\n            }\n
    \           while (num > 0) {\n                sum += num % 10;\n                num
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5db898a94ea24787bcce849f233fb4ac>:0
    \n"
  stdout: ''
  timestamp: 1659798458
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long sum = 0;\n            long num = arr[i];\n            if (num
    < 0) {\n                sum += num % 10;\n                num = num / 10;\n            }\n
    \           while (num != 0) {\n                sum += num % 10;\n                num
    = num / 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <303d39917fba48eca93cd5a6217c0884>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Select(y => y - '0').Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Select(y => y - '0').Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48841ac654cb4f76b9b73df5f94ae735>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <48841ac654cb4f76b9b73df5f94ae735>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x > 0).Count(x => x.ToString().Sum(y =>
    y - '0') > 0) +\n            arr.Where(x => x < 0).Count(x => x.ToString().Sum(y
    => y - '0') < 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <074658dd8e7e401f985383a5f6e52f6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <074658dd8e7e401f985383a5f6e52f6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798458
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += Math.Abs(n % 10);\n                n /= 10;\n            }\n            while
    (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cac991ad3cc4487ba51651128067f501>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cac991ad3cc4487ba51651128067f501>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => y - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long n in arr) {\n            long
    sum = 0;\n            long x = n;\n            if (x < 0) {\n                sum
    += x % 10;\n                x = -x;\n            }\n            while (x > 0)
    {\n                sum += x % 10;\n                x /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659798458
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => y - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df09e2e2044019a9770af56b144481>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => y - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            if (num < 0) {\n                sum += Math.Abs(num % 10);\n
    \               num = Math.Abs(num / 10);\n            }\n            while (num
    > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpks6xo_h3.cs(25,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmpks6xo_h3.cs(29,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659798458
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => y - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            long
    sum = 0;\n            long num = i;\n            if (num < 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            while (num
    != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfd5c151b19c4748a8454f504c8dcf19>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => y - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code goes here.\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9b6a33857947a18936f89e5ab3cbb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fd9b6a33857947a18936f89e5ab3cbb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            long
    sum = 0;\n            long num = i;\n            if (num < 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            while (num
    != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfd5c151b19c4748a8454f504c8dcf19>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => (long)Char.GetNumericValue(y)).Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04dfc88a53b84dfea1d2555db1ad38b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <04dfc88a53b84dfea1d2555db1ad38b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798458
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code here\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d3bab3ca92a40f1b5bf51bf7a97a11f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d3bab3ca92a40f1b5bf51bf7a97a11f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Select(y => y - '0').Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Select(y => y - '0').Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2c11b582dfc54fc0abece3623edd5d10>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => Math.Abs(x).ToString().Sum(y => y - '0')
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59430457af6b4222be6bfca561131713>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <59430457af6b4222be6bfca561131713>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798458
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df09e2e2044019a9770af56b144481>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(n => n.ToString().Select(c => c - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a1fb9dd39d44cfa8bb5a99d2da589f5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a1fb9dd39d44cfa8bb5a99d2da589f5>:0
    \n"
  stdout: ''
  timestamp: 1659798458
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Select(y => int.Parse(y.ToString())).Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <b16d52b6b9704ddb8308b1ceafb77f23>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <b16d52b6b9704ddb8308b1ceafb77f23>:0
    \n  at System.Linq.Enumerable+WhereListIterator`1[TSource].GetCount (System.Boolean
    onlyIfCheap) [0x00018] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Count[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00029] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00026]
    in <b16d52b6b9704ddb8308b1ceafb77f23>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <b16d52b6b9704ddb8308b1ceafb77f23>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           long num = arr[i];\n            if (num < 0) {\n                num
    = -num;\n            }\n            long sum = 0;\n            while (num > 0)
    {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83d68b1152554a159c4df572f8d02614>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <83d68b1152554a159c4df572f8d02614>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798458
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df09e2e2044019a9770af56b144481>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Select(y => int.Parse(y.ToString())).Sum()
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <b16d52b6b9704ddb8308b1ceafb77f23>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00024] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <b16d52b6b9704ddb8308b1ceafb77f23>:0
    \n  at System.Linq.Enumerable+WhereListIterator`1[TSource].GetCount (System.Boolean
    onlyIfCheap) [0x00018] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Count[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00029] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00026]
    in <b16d52b6b9704ddb8308b1ceafb77f23>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <b16d52b6b9704ddb8308b1ceafb77f23>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df09e2e2044019a9770af56b144481>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += -n % 10;\n                n = -n / 10;\n            }\n            while (n
    > 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6115120e6a6743b4bceeaa5feefe5bd0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6115120e6a6743b4bceeaa5feefe5bd0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += -n % 10;\n                n /= 10;\n            }\n            while (n !=
    0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d6b695623264dfba5ac7d20ac162db2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d6b695623264dfba5ac7d20ac162db2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += Math.Abs(n % 10);\n                n /= 10;\n            }\n            while
    (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cac991ad3cc4487ba51651128067f501>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cac991ad3cc4487ba51651128067f501>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        // Your code here\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) ==
    (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d3bab3ca92a40f1b5bf51bf7a97a11f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3d3bab3ca92a40f1b5bf51bf7a97a11f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(c => c - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <868c1e50cf0f47d39e0ad76ef4b8e23d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <868c1e50cf0f47d39e0ad76ef4b8e23d>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n = -n / 10;\n            }\n            while (n
    > 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b9ae7c6309f4f2b8b007739f99f194c>:0
    \n"
  stdout: ''
  timestamp: 1659798456
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long n in arr) {\n            long
    sum = 0;\n            long m = n;\n            if (m < 0) {\n                m
    = -m;\n                sum += -n % 10;\n            }\n            while (m >
    0) {\n                sum += m % 10;\n                m /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <444b749837594cc7b31e3d0bcdee462b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <444b749837594cc7b31e3d0bcdee462b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798458
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += Math.Abs(n % 10);\n                n /= 10;\n            }\n            while
    (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cac991ad3cc4487ba51651128067f501>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cac991ad3cc4487ba51651128067f501>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (var item in arr) {\n            long
    sum = 0;\n            long n = item;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbb84996d9124bf3a16b42f0a7803447>:0
    \n"
  stdout: ''
  timestamp: 1659798458
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            while (n != 0) {\n                sum
    += Math.Abs(n % 10);\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6296f54ceca4626aa1013fd4fa2260b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6296f54ceca4626aa1013fd4fa2260b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long n in arr) {\n            long
    sum = 0;\n            long m = n;\n            while (m != 0) {\n                sum
    += Math.Abs(m % 10);\n                m /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <456721b73c684bbaaafe441cef9cbcf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <456721b73c684bbaaafe441cef9cbcf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798458
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            if (num < 0) {\n                sum += -num % 10;\n                num
    = -num / 10;\n            }\n            while (num > 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            if (sum >
    0) {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzekvhhxt.cs(25,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmpzekvhhxt.cs(29,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659798458
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Where(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0).Count();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fef058de3f0432f88b234023553c111>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1fef058de3f0432f88b234023553c111>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df09e2e2044019a9770af56b144481>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            long
    sum = 0;\n            long num = i;\n            if (num < 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            while (num
    != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfd5c151b19c4748a8454f504c8dcf19>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += -n % 10;\n                n /= 10;\n            }\n            while (n !=
    0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d6b695623264dfba5ac7d20ac162db2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d6b695623264dfba5ac7d20ac162db2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => Math.Abs(y - '0'))
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0bd57d558070486a8a416e8bdbabaf84>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            if (num < 0) {\n                sum += num % 10;\n                num
    /= 10;\n            }\n            while (num > 0) {\n                sum += num
    % 10;\n                num /= 10;\n            }\n            if (sum > 0) {\n
    \               count++;\n            }\n        }\n        return count;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgh5lgzgh.cs(25,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmpgh5lgzgh.cs(29,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659798458
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += -n % 10;\n                n /= 10;\n            }\n            while (n !=
    0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d6b695623264dfba5ac7d20ac162db2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d6b695623264dfba5ac7d20ac162db2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(y => y - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4846d7e9bfb48009877623ae110789e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long num in arr) {\n            long
    sum = 0;\n            long n = num;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n != 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3df09e2e2044019a9770af56b144481>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Select(y => y - '0').Sum()
    > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47432f9c75164582b1f7f8efbb52b32e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long i in arr) {\n            long
    sum = 0;\n            long num = i;\n            if (num < 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            while (num
    != 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cfd5c151b19c4748a8454f504c8dcf19>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        return arr.Count(x => x.ToString().Sum(c => c - '0') > 0);\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7a667a4159aa46638c4a06a9fa10512e>:0
    \n"
  stdout: ''
  timestamp: 1659798457
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes a list of integers and
    returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n
    \   // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,
    (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>
    arr) {\n        long count = 0;\n        foreach (long n in arr) {\n            long
    sum = 0;\n            long m = n;\n            if (m < 0) {\n                m
    = -m;\n                sum += -n;\n            }\n            while (m > 0) {\n
    \               sum += m % 10;\n                m /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12f3e8a96f9c46ca8d08fb913f3229a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12f3e8a96f9c46ca8d08fb913f3229a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798458
