name: HumanEval_20_find_closest_elements
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // From a supplied list of numbers (of length at least two) select\
  \ and return two that are the closest to each\n    // other and return them in order\
  \ (smaller number, larger number).\n    // >>> FindClosestElements((new List<float>(new\
  \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n\
  \    // (Tuple.Create(2.0f, 2.2f))\n    // >>> FindClosestElements((new List<float>(new\
  \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n\
  \    // (Tuple.Create(2.0f, 2.0f))\n    public static Tuple<float, float> FindClosestElements(List<float>\
  \ numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindClosestElements((new\
  \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.9f, (float)4.0f, (float)5.0f,\
  \ (float)2.2f}))).Equals((Tuple.Create(3.9f, 4.0f))));\n    Debug.Assert(FindClosestElements((new\
  \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)5.9f, (float)4.0f, (float)5.0f}))).Equals((Tuple.Create(5.0f,\
  \ 5.9f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f}))).Equals((Tuple.Create(2.0f,\
  \ 2.2f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.0f,\
  \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f}))).Equals((Tuple.Create(2.0f,\
  \ 2.0f))));\n    Debug.Assert(FindClosestElements((new List<float>(new float[]{(float)1.1f,\
  \ (float)2.2f, (float)3.1f, (float)4.1f, (float)5.1f}))).Equals((Tuple.Create(2.2f,\
  \ 3.1f))));\n    }\n\n}\n"
completions: ["        // Your code goes here.\n        return Tuple.Create(0.0f,\
    \ 0.0f);", "        float min = float.MaxValue;\n        Tuple<float, float> closest\
    \ = null;\n        for (int i = 0; i < numbers.Count; i++) {\n            for\
    \ (int j = i + 1; j < numbers.Count; j++) {\n                float diff = Math.Abs(numbers[i]\
    \ - numbers[j]);\n                if (diff < min) {\n                    min =\
    \ diff;\n                    closest = Tuple.Create(numbers[i], numbers[j]);\n\
    \                }\n            }\n        }\n        return closest;", "    \
    \    float closest = float.MaxValue;\n        float closest1 = 0;\n        float\
    \ closest2 = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n         \
    \   for (int j = i + 1; j < numbers.Count; j++) {\n                float diff\
    \ = Math.Abs(numbers[i] - numbers[j]);\n                if (diff < closest) {\n\
    \                    closest = diff;\n                    closest1 = numbers[i];\n\
    \                    closest2 = numbers[j];\n                }\n            }\n\
    \        }\n        return Tuple.Create(closest1, closest2);", "        float\
    \ minDiff = float.MaxValue;\n        float minA = 0;\n        float minB = 0;\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i\
    \ + 1; j < numbers.Count; j++) {\n                float diff = Math.Abs(numbers[i]\
    \ - numbers[j]);\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff;\n                    minA = numbers[i];\n                    minB =\
    \ numbers[j];\n                }\n            }\n        }\n        return Tuple.Create(minA,\
    \ minB);", "        float closest = float.MaxValue;\n        float closest1 =\
    \ 0;\n        float closest2 = 0;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n        \
    \        float diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < closest) {\n                    closest = diff;\n                    closest1\
    \ = numbers[i];\n                    closest2 = numbers[j];\n                }\n\
    \            }\n        }\n        return Tuple.Create(closest1, closest2);",
  "        float smallestDifference = float.MaxValue;\n        float firstNumber =\
    \ 0;\n        float secondNumber = 0;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n        \
    \        float difference = Math.Abs(numbers[i] - numbers[j]);\n             \
    \   if (difference < smallestDifference) {\n                    smallestDifference\
    \ = difference;\n                    firstNumber = numbers[i];\n             \
    \       secondNumber = numbers[j];\n                }\n            }\n       \
    \ }\n        return Tuple.Create(firstNumber, secondNumber);", "        float\
    \ minDiff = float.MaxValue;\n        Tuple<float, float> closest = null;\n   \
    \     for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i +\
    \ 1; j < numbers.Count; j++) {\n                float diff = Math.Abs(numbers[i]\
    \ - numbers[j]);\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff;\n                    closest = Tuple.Create(numbers[i], numbers[j]);\n\
    \                }\n            }\n        }\n        return closest;", "    \
    \    float minDiff = float.MaxValue;\n        float minSmall = float.MaxValue;\n\
    \        float minLarge = float.MaxValue;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n        \
    \        float diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff;\n                    minSmall\
    \ = Math.Min(numbers[i], numbers[j]);\n                    minLarge = Math.Max(numbers[i],\
    \ numbers[j]);\n                }\n            }\n        }\n        return Tuple.Create(minSmall,\
    \ minLarge);", "        float minDistance = float.MaxValue;\n        float minDistanceFirst\
    \ = 0;\n        float minDistanceSecond = 0;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n        \
    \        float distance = Math.Abs(numbers[i] - numbers[j]);\n               \
    \ if (distance < minDistance) {\n                    minDistance = distance;\n\
    \                    minDistanceFirst = numbers[i];\n                    minDistanceSecond\
    \ = numbers[j];\n                }\n            }\n        }\n        return Tuple.Create(minDistanceFirst,\
    \ minDistanceSecond);", "        float minDiff = float.MaxValue;\n        float\
    \ minFirst = float.MaxValue;\n        float minSecond = float.MaxValue;\n    \
    \    for (int i = 0; i < numbers.Count - 1; i++) {\n            for (int j = i\
    \ + 1; j < numbers.Count; j++) {\n                float diff = Math.Abs(numbers[i]\
    \ - numbers[j]);\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff;\n                    minFirst = numbers[i];\n                    minSecond\
    \ = numbers[j];\n                }\n            }\n        }\n        return Tuple.Create(minFirst,\
    \ minSecond);", "        float closest = float.MaxValue;\n        float closest1\
    \ = float.MaxValue;\n        float closest2 = float.MaxValue;\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count;\
    \ j++) {\n                float diff = Math.Abs(numbers[i] - numbers[j]);\n  \
    \              if (diff < closest) {\n                    closest = diff;\n  \
    \                  closest1 = numbers[i];\n                    closest2 = numbers[j];\n\
    \                }\n            }\n        }\n        if (closest1 > closest2)\
    \ {\n            float temp = closest1;\n            closest1 = closest2;\n  \
    \          closest2 = temp;\n        }\n        return Tuple.Create(closest1,\
    \ closest2);", "        float closest = float.MaxValue;\n        float first =\
    \ 0;\n        float second = 0;\n        for (int i = 0; i < numbers.Count; i++)\
    \ {\n            for (int j = i + 1; j < numbers.Count; j++) {\n             \
    \   float diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < closest) {\n                    closest = diff;\n                    first\
    \ = numbers[i];\n                    second = numbers[j];\n                }\n\
    \            }\n        }\n        return Tuple.Create(first, second);", "   \
    \     float minDiff = float.MaxValue;\n        float minDiff1 = float.MaxValue;\n\
    \        float minDiff2 = float.MaxValue;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n        \
    \        float diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff;\n                    minDiff1\
    \ = numbers[i];\n                    minDiff2 = numbers[j];\n                }\n\
    \            }\n        }\n        return Tuple.Create(minDiff1, minDiff2);",
  "        float minDiff = float.MaxValue;\n        float minDiff1 = float.MaxValue;\n\
    \        float minDiff2 = float.MaxValue;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n        \
    \        float diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff;\n                    minDiff1\
    \ = numbers[i];\n                    minDiff2 = numbers[j];\n                }\n\
    \            }\n        }\n        return Tuple.Create(minDiff1, minDiff2);",
  "        float closest = float.MaxValue;\n        float closestA = float.MaxValue;\n\
    \        float closestB = float.MaxValue;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            for (int j = i + 1; j < numbers.Count; j++) {\n        \
    \        float diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff\
    \ < closest) {\n                    closest = diff;\n                    closestA\
    \ = numbers[i];\n                    closestB = numbers[j];\n                }\n\
    \            }\n        }\n        return Tuple.Create(closestA, closestB);",
  "        float closest = float.MaxValue;\n        float closest1 = 0;\n        float\
    \ closest2 = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n         \
    \   for (int j = i + 1; j < numbers.Count; j++) {\n                float diff\
    \ = Math.Abs(numbers[i] - numbers[j]);\n                if (diff < closest) {\n\
    \                    closest = diff;\n                    closest1 = numbers[i];\n\
    \                    closest2 = numbers[j];\n                }\n            }\n\
    \        }\n        return Tuple.Create(closest1, closest2);", "        float\
    \ closest = float.MaxValue;\n        Tuple<float, float> closestPair = null;\n\
    \        for (int i = 0; i < numbers.Count; i++) {\n            for (int j = i\
    \ + 1; j < numbers.Count; j++) {\n                float diff = Math.Abs(numbers[i]\
    \ - numbers[j]);\n                if (diff < closest) {\n                    closest\
    \ = diff;\n                    closestPair = Tuple.Create(numbers[i], numbers[j]);\n\
    \                }\n            }\n        }\n        return closestPair;", " \
    \       float smallestDifference = float.MaxValue;\n        float first = 0;\n\
    \        float second = 0;\n        for (int i = 0; i < numbers.Count; i++) {\n\
    \            for (int j = i + 1; j < numbers.Count; j++) {\n                float\
    \ difference = Math.Abs(numbers[i] - numbers[j]);\n                if (difference\
    \ < smallestDifference) {\n                    smallestDifference = difference;\n\
    \                    first = numbers[i];\n                    second = numbers[j];\n\
    \                }\n            }\n        }\n        return Tuple.Create(first,\
    \ second);", "        float minDiff = float.MaxValue;\n        Tuple<float, float>\
    \ closestElements = null;\n        for (int i = 0; i < numbers.Count; i++) {\n\
    \            for (int j = i + 1; j < numbers.Count; j++) {\n                float\
    \ diff = Math.Abs(numbers[i] - numbers[j]);\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff;\n                    closestElements\
    \ = Tuple.Create(numbers[i], numbers[j]);\n                }\n            }\n\
    \        }\n        return closestElements;", "        float minDiff = float.MaxValue;\n\
    \        float minDiffSmaller = float.MaxValue;\n        float minDiffLarger =\
    \ float.MaxValue;\n        float minDiffSmallerNumber = float.MaxValue;\n    \
    \    float minDiffLargerNumber = float.MaxValue;\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            for (int j = i + 1; j < numbers.Count; j++)\
    \ {\n                float diff = numbers[j] - numbers[i];\n                if\
    \ (diff < minDiff) {\n                    minDiff = diff;\n                  \
    \  minDiffSmaller = numbers[i];\n                    minDiffLarger = numbers[j];\n\
    \                }\n            }\n        }\n        return Tuple.Create(minDiffSmaller,\
    \ minDiffLarger);"]
stop_tokens:
- "\n    }\n"
