name: HumanEval_90_next_smallest
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return null if there\
  \ is no such element.\n    // >>> NextSmallest((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L})))\n    // 2L\n    // >>> NextSmallest((new\
  \ List<long>(new long[]{(long)5L, (long)1L, (long)4L, (long)3L, (long)2L})))\n \
  \   // 2L\n    // >>> NextSmallest((new List<long>()))\n    // null\n    // >>>\
  \ NextSmallest((new List<long>(new long[]{(long)1L, (long)1L})))\n    // null\n\
  \    public static Nullable<long> NextSmallest(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L,\
  \ (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new\
  \ long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n\
  \    }\n\n}\n"
completions: ["        if (lst.Count < 2) {\n            return null;\n        }\n\
    \        long min = lst[0];\n        long next_min = lst[1];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    next_min = min;\n                min = lst[i];\n            } else if (lst[i]\
    \ < next_min) {\n                next_min = lst[i];\n            }\n        }\n\
    \        if (min == next_min) {\n            return null;\n        }\n       \
    \ return next_min;", "        if (lst.Count < 2) {\n            return null;\n\
    \        }\n        long min = lst[0];\n        long nextMin = lst[1];\n     \
    \   for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n \
    \               nextMin = min;\n                min = lst[i];\n            } else\
    \ if (lst[i] < nextMin) {\n                nextMin = lst[i];\n            }\n\
    \        }\n        if (min == nextMin) {\n            return null;\n        }\n\
    \        return nextMin;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here\n        return null;", "        if (lst.Count <\
    \ 2) {\n            return null;\n        }\n        long min = lst[0];\n    \
    \    long min2 = lst[1];\n        if (min2 < min) {\n            min = min2;\n\
    \            min2 = lst[0];\n        }\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min2 = min;\n     \
    \           min = lst[i];\n            } else if (lst[i] < min2) {\n         \
    \       min2 = lst[i];\n            }\n        }\n        return min2;", "   \
    \     if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long next = lst[1];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                next = min;\n     \
    \           min = lst[i];\n            } else if (lst[i] < next) {\n         \
    \       next = lst[i];\n            }\n        }\n        if (min == next) {\n\
    \            return null;\n        }\n        return next;", "        if (lst.Count\
    \ < 2) {\n            return null;\n        }\n        long min = lst[0];\n  \
    \      long nextMin = lst[1];\n        if (min > nextMin) {\n            min =\
    \ nextMin;\n            nextMin = lst[0];\n        }\n        for (int i = 2;\
    \ i < lst.Count; i++) {\n            if (lst[i] < min) {\n                nextMin\
    \ = min;\n                min = lst[i];\n            } else if (lst[i] < nextMin)\
    \ {\n                nextMin = lst[i];\n            }\n        }\n        return\
    \ nextMin;", "        long min = lst[0];\n        long min2 = lst[0];\n      \
    \  for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n  \
    \              min2 = min;\n                min = lst[i];\n            } else\
    \ if (lst[i] < min2) {\n                min2 = lst[i];\n            }\n      \
    \  }\n        if (min2 == min) {\n            return null;\n        }\n      \
    \  return min2;", '        return null;', "        if (lst.Count < 2) {\n    \
    \        return null;\n        }\n        long min = lst[0];\n        long next\
    \ = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < min) {\n                next = min;\n                min = lst[i];\n     \
    \       } else if (lst[i] < next) {\n                next = lst[i];\n        \
    \    }\n        }\n        if (min == next) {\n            return null;\n    \
    \    }\n        return next;", "        long min = long.MaxValue;\n        long\
    \ min2 = long.MaxValue;\n        foreach (long l in lst) {\n            if (l\
    \ < min) {\n                min2 = min;\n                min = l;\n          \
    \  } else if (l < min2) {\n                min2 = l;\n            }\n        }\n\
    \        if (min2 == long.MaxValue) {\n            return null;\n        }\n \
    \       return min2;", "        long min = long.MaxValue;\n        long min2 =\
    \ long.MaxValue;\n        foreach (long i in lst) {\n            if (i < min)\
    \ {\n                min2 = min;\n                min = i;\n            } else\
    \ if (i < min2) {\n                min2 = i;\n            }\n        }\n     \
    \   if (min2 == long.MaxValue) {\n            return null;\n        }\n      \
    \  return min2;", "        if (lst.Count < 2) {\n            return null;\n  \
    \      }\n        long min = lst[0];\n        long nextMin = lst[1];\n       \
    \ if (nextMin < min) {\n            min = nextMin;\n            nextMin = lst[0];\n\
    \        }\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < min) {\n                nextMin = min;\n                min = lst[i];\n  \
    \          } else if (lst[i] < nextMin) {\n                nextMin = lst[i];\n\
    \            }\n        }\n        return nextMin;", "        // Your code goes\
    \ here.\n        return null;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long next = long.MaxValue;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                next = min;\n                min = lst[i];\n            }\
    \ else if (lst[i] < next) {\n                next = lst[i];\n            }\n \
    \       }\n        if (next == long.MaxValue) {\n            return null;\n  \
    \      }\n        return next;", "        // Your code goes here.\n        return\
    \ null;", "        long min = lst[0];\n        long min2 = lst[0];\n        foreach\
    \ (long i in lst) {\n            if (i < min) {\n                min2 = min;\n\
    \                min = i;\n            } else if (i < min2) {\n              \
    \  min2 = i;\n            }\n        }\n        if (min2 == min) {\n         \
    \   return null;\n        }\n        return min2;", "        // Your code here\n\
    \        return null;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long min = lst[0];\n        long nextMin = long.MaxValue;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                nextMin = min;\n                min = lst[i];\n         \
    \   } else if (lst[i] < nextMin) {\n                nextMin = lst[i];\n      \
    \      }\n        }\n        if (nextMin == long.MaxValue) {\n            return\
    \ null;\n        }\n        return nextMin;", "        // Your code goes here.\n\
    \        return null;"]
stop_tokens:
- "\n    }\n"
