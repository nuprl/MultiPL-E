language: cs
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length > 0 && CountConsonants(word)
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpno3apeyk.cs(29,36): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        return
    new List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement your solution here\n        return null;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] wordsInString = s.Split(' ');\n
    \       foreach (string word in wordsInString) {\n            if (word.Length
    > 0) {\n                int consonants = 0;\n                foreach (char c in
    word) {\n                    if (c != 'a' && c != 'e' && c != 'i' && c != 'o'
    && c != 'u') {\n                        consonants++;\n                    }\n
    \               }\n                if (consonants == n) {\n                    words.Add(word);\n
    \               }\n            }\n        }\n        return words;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81d1c11773fe49c5bc6783b1973e43a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81d1c11773fe49c5bc6783b1973e43a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement this function.\n        List<string> words = new List<string>();\n        string[]
    split = s.Split(' ');\n        foreach (string word in split) {\n            if
    (word.Length > 0) {\n                int count = 0;\n                foreach (char
    c in word) {\n                    if (c != 'a' && c != 'e' && c != 'i' && c !=
    'o' && c != 'u') {\n                        count++;\n                    }\n
    \               }\n                if (count == n) {\n                    words.Add(word);\n
    \               }\n            }\n        }\n        return words;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a57d14c37c4b45bf8cbc3922452f096f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a57d14c37c4b45bf8cbc3922452f096f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = word.Where(c => !\"aeiou\".Contains(c)).Count();\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20999b4af94847f59c30e87b6c26e422>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20999b4af94847f59c30e87b6c26e422>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => c != 'a' && c != 'e' && c !=
    'i' && c != 'o' && c != 'u') == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfaf7c490a844a24b4a44b114c5d9491>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfaf7c490a844a24b4a44b114c5d9491>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement this function\n        return new List<string>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa1ccd33a93e4b3390c3691b9c6cefba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa1ccd33a93e4b3390c3691b9c6cefba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == 0) {\n                continue;\n
    \           }\n            int count = 0;\n            for (int i = 0; i < word.Length;
    i++) {\n                if (word[i] != 'a' && word[i] != 'e' && word[i] != 'i'
    && word[i] != 'o' && word[i] != 'u') {\n                    count++;\n                }\n
    \           }\n            if (count == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9788495b73c43fa849e77230e3f009e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c9788495b73c43fa849e77230e3f009e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <ffea8772af534f639aaf62ff2f83cc80>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <ffea8772af534f639aaf62ff2f83cc80>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length == 0) continue;\n            int
    count = 0;\n            foreach (char c in word) {\n                if (c == 'a'
    || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n
    \               }\n            }\n            if (word.Length - count == n) {\n
    \               words.Add(word);\n            }\n        }\n        return words;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1594c7cf61f49259f6b00198064abd2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1594c7cf61f49259f6b00198064abd2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement your solution here\n        return new List<string>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f4af23f299d14ffaa5f2f24bdb1d5a53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f4af23f299d14ffaa5f2f24bdb1d5a53>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] wordsInString = s.Split(' ');\n
    \       foreach (string word in wordsInString) {\n            if (CountConsonants(word)
    == n) {\n                words.Add(word);\n            }\n        }\n        return
    words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4qufoqyj.cs(29,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !\"aeiou\".Contains(c)) == n)
    {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88a98c444d4e4295b5d21e6c94563dac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88a98c444d4e4295b5d21e6c94563dac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = new List<string>();\n        var consonants = new HashSet<char> { 'b', 'c',
    'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',
    'x', 'z' };\n        var word = new StringBuilder();\n        var count = 0L;\n
    \       foreach (var c in s) {\n            if (c == ' ') {\n                if
    (count == n) {\n                    words.Add(word.ToString());\n                }\n
    \               word.Clear();\n                count = 0;\n            } else
    {\n                word.Append(c);\n                if (consonants.Contains(c))
    {\n                    count++;\n                }\n            }\n        }\n
    \       if (count == n) {\n            words.Add(word.ToString());\n        }\n
    \       return words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a2ed16d891743968d0dd27e0bbc7106>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4a2ed16d891743968d0dd27e0bbc7106>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3d8625d065694a9f96f14d364578b8c8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3d8625d065694a9f96f14d364578b8c8>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => c != 'a' && c != 'e' && c !=
    'i' && c != 'o' && c != 'u') == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfaf7c490a844a24b4a44b114c5d9491>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfaf7c490a844a24b4a44b114c5d9491>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length == n) {\n                words.Add(word);\n
    \           }\n        }\n        return words;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5871c2cc7a064a15bee53b4c5b12ef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5871c2cc7a064a15bee53b4c5b12ef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var result
    = new List<string>();\n        var words = s.Split(' ');\n        foreach (var
    word in words) {\n            if (Consonants(word) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_2ydymz.cs(29,17): error CS0103: The name ''Consonants'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] wordsInString = s.Split(' ');\n
    \       foreach (string word in wordsInString) {\n            if (word.Count(c
    => c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') == n) {\n                words.Add(word);\n
    \           }\n        }\n        return words;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1216a857d7004308b9c5db5108d8d96a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1216a857d7004308b9c5db5108d8d96a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length == n) {\n                words.Add(word);\n
    \           }\n        }\n        return words;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5871c2cc7a064a15bee53b4c5b12ef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5871c2cc7a064a15bee53b4c5b12ef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return new List<string>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] wordsInString = s.Split(' ');\n
    \       foreach (string word in wordsInString) {\n            if (word.Length
    == n) {\n                words.Add(word);\n            }\n        }\n        return
    words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb1ec3a0229e45c0b07c9d1668a88e09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb1ec3a0229e45c0b07c9d1668a88e09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var result
    = new List<string>();\n        var words = s.Split(' ');\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3854ed0cf72b4308b5a4c92ef8e3beb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3854ed0cf72b4308b5a4c92ef8e3beb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => \"aeiou\".Contains(c)) == n)
    {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <867ebbcfbe6c469f822001117c05741b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <867ebbcfbe6c469f822001117c05741b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (CountConsonants(word) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr6nabls5.cs(29,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <ffea8772af534f639aaf62ff2f83cc80>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <ffea8772af534f639aaf62ff2f83cc80>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length > 0) {\n                int
    consonants = 0;\n                for (int i = 0; i < word.Length; i++) {\n                    if
    (!\"aeiouAEIOU\".Contains(word[i])) {\n                        consonants++;\n
    \                   }\n                }\n                if (consonants == n)
    {\n                    words.Add(word);\n                }\n            }\n        }\n
    \       return words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0053fea5e334acfae7f0b29fbed8df3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0053fea5e334acfae7f0b29fbed8df3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => c != 'a' && c != 'e' && c !=
    'i' && c != 'o' && c != 'u') == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfaf7c490a844a24b4a44b114c5d9491>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfaf7c490a844a24b4a44b114c5d9491>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == 0) {\n                continue;\n
    \           }\n            int count = 0;\n            foreach (char c in word)
    {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29bc2384d31a4a24855c417f6fad7bb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29bc2384d31a4a24855c417f6fad7bb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (CountConsonants(word) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr6nabls5.cs(29,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // Implement
    this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <a43b23de82984f29b3080cd81e0d2a7c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <a43b23de82984f29b3080cd81e0d2a7c>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == 0) {\n                continue;\n
    \           }\n            int consonants = 0;\n            foreach (char c in
    word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c
    != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08006ce7e258490e8b859d34d58f2ca5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08006ce7e258490e8b859d34d58f2ca5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var count = 0;\n            foreach (var c in word)
    {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4e9f2cc1af745bf8d205e8a89de5ca4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4e9f2cc1af745bf8d205e8a89de5ca4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // Implement
    this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <a43b23de82984f29b3080cd81e0d2a7c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <a43b23de82984f29b3080cd81e0d2a7c>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        return
    new List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return new List<string>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (CountConsonants(word) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr6nabls5.cs(29,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var result
    = new List<string>();\n        var words = s.Split(' ');\n        foreach (var
    word in words) {\n            if (Consonants(word) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_2ydymz.cs(29,17): error CS0103: The name ''Consonants'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] wordsInString = s.Split(' ');\n
    \       foreach (string word in wordsInString) {\n            if (word.Length
    == n) {\n                words.Add(word);\n            }\n        }\n        return
    words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb1ec3a0229e45c0b07c9d1668a88e09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb1ec3a0229e45c0b07c9d1668a88e09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3d8625d065694a9f96f14d364578b8c8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3d8625d065694a9f96f14d364578b8c8>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] wordsInString = s.Split(' ');\n
    \       foreach (string word in wordsInString) {\n            if (CountConsonants(word)
    == n) {\n                words.Add(word);\n            }\n        }\n        return
    words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4qufoqyj.cs(29,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        return
    new List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == 0) {\n                continue;\n
    \           }\n            int count = 0;\n            foreach (char c in word)
    {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29bc2384d31a4a24855c417f6fad7bb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29bc2384d31a4a24855c417f6fad7bb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] wordsInString = s.Split(' ');\n
    \       foreach (string word in wordsInString) {\n            if (word.Length
    > 0) {\n                int consonants = 0;\n                foreach (char c in
    word) {\n                    if (c != 'a' && c != 'e' && c != 'i' && c != 'o'
    && c != 'u') {\n                        consonants++;\n                    }\n
    \               }\n                if (consonants == n) {\n                    words.Add(word);\n
    \               }\n            }\n        }\n        return words;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81d1c11773fe49c5bc6783b1973e43a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <81d1c11773fe49c5bc6783b1973e43a5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        return
    new List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = word.Count(c => !\"aeiou\".Contains(c));\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49eebeb1432a4b64980ee77354667611>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49eebeb1432a4b64980ee77354667611>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Count(c => c != 'a' && c != 'e'
    && c != 'i' && c != 'o' && c != 'u') == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d0350995f834c2593f810a4dd2e3017>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1d0350995f834c2593f810a4dd2e3017>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3d8625d065694a9f96f14d364578b8c8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3d8625d065694a9f96f14d364578b8c8>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] wordsInString = s.Split(' ');\n
    \       foreach (string word in wordsInString) {\n            if (word.Length
    >= n) {\n                int consonants = 0;\n                foreach (char c
    in word) {\n                    if (c != 'a' && c != 'e' && c != 'i' && c != 'o'
    && c != 'u') {\n                        consonants++;\n                    }\n
    \               }\n                if (consonants == n) {\n                    words.Add(word);\n
    \               }\n            }\n        }\n        return words;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85a75f63c9e84906a4a1e391a4ef855a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85a75f63c9e84906a4a1e391a4ef855a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <ffea8772af534f639aaf62ff2f83cc80>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <ffea8772af534f639aaf62ff2f83cc80>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return new List<string>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5039d7e16cd460d80def45b1b5c6a48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5039d7e16cd460d80def45b1b5c6a48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] wordsInString = s.Split(' ');\n
    \       foreach (string word in wordsInString) {\n            if (word.Length
    == n) {\n                words.Add(word);\n            }\n        }\n        return
    words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb1ec3a0229e45c0b07c9d1668a88e09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb1ec3a0229e45c0b07c9d1668a88e09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return new List<string>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var count = 0;\n            foreach (var c in word)
    {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4e9f2cc1af745bf8d205e8a89de5ca4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4e9f2cc1af745bf8d205e8a89de5ca4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length == n) {\n                words.Add(word);\n
    \           }\n        }\n        return words;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5871c2cc7a064a15bee53b4c5b12ef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5871c2cc7a064a15bee53b4c5b12ef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == 0) {\n                continue;\n
    \           }\n            int count = 0;\n            foreach (char c in word)
    {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29bc2384d31a4a24855c417f6fad7bb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29bc2384d31a4a24855c417f6fad7bb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement this function\n        return new List<string>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa1ccd33a93e4b3390c3691b9c6cefba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa1ccd33a93e4b3390c3691b9c6cefba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <1c53ee443bf443f3abb234287f00cff6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <1c53ee443bf443f3abb234287f00cff6>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] wordsInString = s.Split(' ');\n
    \       foreach (string word in wordsInString) {\n            if (CountConsonants(word)
    == n) {\n                words.Add(word);\n            }\n        }\n        return
    words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4qufoqyj.cs(29,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // Your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <0f170b6ec77f4b53877d7d54b009148b>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <0f170b6ec77f4b53877d7d54b009148b>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == 0) continue;\n            int
    count = 0;\n            foreach (char c in word) {\n                if (c == 'a'
    || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n
    \               }\n            }\n            if (count == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c8772e0592140f8a9661b47c9f8fd6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6c8772e0592140f8a9661b47c9f8fd6d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length == 0) continue;\n            int
    count = 0;\n            foreach (char c in word) {\n                if (c != 'a'
    && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    count++;\n
    \               }\n            }\n            if (count == n) {\n                words.Add(word);\n
    \           }\n        }\n        return words;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cbca04d7dc464de4994c2e69bd329fd9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cbca04d7dc464de4994c2e69bd329fd9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == 0) {\n                continue;\n
    \           }\n            int consonants = 0;\n            foreach (char c in
    word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c
    != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08006ce7e258490e8b859d34d58f2ca5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08006ce7e258490e8b859d34d58f2ca5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return new List<string>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length > 0 && CountConsonants(word)
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpno3apeyk.cs(29,36): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var letter
    in word) {\n                if (!\"aeiou\".Contains(letter)) {\n                    consonants++;\n
    \               }\n            }\n            if (consonants == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a00e73d33f7c4083989d8b84769c23b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a00e73d33f7c4083989d8b84769c23b4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => \"bcdfghjklmnpqrstvwxyz\".Contains(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f81c0b71e9947338650acf66e445c8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f81c0b71e9947338650acf66e445c8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length == n) {\n                words.Add(word);\n
    \           }\n        }\n        return words;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5871c2cc7a064a15bee53b4c5b12ef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5871c2cc7a064a15bee53b4c5b12ef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5039d7e16cd460d80def45b1b5c6a48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5039d7e16cd460d80def45b1b5c6a48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement your solution here\n        return null;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement this function\n        return new List<string>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa1ccd33a93e4b3390c3691b9c6cefba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa1ccd33a93e4b3390c3691b9c6cefba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        int i = 0;\n        while (i < s.Length)
    {\n            int j = i;\n            while (j < s.Length && s[j] != ' ') {\n
    \               j++;\n            }\n            string word = s.Substring(i,
    j - i);\n            if (CountConsonants(word) == n) {\n                words.Add(word);\n
    \           }\n            i = j + 1;\n        }\n        return words;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5cbctu_h.cs(34,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == 0) {\n                continue;\n
    \           }\n            int consonants = 0;\n            foreach (char c in
    word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c
    != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08006ce7e258490e8b859d34d58f2ca5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08006ce7e258490e8b859d34d58f2ca5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement your solution here\n        return null;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // Your
    code goes here\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <ffea8772af534f639aaf62ff2f83cc80>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <ffea8772af534f639aaf62ff2f83cc80>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement your solution here\n        return null;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var result
    = new List<string>();\n        var words = s.Split(' ');\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (!\"aeiouAEIOU\".Contains(c)) {\n                    consonants++;\n
    \               }\n            }\n            if (consonants == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <665074e012f34fbdb4e49f436e1e9b1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <665074e012f34fbdb4e49f436e1e9b1a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (CountConsonants(word) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr6nabls5.cs(29,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement your solution here\n        return null;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length == 0) continue;\n            int
    count = 0;\n            foreach (char c in word) {\n                if (c == 'a'
    || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                    count++;\n
    \               }\n            }\n            if (count == n) {\n                words.Add(word);\n
    \           }\n        }\n        return words;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f77a30c7deb40ec9ebf845f693bf6d3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f77a30c7deb40ec9ebf845f693bf6d3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length > 0) {\n                int
    count = 0;\n                foreach (char c in word) {\n                    if
    (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                        count++;\n
    \                   }\n                }\n                if (count == n) {\n
    \                   result.Add(word);\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <595209866e154d4894fc33a13913e29d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <595209866e154d4894fc33a13913e29d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement your solution here\n        return null;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length == 0) {\n                continue;\n
    \           }\n            int count = 0;\n            foreach (char c in word)
    {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                words.Add(word);\n            }\n        }\n        return
    words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <421e94df48224de8ad4aba5d5dbb5612>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <421e94df48224de8ad4aba5d5dbb5612>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length > 0) {\n                int
    count = 0;\n                foreach (char c in word) {\n                    if
    (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                        count++;\n
    \                   }\n                }\n                if (count == n) {\n
    \                   words.Add(word);\n                }\n            }\n        }\n
    \       return words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56f712cc0e6b43aca52d3394e9208cbd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56f712cc0e6b43aca52d3394e9208cbd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length > 0) {\n                int
    count = 0;\n                foreach (char c in word) {\n                    if
    (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                        count++;\n
    \                   }\n                }\n                if (count == n) {\n
    \                   result.Add(word);\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <595209866e154d4894fc33a13913e29d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <595209866e154d4894fc33a13913e29d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length > 0) {\n                int
    count = 0;\n                foreach (char c in word) {\n                    if
    (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                        count++;\n
    \                   }\n                }\n                if (count == n) {\n
    \                   result.Add(word);\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <595209866e154d4894fc33a13913e29d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <595209866e154d4894fc33a13913e29d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] wordsInString = s.Split(' ');\n
    \       foreach (string word in wordsInString) {\n            if (word.Length
    == n) {\n                words.Add(word);\n            }\n        }\n        return
    words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb1ec3a0229e45c0b07c9d1668a88e09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb1ec3a0229e45c0b07c9d1668a88e09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        return
    new List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var count = 0;\n            foreach (var c in word)
    {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4e9f2cc1af745bf8d205e8a89de5ca4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4e9f2cc1af745bf8d205e8a89de5ca4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        return
    new List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var result
    = new List<string>();\n        var words = s.Split(' ');\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa5ov8j3u.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805105
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length > 0) {\n                int
    consonants = 0;\n                foreach (char c in word) {\n                    if
    (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                        consonants++;\n
    \                   }\n                }\n                if (consonants == n)
    {\n                    result.Add(word);\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a57081315114b9085930d4bde6d6591>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a57081315114b9085930d4bde6d6591>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var result
    = new List<string>();\n        var words = s.Split(' ');\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3854ed0cf72b4308b5a4c92ef8e3beb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3854ed0cf72b4308b5a4c92ef8e3beb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3d8625d065694a9f96f14d364578b8c8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3d8625d065694a9f96f14d364578b8c8>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            int count = 0;\n            foreach (char
    c in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o'
    && c != 'u') {\n                    count++;\n                }\n            }\n
    \           if (count == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ee0e94ef4664d35b47cd70a012494b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7ee0e94ef4664d35b47cd70a012494b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3d8625d065694a9f96f14d364578b8c8>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3d8625d065694a9f96f14d364578b8c8>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length >= n) {\n                int
    count = 0;\n                foreach (char c in word) {\n                    if
    (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                        count++;\n
    \                   }\n                }\n                if (count == n) {\n
    \                   result.Add(word);\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a08cbf1c5b0f46889e1688e2f1382653>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a08cbf1c5b0f46889e1688e2f1382653>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var result
    = new List<string>();\n        var words = s.Split(' ');\n        foreach (var
    word in words) {\n            var count = 0;\n            foreach (var c in word)
    {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c8511e6a7ba4d9fac5e52a2bdfd1d7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c8511e6a7ba4d9fac5e52a2bdfd1d7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement your solution here\n        return null;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length == 0) {\n                continue;\n
    \           }\n            int count = 0;\n            foreach (char c in word)
    {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                words.Add(word);\n            }\n        }\n        return
    words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <421e94df48224de8ad4aba5d5dbb5612>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <421e94df48224de8ad4aba5d5dbb5612>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // Implement
    this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <a43b23de82984f29b3080cd81e0d2a7c>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <a43b23de82984f29b3080cd81e0d2a7c>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var result
    = new List<string>();\n        var words = s.Split(' ');\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3854ed0cf72b4308b5a4c92ef8e3beb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3854ed0cf72b4308b5a4c92ef8e3beb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return new List<string>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        foreach (string word in s.Split(' ')) {\n
    \           if (word.Count(c => \"bcdfghjklmnpqrstvwxyz\".Contains(c)) == n) {\n
    \               words.Add(word);\n            }\n        }\n        return words;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16bd92d6df4e44bda3090af89405166c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16bd92d6df4e44bda3090af89405166c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] wordsInString = s.Split(' ');\n
    \       foreach (string word in wordsInString) {\n            if (word.Length
    == n) {\n                words.Add(word);\n            }\n        }\n        return
    words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb1ec3a0229e45c0b07c9d1668a88e09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb1ec3a0229e45c0b07c9d1668a88e09>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length > 0) {\n                int
    count = 0;\n                foreach (char c in word) {\n                    if
    (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                        count++;\n
    \                   }\n                }\n                if (count == n) {\n
    \                   result.Add(word);\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <595209866e154d4894fc33a13913e29d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <595209866e154d4894fc33a13913e29d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return new List<string>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] words_in_s = s.Split(' ');\n        foreach
    (string word in words_in_s) {\n            if (word.Length > 0) {\n                int
    num_consonants = 0;\n                foreach (char c in word) {\n                    if
    (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                        num_consonants++;\n
    \                   }\n                }\n                if (num_consonants ==
    n) {\n                    words.Add(word);\n                }\n            }\n
    \       }\n        return words;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88ec84f105674a98851d2fcd21d25037>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88ec84f105674a98851d2fcd21d25037>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length > 0) {\n                int
    consonants = 0;\n                foreach (char c in word) {\n                    if
    (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                        consonants++;\n
    \                   }\n                }\n                if (consonants == n)
    {\n                    result.Add(word);\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a57081315114b9085930d4bde6d6591>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a57081315114b9085930d4bde6d6591>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = word.Where(c => !\"aeiou\".Contains(c));\n
    \           if (consonants.Count() == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed208ffaf6724dd28182299cb702dcd3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ed208ffaf6724dd28182299cb702dcd3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == 0) {\n                continue;\n
    \           }\n            int count = 0;\n            foreach (char c in word)
    {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29bc2384d31a4a24855c417f6fad7bb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29bc2384d31a4a24855c417f6fad7bb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !\"aeiou\".Contains(c)) == n)
    {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88a98c444d4e4295b5d21e6c94563dac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <88a98c444d4e4295b5d21e6c94563dac>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <1c53ee443bf443f3abb234287f00cff6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <1c53ee443bf443f3abb234287f00cff6>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length == n) {\n                words.Add(word);\n
    \           }\n        }\n        return words;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5871c2cc7a064a15bee53b4c5b12ef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5871c2cc7a064a15bee53b4c5b12ef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length > 0) {\n                int
    count = 0;\n                foreach (char c in word) {\n                    if
    (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                        count++;\n
    \                   }\n                }\n                if (count == n) {\n
    \                   words.Add(word);\n                }\n            }\n        }\n
    \       return words;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56f712cc0e6b43aca52d3394e9208cbd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56f712cc0e6b43aca52d3394e9208cbd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length > 0) {\n                int
    consonants = 0;\n                foreach (char c in word) {\n                    if
    (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                        consonants++;\n
    \                   }\n                }\n                if (consonants == n)
    {\n                    result.Add(word);\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a57081315114b9085930d4bde6d6591>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a57081315114b9085930d4bde6d6591>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == 0) {\n                continue;\n
    \           }\n            int count = 0;\n            foreach (char c in word)
    {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29bc2384d31a4a24855c417f6fad7bb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29bc2384d31a4a24855c417f6fad7bb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement your solution here\n        return null;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        return
    new List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return new List<string>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <51960de43eb74ed195402686aabf5ad9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == 0) {\n                continue;\n
    \           }\n            int count = 0;\n            foreach (char c in word)
    {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u')
    {\n                    count++;\n                }\n            }\n            if
    (count == n) {\n                result.Add(word);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new
    string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29bc2384d31a4a24855c417f6fad7bb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <29bc2384d31a4a24855c417f6fad7bb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length == 0) continue;\n            int
    count = 0;\n            foreach (char c in word) {\n                if (c != 'a'
    && c != 'e' && c != 'i' && c != 'o' && c != 'u') count++;\n            }\n            if
    (count == n) words.Add(word);\n        }\n        return words;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c6087bcb9674e039e570462cf8da675>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c6087bcb9674e039e570462cf8da675>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement your solution here\n        return null;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (CountConsonants(word) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr6nabls5.cs(29,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5039d7e16cd460d80def45b1b5c6a48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5039d7e16cd460d80def45b1b5c6a48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] words_in_s = s.Split(' ');\n        foreach
    (string word in words_in_s) {\n            if (word.Length > 0) {\n                int
    num_consonants = 0;\n                foreach (char c in word) {\n                    if
    (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                        num_consonants
    += 1;\n                    }\n                }\n                if (num_consonants
    == n) {\n                    words.Add(word);\n                }\n            }\n
    \       }\n        return words;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <221600a5d5054ba482d53d1c04c0dce2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <221600a5d5054ba482d53d1c04c0dce2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement your solution here\n        return null;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement your solution here\n        return null;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var result
    = new List<string>();\n        var words = s.Split(' ');\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa5ov8j3u.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805105
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        return
    new List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf69ea04346b4860ba816237a33a2e27>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => \"bcdfghjklmnpqrstvwxyz\".Contains(c))
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f81c0b71e9947338650acf66e445c8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f81c0b71e9947338650acf66e445c8f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (CountConsonants(word) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr6nabls5.cs(29,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            var consonants = 0;\n            foreach (var c
    in word) {\n                if (c != 'a' && c != 'e' && c != 'i' && c != 'o' &&
    c != 'u') {\n                    consonants++;\n                }\n            }\n
    \           if (consonants == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23ef833f6ea9457eaa0185e27cbb88a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <bb0479f23d424ad9b915c48907f843bc>:0
    \n"
  stdout: ''
  timestamp: 1659805104
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] split = s.Split(' ');\n        foreach
    (string word in split) {\n            if (word.Length == n) {\n                words.Add(word);\n
    \           }\n        }\n        return words;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5871c2cc7a064a15bee53b4c5b12ef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5871c2cc7a064a15bee53b4c5b12ef2b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (CountConsonants(word) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr6nabls5.cs(29,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => c != 'a' && c != 'e' && c !=
    'i' && c != 'o' && c != 'u') == n) {\n                result.Add(word);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new
    List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfaf7c490a844a24b4a44b114c5d9491>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dfaf7c490a844a24b4a44b114c5d9491>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Length > 0 && CountConsonants(word)
    == n) {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpno3apeyk.cs(29,36): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    words = new List<string>();\n        string[] wordsInString = s.Split(' ');\n
    \       foreach (string word in wordsInString) {\n            if (word.Length
    > 0) {\n                int numberOfConsonants = 0;\n                foreach (char
    c in word) {\n                    if (c != 'a' && c != 'e' && c != 'i' && c !=
    'o' && c != 'u') {\n                        numberOfConsonants++;\n                    }\n
    \               }\n                if (numberOfConsonants == n) {\n                    words.Add(word);\n
    \               }\n            }\n        }\n        return words;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a
    little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da66cdbb2014493d95151b19c2a9bfd8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da66cdbb2014493d95151b19c2a9bfd8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        List<string>
    result = new List<string>();\n        string[] words = s.Split(' ');\n        foreach
    (string word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n
    \               result.Add(word);\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxdduin2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805105
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Length == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4aaeb3dc8e974fefa22b88ec4f3f5c01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4aaeb3dc8e974fefa22b88ec4f3f5c01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805105
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        // TODO:
    Implement your solution here\n        return null;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00020] in <3a6e1040b12e41808b3cc3db7fab53e4>:0
    \n"
  stdout: ''
  timestamp: 1659805103
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => \"aeiou\".Contains(c)) == n)
    {\n                result.Add(word);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple
    white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello
    world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n
    \   Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new
    string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new
    List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new
    List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"f\"}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <867ebbcfbe6c469f822001117c05741b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <867ebbcfbe6c469f822001117c05741b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659805104
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a string s and a natural number n, you have been tasked
    to implement \n    // a function that returns a list of all words from string
    s that contain exactly \n    // n consonants, in order these words appear in the
    string s.\n    // If the string s is empty then the function should return an
    empty list.\n    // Note: you may assume the input string contains only letters
    and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"),
    (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>
    SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new
    string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple
    white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello
    world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n
    \   // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n
    \   public static List<string> SelectWords(string s, long n) {\n        var words
    = s.Split(' ');\n        var result = new List<string>();\n        foreach (var
    word in words) {\n            if (word.Count(c => !IsVowel(c)) == n) {\n                result.Add(word);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary
    had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\",
    (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"),
    (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello world\"),
    (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n    Debug.Assert(SelectWords((\"Uncle
    sam\"), (3L)).Equals((new List<string>(new string[]{(string)\"Uncle\"}))));\n
    \   Debug.Assert(SelectWords((\"\"), (4L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"a
    b c d e f\"), (1L)).Equals((new List<string>(new string[]{(string)\"b\", (string)\"c\",
    (string)\"d\", (string)\"f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcucvyoo2.cs(29,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805103
