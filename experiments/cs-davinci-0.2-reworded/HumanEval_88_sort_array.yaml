name: HumanEval_88_sort_array
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of non-negative integers, return a cocs of the\
  \ given list after sorting,\n    // you will sort the given list in ascending order\
  \ if the sum( first index value, last index value) is odd,\n    // or sort it in\
  \ descending order if the sum( first index value, last index value) is even.\n \
  \   // Note:\n    // * don't change the given list.\n    // Examples:\n    // >>>\
  \ SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new\
  \ List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n\
  \    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L,\
  \ (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n\
  \    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L,\
  \ (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long> array)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,\
  \ (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,\
  \ (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,\
  \ (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new\
  \ long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,\
  \ (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,\
  \ (long)11L}))));\n    }\n\n}\n"
completions: ["        // Write your code here\n        return array;", "        List<long>\
    \ result = new List<long>();\n        if (array.Count == 0) {\n            return\
    \ result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n\
    \            return result;\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  "        if (array.Count == 0) {\n            return array;\n        }\n       \
    \ if (array.Count == 1) {\n            return array;\n        }\n        if (array.Count\
    \ == 2) {\n            if ((array[0] + array[1]) % 2 == 0) {\n               \
    \ return new List<long>(new long[]{array[1], array[0]});\n            } else {\n\
    \                return array;\n            }\n        }\n        if ((array[0]\
    \ + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n         \
    \   array.Reverse();\n        } else {\n            array.Sort();\n        }\n\
    \        return array;", "        if (array.Count == 0) {\n            return\
    \ array;\n        }\n        if (array.Count == 1) {\n            return array;\n\
    \        }\n        if (array.Count == 2) {\n            if ((array[0] + array[1])\
    \ % 2 == 0) {\n                return new List<long>(new long[]{array[1], array[0]});\n\
    \            } else {\n                return array;\n            }\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a,\
    \ b) => (int)(b - a));\n        } else {\n            array.Sort((a, b) => (int)(a\
    \ - b));\n        }\n        return array;", "        // Write your code here\n\
    \        return array;", '        return array;', "        // Your code goes here.\n\
    \        return array;", "        if (array.Count == 0) {\n            return\
    \ array;\n        }\n        if (array.Count == 1) {\n            return array;\n\
    \        }\n        if (array.Count == 2) {\n            if ((array[0] + array[1])\
    \ % 2 == 0) {\n                return new List<long>(new long[]{array[1], array[0]});\n\
    \            } else {\n                return array;\n            }\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a,\
    \ b) => b.CompareTo(a));\n        } else {\n            array.Sort();\n      \
    \  }\n        return array;", '        return array;', '        return null;',
  "        // Your code goes here.\n        return array;", "        // Write your\
    \ code here\n        return array;", "        // Write your code here\n      \
    \  return array;", "        List<long> result = new List<long>();\n        if\
    \ (array.Count == 0) {\n            return result;\n        }\n        if (array.Count\
    \ == 1) {\n            result.Add(array[0]);\n            return result;\n   \
    \     }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n       \
    \     array.Sort();\n            array.Reverse();\n        } else {\n        \
    \    array.Sort();\n        }\n        return array;", "        List<long> result\
    \ = new List<long>();\n        if (array.Count == 0) {\n            return result;\n\
    \        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n\
    \            return result;\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  "        List<long> result = new List<long>();\n        long first = array[0];\n\
    \        long last = array[array.Count - 1];\n        if ((first + last) % 2 ==\
    \ 0) {\n            array.Sort();\n            array.Reverse();\n            return\
    \ array;\n        }\n        array.Sort();\n        return array;", '        return
    array;', '        return array;', "        List<long> result = new List<long>();\n\
    \        if (array.Count == 0) {\n            return result;\n        }\n    \
    \    if (array.Count == 1) {\n            result.Add(array[0]);\n            return\
    \ result;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0)\
    \ {\n            array.Sort();\n            array.Reverse();\n        } else {\n\
    \            array.Sort();\n        }\n        return array;", "        if (array.Count\
    \ == 0) {\n            return array;\n        }\n        if (array.Count == 1)\
    \ {\n            return array;\n        }\n        if (array.Count == 2) {\n \
    \           if ((array[0] + array[1]) % 2 == 0) {\n                return new\
    \ List<long>(new long[]{array[1], array[0]});\n            } else {\n        \
    \        return array;\n            }\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort((a, b) => -1 * a.CompareTo(b));\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  "        // Write your code here\n        return array;", "        // Write your\
    \ code here\n        return array;", "        var sum = array[0] + array[array.Count\
    \ - 1];\n        if (sum % 2 == 0) {\n            array.Sort((a, b) => (int)(b\
    \ - a));\n        } else {\n            array.Sort((a, b) => (int)(a - b));\n\
    \        }\n        return array;", "        if (array.Count == 0) {\n       \
    \     return array;\n        }\n        if (array.Count == 1) {\n            return\
    \ array;\n        }\n        if (array.Count == 2) {\n            if ((array[0]\
    \ + array[1]) % 2 == 0) {\n                return new List<long>(new long[]{array[1],\
    \ array[0]});\n            } else {\n                return array;\n         \
    \   }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n\
    \            array.Sort();\n            array.Reverse();\n        } else {\n \
    \           array.Sort();\n        }\n        return array;", '        return
    array;', "        // Write your code here\n        return array;", "        if\
    \ (array.Count == 0) {\n            return array;\n        }\n        if (array.Count\
    \ == 1) {\n            return array;\n        }\n        if (array.Count == 2)\
    \ {\n            if ((array[0] + array[1]) % 2 == 0) {\n                return\
    \ new List<long>(new long[]{array[1], array[0]});\n            } else {\n    \
    \            return array;\n            }\n        }\n        List<long> left\
    \ = new List<long>();\n        List<long> right = new List<long>();\n        for\
    \ (int i = 0; i < array.Count; i++) {\n            if (i < array.Count / 2) {\n\
    \                left.Add(array[i]);\n            } else {\n                right.Add(array[i]);\n\
    \            }\n        }\n        left = SortArray(left);\n        right = SortArray(right);\n\
    \        return Merge(left, right);", "        if (array.Count == 0) {\n     \
    \       return array;\n        }\n        if (array.Count == 1) {\n          \
    \  return array;\n        }\n        if (array.Count == 2) {\n            if ((array[0]\
    \ + array[1]) % 2 == 0) {\n                return new List<long>(new long[]{array[1],\
    \ array[0]});\n            } else {\n                return array;\n         \
    \   }\n        }\n        List<long> sorted = new List<long>();\n        sorted.Add(array[0]);\n\
    \        sorted.Add(array[1]);\n        for (int i = 2; i < array.Count; i++)\
    \ {\n            if ((array[0] + array[1]) % 2 == 0) {\n                sorted.Insert(0,\
    \ array[i]);\n            } else {\n                sorted.Add(array[i]);\n  \
    \          }\n        }\n        return sorted;", "        List<long> result =\
    \ new List<long>();\n        if (array.Count == 0) {\n            return result;\n\
    \        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n\
    \            return result;\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  "        List<long> result = new List<long>();\n        if (array.Count == 0) {\n\
    \            return result;\n        }\n        if (array.Count == 1) {\n    \
    \        result.Add(array[0]);\n            return result;\n        }\n      \
    \  if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;", "        List<long> result = new List<long>();\n\
    \        if (array.Count == 0) {\n            return result;\n        }\n    \
    \    if (array.Count == 1) {\n            result.Add(array[0]);\n            return\
    \ result;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0)\
    \ {\n            array.Sort();\n            array.Reverse();\n        } else {\n\
    \            array.Sort();\n        }\n        return array;", "        List<long>\
    \ result = new List<long>();\n        if (array.Count == 0) {\n            return\
    \ result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n\
    \            return result;\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  '        return new List<long>();', "        // Your code goes here.\n        return\
    \ array;", "        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if ((array[0] + array[1]) % 2 ==\
    \ 0) {\n                return new List<long>(new long[]{array[1], array[0]});\n\
    \            } else {\n                return array;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        List<long> even = new\
    \ List<long>();\n        List<long> odd = new List<long>();\n        for (int\
    \ i = 0; i < array.Count; i++) {\n            if (array[i] % 2 == 0) {\n     \
    \           even.Add(array[i]);\n            } else {\n                odd.Add(array[i]);\n\
    \            }\n        }\n        even.Sort();\n        odd.Sort();\n       \
    \ odd.Reverse();\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n\
    \            for (int i = 0; i < odd.Count; i++) {\n                result.Add(odd[i]);\n\
    \            }\n            for (int i = 0; i < even.Count; i++) {\n         \
    \       result.Add(even[i]);\n            }\n        } else {\n            for\
    \ (int i = 0; i < even.Count; i++) {\n                result.Add(even[i]);\n \
    \           }\n            for (int i = 0; i < odd.Count; i++) {\n           \
    \     result.Add(odd[i]);\n            }\n        }\n        return result;",
  "        // Your code goes here.\n        return array;", "        List<long> result\
    \ = new List<long>();\n        if (array.Count == 0) {\n            return result;\n\
    \        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n\
    \            return result;\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  '        return array;', '        return array;', '        return array;', "   \
    \     // Write your code here\n        return array;", "        if (array.Count\
    \ == 0) {\n            return array;\n        }\n        if (array.Count == 1)\
    \ {\n            return array;\n        }\n        if (array.Count == 2) {\n \
    \           if ((array[0] + array[1]) % 2 == 0) {\n                return new\
    \ List<long>(new long[]{array[1], array[0]});\n            } else {\n        \
    \        return array;\n            }\n        }\n        long first = array[0];\n\
    \        long last = array[array.Count - 1];\n        if ((first + last) % 2 ==\
    \ 0) {\n            array.Sort();\n            array.Reverse();\n        } else\
    \ {\n            array.Sort();\n        }\n        return array;", "        if\
    \ (array.Count == 0) {\n            return array;\n        }\n        if (array.Count\
    \ == 1) {\n            return array;\n        }\n        if (array.Count == 2)\
    \ {\n            if ((array[0] + array[1]) % 2 == 0) {\n                return\
    \ new List<long>(new long[]{array[1], array[0]});\n            } else {\n    \
    \            return array;\n            }\n        }\n        if ((array[0] +\
    \ array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  "        // Write your code here\n        return array;", "        if (array.Count\
    \ == 0) {\n            return array;\n        }\n        if (array.Count == 1)\
    \ {\n            return array;\n        }\n        if (array.Count == 2) {\n \
    \           if ((array[0] + array[1]) % 2 == 0) {\n                return new\
    \ List<long>(new long[]{array[1], array[0]});\n            } else {\n        \
    \        return array;\n            }\n        }\n        long first = array[0];\n\
    \        long last = array[array.Count - 1];\n        if ((first + last) % 2 ==\
    \ 0) {\n            array.Sort();\n            array.Reverse();\n        } else\
    \ {\n            array.Sort();\n        }\n        return array;", '        return
    new List<long>();', '        return array;', '        return array;', "      \
    \  if (array.Count == 0) {\n            return new List<long>();\n        }\n\
    \        if (array.Count == 1) {\n            return array;\n        }\n     \
    \   if (array.Count == 2) {\n            if (array[0] > array[1]) {\n        \
    \        long temp = array[0];\n                array[0] = array[1];\n       \
    \         array[1] = temp;\n            }\n            return array;\n       \
    \ }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n           \
    \ array.Sort();\n            array.Reverse();\n        } else {\n            array.Sort();\n\
    \        }\n        return array;", '        return array;', "        if (array.Count\
    \ == 0) {\n            return array;\n        }\n        if (array.Count == 1)\
    \ {\n            return array;\n        }\n        if (array.Count == 2) {\n \
    \           if ((array[0] + array[1]) % 2 == 0) {\n                return new\
    \ List<long>(new long[]{array[1], array[0]});\n            } else {\n        \
    \        return array;\n            }\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  '        return array;', "        List<long> result = new List<long>();\n      \
    \  if (array.Count == 0) {\n            return result;\n        }\n        if\
    \ (array.Count == 1) {\n            result.Add(array[0]);\n            return\
    \ result;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0)\
    \ {\n            array.Sort();\n            array.Reverse();\n        } else {\n\
    \            array.Sort();\n        }\n        return array;", "        if (array.Count\
    \ == 0) {\n            return array;\n        }\n        if (array.Count == 1)\
    \ {\n            return array;\n        }\n        if (array.Count == 2) {\n \
    \           if ((array[0] + array[1]) % 2 == 0) {\n                return new\
    \ List<long>(new long[]{array[1], array[0]});\n            } else {\n        \
    \        return array;\n            }\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n     \
    \   } else {\n            array.Sort();\n        }\n        return array;", " \
    \       // Your code goes here.\n        return array;", "        if (array.Count\
    \ == 0) {\n            return array;\n        }\n        if (array.Count == 1)\
    \ {\n            return array;\n        }\n        if (array.Count == 2) {\n \
    \           if ((array[0] + array[1]) % 2 == 0) {\n                return new\
    \ List<long>(new long[]{array[1], array[0]});\n            } else {\n        \
    \        return array;\n            }\n        }\n        List<long> result =\
    \ new List<long>();\n        List<long> even = new List<long>();\n        List<long>\
    \ odd = new List<long>();\n        for (int i = 0; i < array.Count; i++) {\n \
    \           if (array[i] % 2 == 0) {\n                even.Add(array[i]);\n  \
    \          } else {\n                odd.Add(array[i]);\n            }\n     \
    \   }\n        even.Sort();\n        odd.Sort();\n        odd.Reverse();\n   \
    \     if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            for (int\
    \ i = 0; i < odd.Count; i++) {\n                result.Add(odd[i]);\n        \
    \    }\n            for (int i = 0; i < even.Count; i++) {\n                result.Add(even[i]);\n\
    \            }\n        } else {\n            for (int i = 0; i < even.Count;\
    \ i++) {\n                result.Add(even[i]);\n            }\n            for\
    \ (int i = 0; i < odd.Count; i++) {\n                result.Add(odd[i]);\n   \
    \         }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        if (array.Count == 0) {\n            return result;\n\
    \        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n\
    \            return result;\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  "        // Write your code here\n        return array;", '        return array;',
  '        return array;', "        // Write your code here\n        return array;",
  '        return array;', "        if (array.Count == 0) {\n            return array;\n\
    \        }\n        if (array.Count == 1) {\n            return array;\n     \
    \   }\n        if (array.Count == 2) {\n            if ((array[0] + array[1])\
    \ % 2 == 0) {\n                return new List<long>(new long[]{array[1], array[0]});\n\
    \            } else {\n                return array;\n            }\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;", "        // Your code here\n        return\
    \ array;", "        if (array.Count <= 1) {\n            return array;\n     \
    \   }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n         \
    \   array.Sort((a, b) => (int)(b - a));\n        } else {\n            array.Sort((a,\
    \ b) => (int)(a - b));\n        }\n        return array;", "        // Your code\
    \ goes here.\n        return array;", "        // Write your code here\n     \
    \   return array;", "        var result = new List<long>();\n        var first\
    \ = array[0];\n        var last = array[array.Count - 1];\n        if ((first\
    \ + last) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  "        if (array.Count == 0) {\n            return array;\n        }\n       \
    \ if (array.Count == 1) {\n            return array;\n        }\n        if (array.Count\
    \ == 2) {\n            if (array[0] > array[1]) {\n                long temp =\
    \ array[0];\n                array[0] = array[1];\n                array[1] =\
    \ temp;\n            }\n            return array;\n        }\n        if ((array[0]\
    \ + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n         \
    \   array.Reverse();\n        } else {\n            array.Sort();\n        }\n\
    \        return array;", '        return array;', "        // Write your code\
    \ here\n        return array;", "        if (array.Count == 0) {\n           \
    \ return array;\n        }\n        if (array.Count == 1) {\n            return\
    \ array;\n        }\n        if (array.Count == 2) {\n            if ((array[0]\
    \ + array[1]) % 2 == 0) {\n                return new List<long>(new long[]{array[1],\
    \ array[0]});\n            } else {\n                return array;\n         \
    \   }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n\
    \            array.Sort();\n            array.Reverse();\n        } else {\n \
    \           array.Sort();\n        }\n        return array;", '        return
    array;', "        if (array.Count == 0) {\n            return array;\n       \
    \ }\n        if (array.Count == 1) {\n            return array;\n        }\n \
    \       if (array.Count == 2) {\n            if ((array[0] + array[1]) % 2 ==\
    \ 0) {\n                return new List<long>(new long[]{array[1], array[0]});\n\
    \            } else {\n                return array;\n            }\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            List<long>\
    \ left = SortArray(array.GetRange(0, array.Count / 2));\n            List<long>\
    \ right = SortArray(array.GetRange(array.Count / 2, array.Count - array.Count\
    \ / 2));\n            List<long> result = new List<long>();\n            int leftIndex\
    \ = 0;\n            int rightIndex = 0;\n            while (leftIndex < left.Count\
    \ && rightIndex < right.Count) {\n                if (left[leftIndex] > right[rightIndex])\
    \ {\n                    result.Add(left[leftIndex]);\n                    leftIndex++;\n\
    \                } else {\n                    result.Add(right[rightIndex]);\n\
    \                    rightIndex++;\n                }\n            }\n       \
    \     while (leftIndex < left.Count) {\n                result.Add(left[leftIndex]);\n\
    \                leftIndex++;\n            }\n            while (rightIndex <\
    \ right.Count) {\n                result.Add(right[rightIndex]);\n           \
    \     rightIndex++;\n            }\n            return result;\n        } else\
    \ {\n            List<long> left = SortArray(array.GetRange(0, array.Count / 2));\n\
    \            List<long> right = SortArray(array.GetRange(array.Count / 2, array.Count\
    \ - array.Count / 2));\n            List<long> result = new List<long>();\n  \
    \          int leftIndex = 0;\n            int rightIndex = 0;\n            while\
    \ (leftIndex < left.Count && rightIndex < right.Count) {\n                if (left[leftIndex]\
    \ < right[rightIndex]) {\n                    result.Add(left[leftIndex]);\n \
    \                   leftIndex++;\n                } else {\n                 \
    \   result.Add(", "        List<long> sorted = new List<long>();\n        if (array.Count\
    \ == 0) {\n            return sorted;\n        }\n        if (array.Count == 1)\
    \ {\n            sorted.Add(array[0]);\n            return sorted;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            sorted\
    \ = array.OrderByDescending(x => x).ToList();\n        } else {\n            sorted\
    \ = array.OrderBy(x => x).ToList();\n        }\n        return sorted;", "   \
    \     if (array.Count == 0) {\n            return array;\n        }\n        if\
    \ (array.Count == 1) {\n            return array;\n        }\n        if (array.Count\
    \ == 2) {\n            if ((array[0] + array[1]) % 2 == 0) {\n               \
    \ return new List<long>(new long[]{array[1], array[0]});\n            } else {\n\
    \                return array;\n            }\n        }\n        if ((array[0]\
    \ + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n         \
    \   array.Reverse();\n        } else {\n            array.Sort();\n        }\n\
    \        return array;", "        if (array.Count == 0) {\n            return\
    \ array;\n        }\n        if (array.Count == 1) {\n            return array;\n\
    \        }\n        if (array.Count == 2) {\n            if ((array[0] + array[1])\
    \ % 2 == 0) {\n                if (array[0] > array[1]) {\n                  \
    \  long temp = array[0];\n                    array[0] = array[1];\n         \
    \           array[1] = temp;\n                }\n            } else {\n      \
    \          if (array[0] < array[1]) {\n                    long temp = array[0];\n\
    \                    array[0] = array[1];\n                    array[1] = temp;\n\
    \                }\n            }\n            return array;\n        }\n    \
    \    if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a,\
    \ b) => -1 * a.CompareTo(b));\n        } else {\n            array.Sort();\n \
    \       }\n        return array;", "        // Write your code here\n        return\
    \ array;", "        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if ((array[0] + array[1]) % 2 ==\
    \ 0) {\n                return new List<long>(new long[]{array[1], array[0]});\n\
    \            } else {\n                return array;\n            }\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            List<long>\
    \ result = new List<long>();\n            for (int i = array.Count - 1; i >= 0;\
    \ i--) {\n                result.Add(array[i]);\n            }\n            return\
    \ result;\n        } else {\n            return array;\n        }", "        if\
    \ (array.Count == 0) {\n            return array;\n        }\n        if (array.Count\
    \ == 1) {\n            return array;\n        }\n        if (array.Count == 2)\
    \ {\n            if ((array[0] + array[1]) % 2 == 0) {\n                return\
    \ new List<long>(new long[]{array[1], array[0]});\n            } else {\n    \
    \            return array;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        List<long> odd = new List<long>();\n        List<long>\
    \ even = new List<long>();\n        for (int i = 0; i < array.Count; i++) {\n\
    \            if (array[i] % 2 == 0) {\n                even.Add(array[i]);\n \
    \           } else {\n                odd.Add(array[i]);\n            }\n    \
    \    }\n        even.Sort();\n        odd.Sort();\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            even.Reverse();\n        } else {\n         \
    \   odd.Reverse();\n        }\n        result.AddRange(odd);\n        result.AddRange(even);\n\
    \        return result;", "        if (array.Count == 0) {\n            return\
    \ array;\n        }\n        if (array.Count == 1) {\n            return array;\n\
    \        }\n        if (array.Count == 2) {\n            if ((array[0] + array[1])\
    \ % 2 == 0) {\n                return new List<long>(new long[]{array[1], array[0]});\n\
    \            } else {\n                return array;\n            }\n        }\n\
    \        long first = array[0];\n        long last = array[array.Count - 1];\n\
    \        if ((first + last) % 2 == 0) {\n            array.Sort();\n         \
    \   array.Reverse();\n        } else {\n            array.Sort();\n        }\n\
    \        return array;", "        // Write your code here\n        return array;",
  "        List<long> result = new List<long>();\n        if (array.Count == 0) {\n\
    \            return result;\n        }\n        if (array.Count == 1) {\n    \
    \        result.Add(array[0]);\n            return result;\n        }\n      \
    \  if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;", "        // Write your code here\n        return\
    \ array;", "        if (array.Count == 0) {\n            return array;\n     \
    \   }\n        if (array.Count == 1) {\n            return array;\n        }\n\
    \        if (array.Count == 2) {\n            if ((array[0] + array[1]) % 2 ==\
    \ 0) {\n                var temp = array[0];\n                array[0] = array[1];\n\
    \                array[1] = temp;\n            }\n            return array;\n\
    \        }\n        var result = new List<long>();\n        var left = new List<long>();\n\
    \        var right = new List<long>();\n        var mid = array.Count / 2;\n \
    \       for (int i = 0; i < mid; i++) {\n            left.Add(array[i]);\n   \
    \     }\n        for (int i = mid; i < array.Count; i++) {\n            right.Add(array[i]);\n\
    \        }\n        left = SortArray(left);\n        right = SortArray(right);\n\
    \        var i1 = 0;\n        var i2 = 0;\n        while (i1 < left.Count && i2\
    \ < right.Count) {\n            if ((left[i1] + right[i2]) % 2 == 0) {\n     \
    \           result.Add(right[i2]);\n                i2++;\n            } else\
    \ {\n                result.Add(left[i1]);\n                i1++;\n          \
    \  }\n        }\n        while (i1 < left.Count) {\n            result.Add(left[i1]);\n\
    \            i1++;\n        }\n        while (i2 < right.Count) {\n          \
    \  result.Add(right[i2]);\n            i2++;\n        }\n        return result;",
  "        var result = new List<long>();\n        var isOdd = (array[0] + array[array.Count\
    \ - 1]) % 2 == 1;\n        if (isOdd) {\n            result = array.OrderBy(x\
    \ => x).ToList();\n        } else {\n            result = array.OrderByDescending(x\
    \ => x).ToList();\n        }\n        return result;", "        if (array.Count\
    \ == 0) {\n            return array;\n        }\n        if (array.Count == 1)\
    \ {\n            return array;\n        }\n        if (array.Count == 2) {\n \
    \           if ((array[0] + array[1]) % 2 == 0) {\n                return new\
    \ List<long>(new long[]{array[1], array[0]});\n            } else {\n        \
    \        return array;\n            }\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  "        if (array.Count == 0) {\n            return array;\n        }\n       \
    \ if (array.Count == 1) {\n            return array;\n        }\n        if (array.Count\
    \ == 2) {\n            if ((array[0] + array[1]) % 2 == 0) {\n               \
    \ return array;\n            }\n            else {\n                return new\
    \ List<long>(new long[]{array[1], array[0]});\n            }\n        }\n    \
    \    List<long> result = new List<long>();\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            result.Add(array[array.Count - 1]);\n       \
    \     array.RemoveAt(array.Count - 1);\n            result.AddRange(SortArray(array));\n\
    \        }\n        else {\n            result.Add(array[0]);\n            array.RemoveAt(0);\n\
    \            result.AddRange(SortArray(array));\n        }\n        return result;",
  "        List<long> sorted = new List<long>();\n        sorted.AddRange(array);\n\
    \        sorted.Sort();\n        if ((sorted[0] + sorted[sorted.Count - 1]) %\
    \ 2 == 0) {\n            sorted.Reverse();\n        }\n        return sorted;",
  "        List<long> result = new List<long>();\n        if (array.Count == 0) {\n\
    \            return result;\n        }\n        if (array.Count == 1) {\n    \
    \        result.Add(array[0]);\n            return result;\n        }\n      \
    \  if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n            return array;\n        }\n        array.Sort();\n\
    \        return array;", "        if (array.Count == 0) {\n            return\
    \ array;\n        }\n        if (array.Count == 1) {\n            return array;\n\
    \        }\n        if (array.Count == 2) {\n            if ((array[0] + array[1])\
    \ % 2 == 0) {\n                return new List<long>(new long[]{array[1], array[0]});\n\
    \            } else {\n                return array;\n            }\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n        } else {\n            array.Sort();\n \
    \       }\n        return array;", '        return array;', "        if (array.Count\
    \ == 0) {\n            return array;\n        }\n        if (array.Count == 1)\
    \ {\n            return array;\n        }\n        if (array.Count == 2) {\n \
    \           if ((array[0] + array[1]) % 2 == 0) {\n                return new\
    \ List<long>(new long[]{array[1], array[0]});\n            } else {\n        \
    \        return array;\n            }\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            return new List<long>(new long[]{array[array.Count\
    \ - 1]}.Concat(SortArray(array.GetRange(1, array.Count - 2))).Concat(new long[]{array[0]}));\n\
    \        } else {\n            return new List<long>(new long[]{array[0]}.Concat(SortArray(array.GetRange(1,\
    \ array.Count - 2))).Concat(new long[]{array[array.Count - 1]}));\n        }",
  "        // Write your code here\n        return null;", "        // Write your\
    \ code here\n        return array;", "        if (array.Count == 0) {\n      \
    \      return array;\n        }\n        if (array.Count == 1) {\n           \
    \ return array;\n        }\n        if (array.Count == 2) {\n            if ((array[0]\
    \ + array[1]) % 2 == 0) {\n                return new List<long>(new long[]{array[1],\
    \ array[0]});\n            } else {\n                return array;\n         \
    \   }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n\
    \            array.Sort();\n            array.Reverse();\n        } else {\n \
    \           array.Sort();\n        }\n        return array;", "        // Your\
    \ code goes here.\n        return array;", "        if (array.Count == 0) {\n\
    \            return array;\n        }\n        if (array.Count == 1) {\n     \
    \       return array;\n        }\n        if (array.Count == 2) {\n          \
    \  if ((array[0] + array[1]) % 2 == 0) {\n                return array;\n    \
    \        }\n            else {\n                return new List<long>(new long[]{(long)array[1],\
    \ (long)array[0]});\n            }\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \            return array;\n        }\n        else {\n            array.Sort();\n\
    \            return array;\n        }", '        return array;', "        // Write\
    \ your code here\n        return array;", "        // Your code goes here.\n \
    \       return null;", "        if (array.Count == 0) {\n            return array;\n\
    \        }\n        if (array.Count == 1) {\n            return array;\n     \
    \   }\n        if (array.Count == 2) {\n            if ((array[0] + array[1])\
    \ % 2 == 0) {\n                return new List<long>(new long[]{array[1], array[0]});\n\
    \            } else {\n                return array;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        List<long> even = new\
    \ List<long>();\n        List<long> odd = new List<long>();\n        for (int\
    \ i = 0; i < array.Count; i++) {\n            if (array[i] % 2 == 0) {\n     \
    \           even.Add(array[i]);\n            } else {\n                odd.Add(array[i]);\n\
    \            }\n        }\n        even.Sort();\n        odd.Sort();\n       \
    \ if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            even.Reverse();\n\
    \            odd.Reverse();\n        }\n        result.AddRange(even);\n     \
    \   result.AddRange(odd);\n        return result;", "        if (array.Count ==\
    \ 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n\
    \            return array;\n        }\n        if (array.Count == 2) {\n     \
    \       if ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new\
    \ long[]{array[1], array[0]});\n            } else {\n                return array;\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     List<long> even = new List<long>();\n        List<long> odd = new List<long>();\n\
    \        for (int i = 0; i < array.Count; i++) {\n            if (array[i] % 2\
    \ == 0) {\n                even.Add(array[i]);\n            } else {\n       \
    \         odd.Add(array[i]);\n            }\n        }\n        even.Sort();\n\
    \        odd.Sort();\n        if ((array[0] + array[array.Count - 1]) % 2 == 0)\
    \ {\n            even.Reverse();\n            odd.Reverse();\n        }\n    \
    \    for (int i = 0; i < even.Count; i++) {\n            result.Add(even[i]);\n\
    \        }\n        for (int i = 0; i < odd.Count; i++) {\n            result.Add(odd[i]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  return array;", "        List<long> result = new List<long>();\n        if\
    \ (array.Count == 0) {\n            return result;\n        }\n        if (array.Count\
    \ == 1) {\n            result.Add(array[0]);\n            return result;\n   \
    \     }\n        if (array.Count == 2) {\n            if (array[0] > array[1])\
    \ {\n                result.Add(array[1]);\n                result.Add(array[0]);\n\
    \            } else {\n                result.Add(array[0]);\n               \
    \ result.Add(array[1]);\n            }\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            result.Add(array[array.Count\
    \ - 1]);\n            array.RemoveAt(array.Count - 1);\n            result.AddRange(SortArray(array));\n\
    \        } else {\n            result.Add(array[0]);\n            array.RemoveAt(0);\n\
    \            result.AddRange(SortArray(array));\n        }\n        return result;",
  '        return array;', "        // Write your code here\n        return array;",
  '        return array;', '        return array;', "        List<long> sorted = new\
    \ List<long>();\n        if (array.Count == 0) {\n            return sorted;\n\
    \        }\n        if (array.Count == 1) {\n            sorted.Add(array[0]);\n\
    \            return sorted;\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            sorted = array.OrderByDescending(x => x).ToList();\n\
    \        } else {\n            sorted = array.OrderBy(x => x).ToList();\n    \
    \    }\n        return sorted;", "        if (array.Count == 0) {\n          \
    \  return array;\n        }\n        if (array.Count == 1) {\n            return\
    \ array;\n        }\n        if (array.Count == 2) {\n            if (array[0]\
    \ > array[1]) {\n                long temp = array[0];\n                array[0]\
    \ = array[1];\n                array[1] = temp;\n            }\n            return\
    \ array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0)\
    \ {\n            array.Sort((a, b) => (int)(b - a));\n        } else {\n     \
    \       array.Sort((a, b) => (int)(a - b));\n        }\n        return array;",
  "        List<long> result = new List<long>();\n        if (array.Count == 0) {\n\
    \            return result;\n        }\n        if (array.Count == 1) {\n    \
    \        result.Add(array[0]);\n            return result;\n        }\n      \
    \  long first = array[0];\n        long last = array[array.Count - 1];\n     \
    \   if ((first + last) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  "        // your code here\n        return array;", "        // Write your code\
    \ here\n        return array;", '        return array;', "        List<long> result\
    \ = new List<long>();\n        if (array.Count == 0) {\n            return result;\n\
    \        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n\
    \            return result;\n        }\n        long first = array[0];\n     \
    \   long last = array[array.Count - 1];\n        if ((first + last) % 2 == 0)\
    \ {\n            array.Sort();\n            array.Reverse();\n        } else {\n\
    \            array.Sort();\n        }\n        return array;", '        return
    array;', "        if (array.Count == 0) {\n            return array;\n       \
    \ }\n        if (array.Count == 1) {\n            return array;\n        }\n \
    \       if (array.Count == 2) {\n            if (array[0] > array[1]) {\n    \
    \            long temp = array[0];\n                array[0] = array[1];\n   \
    \             array[1] = temp;\n            }\n            return array;\n   \
    \     }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n       \
    \     array.Sort((a, b) => (int)(b - a));\n        } else {\n            array.Sort((a,\
    \ b) => (int)(a - b));\n        }\n        return array;", "        // Write your\
    \ code here\n        return array;", "        // Your code goes here.\n      \
    \  return array;", "        // Write your code here\n        return array;", " \
    \       if (array.Count == 0) {\n            return array;\n        }\n      \
    \  if (array.Count == 1) {\n            return array;\n        }\n        if (array.Count\
    \ == 2) {\n            if (array[0] > array[1]) {\n                long temp =\
    \ array[0];\n                array[0] = array[1];\n                array[1] =\
    \ temp;\n            }\n            return array;\n        }\n        if ((array[0]\
    \ + array[array.Count - 1]) % 2 == 0) {\n            return array.OrderByDescending(x\
    \ => x).ToList();\n        }\n        return array.OrderBy(x => x).ToList();",
  "        // Your code goes here.\n        return array;", '        return array;',
  "        List<long> sorted = new List<long>();\n        if (array.Count == 0) {\n\
    \            return sorted;\n        }\n        if (array.Count == 1) {\n    \
    \        sorted.Add(array[0]);\n            return sorted;\n        }\n      \
    \  if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            sorted = array.OrderByDescending(x\
    \ => x).ToList();\n        } else {\n            sorted = array.OrderBy(x => x).ToList();\n\
    \        }\n        return sorted;", "        // Write your code here\n      \
    \  return array;", '        return array;', "        if (array.Count == 0) {\n\
    \            return array;\n        }\n        if (array.Count == 1) {\n     \
    \       return array;\n        }\n        if (array.Count == 2) {\n          \
    \  if (array[0] > array[1]) {\n                long temp = array[0];\n       \
    \         array[0] = array[1];\n                array[1] = temp;\n           \
    \ }\n            return array;\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n\
    \        } else {\n            array.Sort();\n        }\n        return array;",
  "        // Write your code here\n        return array;", "        if (array.Count\
    \ == 0) {\n            return array;\n        }\n        if (array.Count == 1)\
    \ {\n            return array;\n        }\n        if (array.Count == 2) {\n \
    \           if (array[0] > array[1]) {\n                long temp = array[0];\n\
    \                array[0] = array[1];\n                array[1] = temp;\n    \
    \        }\n            return array;\n        }\n        if ((array[0] + array[array.Count\
    \ - 1]) % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n       \
    \ } else {\n            array.Sort((a, b) => (int)(a - b));\n        }\n     \
    \   return array;", "        List<long> result = new List<long>();\n        if\
    \ (array.Count == 0) {\n            return result;\n        }\n        if (array.Count\
    \ == 1) {\n            result.Add(array[0]);\n            return result;\n   \
    \     }\n        if (array.Count == 2) {\n            if (array[0] > array[1])\
    \ {\n                result.Add(array[1]);\n                result.Add(array[0]);\n\
    \            } else {\n                result.Add(array[0]);\n               \
    \ result.Add(array[1]);\n            }\n            return result;\n        }\n\
    \        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n\
    \            array.Reverse();\n            return array;\n        } else {\n \
    \           array.Sort();\n            return array;\n        }", "        List<long>\
    \ result = new List<long>();\n        long first = array[0];\n        long last\
    \ = array[array.Count - 1];\n        if ((first + last) % 2 == 0) {\n        \
    \    array.Sort();\n            array.Reverse();\n            return array;\n\
    \        }\n        array.Sort();\n        return array;"]
stop_tokens:
- "\n    }\n"
