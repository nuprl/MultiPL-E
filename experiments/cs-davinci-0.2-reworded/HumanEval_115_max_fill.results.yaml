language: cs
name: HumanEval_115_max_fill
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        for (int i = 0; i < grid.Count; i++) {\n\
    \            for (int j = 0; j < grid[i].Count; j++) {\n                if (grid[i][j]\
    \ == 1) {\n                    maxFill += capacity;\n                }\n     \
    \       }\n        }\n        return maxFill;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <049b986a73d149d9896fb0d06f01979b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <049b986a73d149d9896fb0d06f01979b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        return 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        for (long i = 0; i < grid.Count; i++)\
    \ {\n            for (long j = 0; j < grid[(int)i].Count; j++) {\n           \
    \     if (grid[(int)i][(int)j] == 1) {\n                    maxFill += capacity;\n\
    \                }\n            }\n        }\n        return maxFill;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39fbf3d001fb4c65ad31733dfae33481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39fbf3d001fb4c65ad31733dfae33481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        return 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long maxFillRow = 0;\n        long maxFillCol\
    \ = 0;\n        long maxFillRowCount = 0;\n        long maxFillColCount = 0;\n\
    \        long maxFillRowCapacity = 0;\n        long maxFillColCapacity = 0;\n\
    \        long maxFillRowCapacityCount = 0;\n        long maxFillColCapacityCount\
    \ = 0;\n        long maxFillRowCapacityCountMax = 0;\n        long maxFillColCapacityCountMax\
    \ = 0;\n        long maxFillRowCapacityCountMaxCount = 0;\n        long maxFillColCapacityCountMaxCount\
    \ = 0;\n        long maxFillRowCapacityCountMaxCountMax = 0;\n        long maxFillColCapacityCountMaxCountMax\
    \ = 0;\n        long maxFillRowCapacityCountMaxCountMaxCount = 0;\n        long\
    \ maxFillColCapacityCountMaxCountMaxCount = 0;\n        long maxFillRowCapacityCountMaxCountMaxCountMax\
    \ = 0;\n        long maxFillColCapacityCountMaxCountMaxCountMax = 0;\n       \
    \ long maxFillRowCapacityCountMaxCountMaxCountMaxCount = 0;\n        long maxFillColCapacityCountMaxCountMaxCountMaxCount\
    \ = 0;\n        long maxFillRowCapacityCountMaxCountMaxCountMaxCountMax = 0;\n\
    \        long maxFillColCapacityCountMaxCountMaxCountMaxCountMax = 0;\n      \
    \  long maxFillRowCapacityCountMaxCountMaxCountMaxCountMaxCount = 0;\n       \
    \ long maxFillColCapacityCountMaxCountMaxCountMaxCountMaxCount = 0;\n        long\
    \ maxFillRowCapacityCountMaxCountMaxCountMaxCountMaxCountMax = 0;\n        long\
    \ maxFillColCapacityCountMaxCountMaxCountMaxCountMaxCountMax = 0;\n        long\
    \ maxFillRowCapacityCountMaxCountMaxCountMaxCountMaxCountMaxCount = 0;\n     \
    \   long maxFillColCapacityCountMaxCountMaxCountMaxCountMaxCountMaxCount = 0;\n\
    \        long maxFillRowCapacityCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\
    \ = 0;\n        long maxFillColCapacityCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\
    \ = 0;\n        long maxFillRowCapacityCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCount\
    \ = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpikzninf8.cs(31,14): warning CS0219: The variable ''maxFill'' is assigned
    but its value is never used

    /tmp/tmpikzninf8.cs(32,14): warning CS0219: The variable ''maxFillRow'' is assigned
    but its value is never used

    /tmp/tmpikzninf8.cs(33,14): warning CS0219: The variable ''maxFillCol'' is assigned
    but its value is never used

    /tmp/tmpikzninf8.cs(34,14): warning CS0219: The variable ''maxFillRowCount'' is
    assigned but its value is never used

    /tmp/tmpikzninf8.cs(35,14): warning CS0219: The variable ''maxFillColCount'' is
    assigned but its value is never used

    /tmp/tmpikzninf8.cs(36,14): warning CS0219: The variable ''maxFillRowCapacity''
    is assigned but its value is never used

    /tmp/tmpikzninf8.cs(37,14): warning CS0219: The variable ''maxFillColCapacity''
    is assigned but its value is never used

    /tmp/tmpikzninf8.cs(38,14): warning CS0219: The variable ''maxFillRowCapacityCount''
    is assigned but its value is never used

    /tmp/tmpikzninf8.cs(39,14): warning CS0219: The variable ''maxFillColCapacityCount''
    is assigned but its value is never used

    /tmp/tmpikzninf8.cs(40,14): warning CS0219: The variable ''maxFillRowCapacityCountMax''
    is assigned but its value is never used

    /tmp/tmpikzninf8.cs(41,14): warning CS0219: The variable ''maxFillColCapacityCountMax''
    is assigned but its value is never used

    /tmp/tmpikzninf8.cs(42,14): warning CS0219: The variable ''maxFillRowCapacityCountMaxCount''
    is assigned but its value is never used

    /tmp/tmpikzninf8.cs(43,14): warning CS0219: The variable ''maxFillColCapacityCountMaxCount''
    is assigned but its value is never used

    /tmp/tmpikzninf8.cs(44,14): warning CS0219: The variable ''maxFillRowCapacityCountMaxCountMax''
    is assigned but its value is never used

    /tmp/tmpikzninf8.cs(45,14): warning CS0219: The variable ''maxFillColCapacityCountMaxCountMax''
    is assigned but its value is never used

    /tmp/tmpikzninf8.cs(46,14): warning CS0219: The variable ''maxFillRowCapacityCountMaxCountMaxCount''
    i'
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // your code goes here\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <869716c4398149b58800ef28dc2b6976>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <869716c4398149b58800ef28dc2b6976>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        for (int i = 0; i < grid.Count; i++) {\n\
    \            for (int j = 0; j < grid[i].Count; j++) {\n                if (grid[i][j]\
    \ == 1) {\n                    maxFill += capacity;\n                }\n     \
    \       }\n        }\n        return maxFill;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <049b986a73d149d9896fb0d06f01979b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <049b986a73d149d9896fb0d06f01979b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // your code goes here\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <869716c4398149b58800ef28dc2b6976>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <869716c4398149b58800ef28dc2b6976>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long count = 0;\n        for (int i = 0; i < grid.Count; i++) {\n\
    \            for (int j = 0; j < grid[i].Count; j++) {\n                if (grid[i][j]\
    \ == 1) {\n                    count += capacity;\n                    for (int\
    \ k = i + 1; k < grid.Count; k++) {\n                        if (grid[k][j] ==\
    \ 1) {\n                            count += 1;\n                        }\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b144411e1c7425a9c3e5ed0b7a989a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b144411e1c7425a9c3e5ed0b7a989a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long max = 0;\n        foreach (List<long> row in grid) {\n     \
    \       long sum = 0;\n            foreach (long cell in row) {\n            \
    \    sum += cell;\n            }\n            max = Math.Max(max, sum);\n    \
    \    }\n        return max * capacity;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae7a9fe8a9b5408483166e1ba43ee474>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae7a9fe8a9b5408483166e1ba43ee474>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long res = 0;\n        for (long i = 0; i < grid.Count; i++) {\n\
    \            for (long j = 0; j < grid[(int)i].Count; j++) {\n               \
    \ if (grid[(int)i][(int)j] == 1) {\n                    res += capacity;\n   \
    \             }\n            }\n        }\n        return res;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed35199949114723ae3f7bbedb531728>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed35199949114723ae3f7bbedb531728>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        for (int i = 0; i < grid.Count; i++) {\n\
    \            for (int j = 0; j < grid[i].Count; j++) {\n                if (grid[i][j]\
    \ == 1) {\n                    maxFill += capacity;\n                }\n     \
    \       }\n        }\n        return maxFill;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <049b986a73d149d9896fb0d06f01979b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <049b986a73d149d9896fb0d06f01979b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        for (long i = 0; i < grid.Count; i++)\
    \ {\n            for (long j = 0; j < grid[(int)i].Count; j++) {\n           \
    \     if (grid[(int)i][(int)j] == 1) {\n                    maxFill += capacity;\n\
    \                }\n            }\n        }\n        return maxFill;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39fbf3d001fb4c65ad31733dfae33481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39fbf3d001fb4c65ad31733dfae33481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long maxFillRow = 0;\n        long maxFillCol\
    \ = 0;\n        long maxFillRowCount = 0;\n        long maxFillColCount = 0;\n\
    \        long maxFillRowCount2 = 0;\n        long maxFillColCount2 = 0;\n    \
    \    long maxFillRowCount3 = 0;\n        long maxFillColCount3 = 0;\n        long\
    \ maxFillRowCount4 = 0;\n        long maxFillColCount4 = 0;\n        long maxFillRowCount5\
    \ = 0;\n        long maxFillColCount5 = 0;\n        long maxFillRowCount6 = 0;\n\
    \        long maxFillColCount6 = 0;\n        long maxFillRowCount7 = 0;\n    \
    \    long maxFillColCount7 = 0;\n        long maxFillRowCount8 = 0;\n        long\
    \ maxFillColCount8 = 0;\n        long maxFillRowCount9 = 0;\n        long maxFillColCount9\
    \ = 0;\n        long maxFillRowCount10 = 0;\n        long maxFillColCount10 =\
    \ 0;\n        long maxFillRowCount11 = 0;\n        long maxFillColCount11 = 0;\n\
    \        long maxFillRowCount12 = 0;\n        long maxFillColCount12 = 0;\n  \
    \      long maxFillRowCount13 = 0;\n        long maxFillColCount13 = 0;\n    \
    \    long maxFillRowCount14 = 0;\n        long maxFillColCount14 = 0;\n      \
    \  long maxFillRowCount15 = 0;\n        long maxFillColCount15 = 0;\n        long\
    \ maxFillRowCount16 = 0;\n        long maxFillColCount16 = 0;\n        long maxFillRowCount17\
    \ = 0;\n        long maxFillColCount17 = 0;\n        long maxFillRowCount18 =\
    \ 0;\n        long maxFillColCount18 = 0;\n        long maxFillRowCount19 = 0;\n\
    \        long maxFillColCount19 = 0;\n        long maxFillRowCount20 = 0;\n  \
    \      long maxFillColCount20 = 0;\n        long maxFillRowCount21 = 0;\n    \
    \    long maxFillColCount21 = 0;\n        long maxFillRowCount22 = 0;\n      \
    \  long maxFillColCount22 = 0;\n        long max\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwcvlvj_z.cs(78,17): error CS1002: ; expected

    '
  timestamp: 1659793321
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long maxFillRow = 0;\n        long maxFillCol\
    \ = 0;\n        long maxFillRowCount = 0;\n        long maxFillColCount = 0;\n\
    \        long maxFillRowCapacity = 0;\n        long maxFillColCapacity = 0;\n\
    \        long maxFillRowCapacityCount = 0;\n        long maxFillColCapacityCount\
    \ = 0;\n        long maxFillRowCapacityCount2 = 0;\n        long maxFillColCapacityCount2\
    \ = 0;\n        long maxFillRowCapacityCount3 = 0;\n        long maxFillColCapacityCount3\
    \ = 0;\n        long maxFillRowCapacityCount4 = 0;\n        long maxFillColCapacityCount4\
    \ = 0;\n        long maxFillRowCapacityCount5 = 0;\n        long maxFillColCapacityCount5\
    \ = 0;\n        long maxFillRowCapacityCount6 = 0;\n        long maxFillColCapacityCount6\
    \ = 0;\n        long maxFillRowCapacityCount7 = 0;\n        long maxFillColCapacityCount7\
    \ = 0;\n        long maxFillRowCapacityCount8 = 0;\n        long maxFillColCapacityCount8\
    \ = 0;\n        long maxFillRowCapacityCount9 = 0;\n        long maxFillColCapacityCount9\
    \ = 0;\n        long maxFillRowCapacityCount10 = 0;\n        long maxFillColCapacityCount10\
    \ = 0;\n        long maxFillRowCapacityCount11 = 0;\n        long maxFillColCapacityCount11\
    \ = 0;\n        long maxFillRowCapacityCount12 = 0;\n        long maxFillColCapacityCount12\
    \ = 0;\n        long maxFillRowCapacityCount13 = 0;\n        long maxFillColCapacityCount13\
    \ = 0;\n        long maxFillRowCapacityCount14 = 0;\n        long maxFillColCapacityCount14\
    \ = 0;\n        long maxFillRowCapacityCount15 = 0;\n        long maxFillColCapacityCount15\
    \ = 0;\n        long maxFillRowCapacityCount16 = 0;\n        long maxFillColCapacityCount16\
    \ = 0;\n        long maxFillRowCapacityCount17 = 0;\n        long maxFillColCapacityCount17\
    \ = 0;\n        long max\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1bailwmy.cs(72,17): error CS1002: ; expected

    '
  timestamp: 1659793321
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        long rowCount = grid.Count;\n        long\
    \ columnCount = grid[0].Count;\n        long[,] water = new long[rowCount, columnCount];\n\
    \        for (long row = 0; row < rowCount; row++) {\n            for (long column\
    \ = 0; column < columnCount; column++) {\n                water[row, column] =\
    \ grid[(int)row][(int)column];\n            }\n        }\n        for (long row\
    \ = 0; row < rowCount; row++) {\n            for (long column = 0; column < columnCount;\
    \ column++) {\n                if (water[row, column] == 1) {\n              \
    \      result += 1;\n                    long waterToFill = capacity;\n      \
    \              while (waterToFill > 0) {\n                        if (row > 0)\
    \ {\n                            long waterToRemove = Math.Min(waterToFill, water[row\
    \ - 1, column]);\n                            water[row - 1, column] -= waterToRemove;\n\
    \                            waterToFill -= waterToRemove;\n                 \
    \       }\n                        if (row < rowCount - 1) {\n               \
    \             long waterToRemove = Math.Min(waterToFill, water[row + 1, column]);\n\
    \                            water[row + 1, column] -= waterToRemove;\n      \
    \                      waterToFill -= waterToRemove;\n                       \
    \ }\n                        if (column > 0) {\n                            long\
    \ waterToRemove = Math.Min(waterToFill, water[row, column - 1]);\n           \
    \                 water[row, column - 1] -= waterToRemove;\n                 \
    \           waterToFill -= waterToRemove;\n                        }\n       \
    \                 if (column < columnCount - 1) {\n                          \
    \  long waterToRemove = Math.Min(waterToFill, water[row, column + 1]);\n     \
    \                       water[row, column + 1] -= waterToRemove;\n           \
    \                 waterToFill -= waterToRemove;\n                        }\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659793326
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        for (long i = 0; i < grid.Count; i++) {\n\
    \            for (long j = 0; j < grid[(int)i].Count; j++) {\n               \
    \ if (grid[(int)i][(int)j] == 1) {\n                    result += capacity;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f164dd153844b4da7daca21166475d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f164dd153844b4da7daca21166475d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd6a3e60366d446c9c487e3d378d8aa9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd6a3e60366d446c9c487e3d378d8aa9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long res = 0;\n        for (int i = 0; i < grid.Count; i++) {\n \
    \           for (int j = 0; j < grid[i].Count; j++) {\n                if (grid[i][j]\
    \ == 1) {\n                    res += capacity;\n                    for (int\
    \ k = i + 1; k < grid.Count; k++) {\n                        if (grid[k][j] ==\
    \ 1) {\n                            res--;\n                        }\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d85bc1800ae84560b8466bd7b489c618>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d85bc1800ae84560b8466bd7b489c618>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        for (long i = 0; i < grid.Count; i++) {\n\
    \            for (long j = 0; j < grid[(int)i].Count; j++) {\n               \
    \ if (grid[(int)i][(int)j] == 1) {\n                    result += capacity;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f164dd153844b4da7daca21166475d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f164dd153844b4da7daca21166475d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long maxFillRow = 0;\n        long maxFillCol\
    \ = 0;\n        long maxFillRowCount = 0;\n        long maxFillColCount = 0;\n\
    \        for (long i = 0; i < grid.Count; i++) {\n            for (long j = 0;\
    \ j < grid[(int)i].Count; j++) {\n                if (grid[(int)i][(int)j] ==\
    \ 1) {\n                    maxFillRow++;\n                }\n            }\n\
    \            if (maxFillRow > maxFillRowCount) {\n                maxFillRowCount\
    \ = maxFillRow;\n            }\n            maxFillRow = 0;\n        }\n     \
    \   for (long i = 0; i < grid[0].Count; i++) {\n            for (long j = 0; j\
    \ < grid.Count; j++) {\n                if (grid[(int)j][(int)i] == 1) {\n   \
    \                 maxFillCol++;\n                }\n            }\n          \
    \  if (maxFillCol > maxFillColCount) {\n                maxFillColCount = maxFillCol;\n\
    \            }\n            maxFillCol = 0;\n        }\n        maxFill = maxFillRowCount\
    \ + maxFillColCount;\n        return maxFill;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83e16709f51e4120a671441a7c5cba9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83e16709f51e4120a671441a7c5cba9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long count = 0;\n        for (int i = 0; i < grid.Count; i++) {\n\
    \            for (int j = 0; j < grid[i].Count; j++) {\n                if (grid[i][j]\
    \ == 1) {\n                    count += capacity;\n                    for (int\
    \ k = i - 1; k >= 0; k--) {\n                        if (grid[k][j] == 1) {\n\
    \                            count -= capacity;\n                            break;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d882e2f965b4ed5afe3eac19478859f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d882e2f965b4ed5afe3eac19478859f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f51c52b76f524b54995a6cef5f47c1b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f51c52b76f524b54995a6cef5f47c1b1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        foreach (List<long> row in grid) {\n \
    \           long rowFill = 0;\n            foreach (long well in row) {\n    \
    \            if (well == 1) {\n                    rowFill += capacity;\n    \
    \            }\n            }\n            maxFill += rowFill;\n        }\n  \
    \      return maxFill;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3964481197ef4e94a946f3b86c604715>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3964481197ef4e94a946f3b86c604715>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // your code here\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <312982fcca6d4497a70c25ff0477e0e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <312982fcca6d4497a70c25ff0477e0e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        for (int i = 0; i < grid.Count; i++) {\n\
    \            long currentRow = 0;\n            for (int j = 0; j < grid[i].Count;\
    \ j++) {\n                currentRow += grid[i][j];\n            }\n         \
    \   if (currentRow > capacity) {\n                result += currentRow - capacity;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a6f76e820894c1190c37f192f798a2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a6f76e820894c1190c37f192f798a2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd6a3e60366d446c9c487e3d378d8aa9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd6a3e60366d446c9c487e3d378d8aa9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long maxRow = 0;\n        long maxCol\
    \ = 0;\n        long rowCount = grid.Count;\n        long colCount = grid[0].Count;\n\
    \        for (long row = 0; row < rowCount; row++) {\n            for (long col\
    \ = 0; col < colCount; col++) {\n                if (grid[(int)row][(int)col]\
    \ == 1) {\n                    maxFill++;\n                    maxRow = Math.Max(maxRow,\
    \ row);\n                    maxCol = Math.Max(maxCol, col);\n               \
    \ }\n            }\n        }\n        long maxRowFill = maxRow + 1;\n       \
    \ long maxColFill = maxCol + 1;\n        long maxFillPerRow = Math.Min(maxColFill,\
    \ capacity);\n        long maxFillPerCol = Math.Min(maxRowFill, capacity);\n \
    \       long maxFillPerBucket = Math.Min(maxFillPerRow, maxFillPerCol);\n    \
    \    long maxFillPerBucketCount = maxFill / maxFillPerBucket;\n        long maxFillPerBucketRemainder\
    \ = maxFill % maxFillPerBucket;\n        long maxFillPerBucketRemainderCount =\
    \ maxFillPerBucketRemainder == 0 ? 0 : 1;\n        return maxFillPerBucketCount\
    \ + maxFillPerBucketRemainderCount;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1af762f16b34281930ae0c543d811d0>:0 \n"
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        return 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        for (long i = 0; i < grid.Count; i++) {\n\
    \            for (long j = 0; j < grid[(int)i].Count; j++) {\n               \
    \ if (grid[(int)i][(int)j] == 1) {\n                    result += 1;\n       \
    \         }\n            }\n        }\n        return result * capacity;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10a0d82eae24af38ee9748bdf2a3cef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b10a0d82eae24af38ee9748bdf2a3cef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        for (long i = 0; i < grid.Count; i++)\
    \ {\n            for (long j = 0; j < grid[(int)i].Count; j++) {\n           \
    \     if (grid[(int)i][(int)j] == 1) {\n                    maxFill += capacity;\n\
    \                }\n            }\n        }\n        return maxFill;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39fbf3d001fb4c65ad31733dfae33481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39fbf3d001fb4c65ad31733dfae33481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long rowCount = grid.Count;\n        long\
    \ colCount = grid[0].Count;\n        long[,] grid2D = new long[rowCount, colCount];\n\
    \        for (long i = 0; i < rowCount; i++) {\n            for (long j = 0; j\
    \ < colCount; j++) {\n                grid2D[i, j] = grid[(int)i][(int)j];\n \
    \           }\n        }\n        for (long i = 0; i < rowCount; i++) {\n    \
    \        for (long j = 0; j < colCount; j++) {\n                if (grid2D[i,\
    \ j] == 1) {\n                    maxFill++;\n                    for (long k\
    \ = i; k < rowCount; k++) {\n                        for (long l = j; l < colCount;\
    \ l++) {\n                            if (grid2D[k, l] == 1) {\n             \
    \                   grid2D[k, l] = 0;\n                            }\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n        return maxFill;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f419c1e8423141b18795aa6e1dbb7075>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f419c1e8423141b18795aa6e1dbb7075>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd6a3e60366d446c9c487e3d378d8aa9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd6a3e60366d446c9c487e3d378d8aa9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long rowCount = grid.Count;\n        long\
    \ colCount = grid[0].Count;\n        for (long row = 0; row < rowCount; row++)\
    \ {\n            for (long col = 0; col < colCount; col++) {\n               \
    \ if (grid[(int)row][(int)col] == 1) {\n                    maxFill += capacity;\n\
    \                }\n            }\n        }\n        return maxFill;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <113b369c7b4b434dbfec79aa1f2e2e6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <113b369c7b4b434dbfec79aa1f2e2e6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98080061eb9146ba8ffeab2b843125b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98080061eb9146ba8ffeab2b843125b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd6a3e60366d446c9c487e3d378d8aa9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd6a3e60366d446c9c487e3d378d8aa9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long row = 0;\n        long col = 0;\n\
    \        long count = 0;\n        long max = 0;\n        long maxRow = 0;\n  \
    \      long maxCol = 0;\n        long maxCount = 0;\n        long maxMax = 0;\n\
    \        long maxMaxRow = 0;\n        long maxMaxCol = 0;\n        long maxMaxCount\
    \ = 0;\n        long maxMaxMax = 0;\n        long maxMaxMaxRow = 0;\n        long\
    \ maxMaxMaxCol = 0;\n        long maxMaxMaxCount = 0;\n        long maxMaxMaxMax\
    \ = 0;\n        long maxMaxMaxMaxRow = 0;\n        long maxMaxMaxMaxCol = 0;\n\
    \        long maxMaxMaxMaxCount = 0;\n        long maxMaxMaxMaxMax = 0;\n    \
    \    long maxMaxMaxMaxMaxRow = 0;\n        long maxMaxMaxMaxMaxCol = 0;\n    \
    \    long maxMaxMaxMaxMaxCount = 0;\n        long maxMaxMaxMaxMaxMax = 0;\n  \
    \      long maxMaxMaxMaxMaxMaxRow = 0;\n        long maxMaxMaxMaxMaxMaxCol = 0;\n\
    \        long maxMaxMaxMaxMaxMaxCount = 0;\n        long maxMaxMaxMaxMaxMaxMax\
    \ = 0;\n        long maxMaxMaxMaxMaxMaxMaxRow = 0;\n        long maxMaxMaxMaxMaxMaxMaxCol\
    \ = 0;\n        long maxMaxMaxMaxMaxMaxMaxCount = 0;\n        long maxMaxMaxMaxMaxMaxMaxMax\
    \ = 0;\n        long maxMaxMaxMaxMaxMaxMaxMaxRow = 0;\n        long maxMaxMaxMaxMaxMaxMaxMaxCol\
    \ = 0;\n        long maxMaxMaxMaxMaxMaxMaxMaxCount = 0;\n        long maxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = 0;\n        long maxMaxMaxMaxMaxMaxMaxMaxMaxRow = 0;\n        long maxMaxMaxMaxMaxMaxMaxMaxMaxCol\
    \ = 0;\n        long maxMaxMaxMaxMaxMaxMaxMaxMaxCount = 0;\n        long maxMaxMaxMaxMaxMaxMaxMaxMaxMax\
    \ = 0;\n        long maxMaxMaxMaxMaxMaxMaxMaxMaxMaxRow = 0;\n        long maxMaxMaxMaxMaxMaxMaxMaxMaxMaxCol\
    \ = 0;\n        long maxMaxMaxMaxMaxMaxMax\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpihufsgge.cs(74,35): error CS1002: ; expected

    '
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        return 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        for (long i = 0; i < grid.Count; i++) {\n\
    \            for (long j = 0; j < grid[(int)i].Count; j++) {\n               \
    \ if (grid[(int)i][(int)j] == 1) {\n                    result += capacity;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f164dd153844b4da7daca21166475d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f164dd153844b4da7daca21166475d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long count = 0;\n        for (int i = 0; i < grid.Count; i++) {\n\
    \            for (int j = 0; j < grid[i].Count; j++) {\n                if (grid[i][j]\
    \ == 1) {\n                    count += capacity;\n                    for (int\
    \ k = i + 1; k < grid.Count; k++) {\n                        if (grid[k][j] ==\
    \ 1) {\n                            count += capacity;\n                     \
    \   } else {\n                            break;\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a144d2debc9a44ba9fe20ba45a62a25f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a144d2debc9a44ba9fe20ba45a62a25f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        return 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long max = 0;\n        long count = 0;\n        foreach (var row\
    \ in grid) {\n            foreach (var col in row) {\n                if (col\
    \ > max) {\n                    max = col;\n                }\n            }\n\
    \        }\n        for (long i = 0; i < max; i++) {\n            foreach (var\
    \ row in grid) {\n                foreach (var col in row) {\n               \
    \     if (col > 0) {\n                        col--;\n                       \
    \ count++;\n                    }\n                }\n            }\n        }\n\
    \        return count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9yp1sp_0.cs(44,25): error CS1656: Cannot assign to ''col'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long rowCount = grid.Count;\n        long\
    \ columnCount = grid[0].Count;\n        long[,] gridArray = new long[rowCount,\
    \ columnCount];\n        for (long i = 0; i < rowCount; i++) {\n            for\
    \ (long j = 0; j < columnCount; j++) {\n                gridArray[i, j] = grid[(int)i][(int)j];\n\
    \            }\n        }\n        for (long i = 0; i < rowCount; i++) {\n   \
    \         for (long j = 0; j < columnCount; j++) {\n                if (gridArray[i,\
    \ j] == 1) {\n                    maxFill += capacity;\n                    for\
    \ (long k = 0; k < rowCount; k++) {\n                        if (gridArray[k,\
    \ j] == 1) {\n                            gridArray[k, j] = 0;\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n        return maxFill;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea3b55bfcb7f4179b7e017349f5f3cb1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea3b55bfcb7f4179b7e017349f5f3cb1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long rowCount = grid.Count;\n        long\
    \ colCount = grid[0].Count;\n        long[] rowMax = new long[rowCount];\n   \
    \     long[] colMax = new long[colCount];\n        for (long row = 0; row < rowCount;\
    \ row++) {\n            for (long col = 0; col < colCount; col++) {\n        \
    \        if (grid[(int)row][(int)col] == 1) {\n                    rowMax[(int)row]++;\n\
    \                    colMax[(int)col]++;\n                }\n            }\n \
    \       }\n        for (long row = 0; row < rowCount; row++) {\n            maxFill\
    \ += Math.Min(rowMax[(int)row], capacity);\n        }\n        for (long col =\
    \ 0; col < colCount; col++) {\n            maxFill += Math.Min(colMax[(int)col],\
    \ capacity);\n        }\n        maxFill -= capacity * capacity;\n        return\
    \ maxFill;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf8e412d2945420da548e0235d9c144c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf8e412d2945420da548e0235d9c144c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long rowCount = grid.Count;\n        long\
    \ colCount = grid[0].Count;\n        long[,] gridArray = new long[rowCount, colCount];\n\
    \        for (long i = 0; i < rowCount; i++) {\n            for (long j = 0; j\
    \ < colCount; j++) {\n                gridArray[i, j] = grid[(int)i][(int)j];\n\
    \            }\n        }\n        for (long i = 0; i < rowCount; i++) {\n   \
    \         for (long j = 0; j < colCount; j++) {\n                if (gridArray[i,\
    \ j] == 1) {\n                    long bucketFill = 0;\n                    long\
    \ bucketFillRow = i;\n                    while (bucketFillRow < rowCount && bucketFill\
    \ < capacity) {\n                        bucketFill += gridArray[bucketFillRow,\
    \ j];\n                        gridArray[bucketFillRow, j] = 0;\n            \
    \            bucketFillRow++;\n                    }\n                    maxFill++;\n\
    \                }\n            }\n        }\n        return maxFill;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4fcc8d485e3b448d8a69b59cc3dfca34>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4fcc8d485e3b448d8a69b59cc3dfca34>:0 \n"
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long rowCount = grid.Count;\n        long\
    \ colCount = grid[0].Count;\n        for (long row = 0; row < rowCount; row++)\
    \ {\n            for (long col = 0; col < colCount; col++) {\n               \
    \ if (grid[(int)row][(int)col] == 1) {\n                    maxFill += capacity;\n\
    \                    long rowToFill = row - 1;\n                    while (rowToFill\
    \ >= 0 && grid[(int)rowToFill][(int)col] == 1) {\n                        grid[(int)rowToFill][(int)col]\
    \ = 0;\n                        rowToFill--;\n                    }\n        \
    \        }\n            }\n        }\n        return maxFill;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1a9a1c33bbe4e21af2da48ec7d0e92f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a1a9a1c33bbe4e21af2da48ec7d0e92f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        for (long i = 0; i < grid.Count; i++)\
    \ {\n            for (long j = 0; j < grid[(int)i].Count; j++) {\n           \
    \     if (grid[(int)i][(int)j] == 1) {\n                    maxFill += capacity;\n\
    \                }\n            }\n        }\n        return maxFill;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39fbf3d001fb4c65ad31733dfae33481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39fbf3d001fb4c65ad31733dfae33481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long fill = 0;\n        for (int i = 0;\
    \ i < grid.Count; i++) {\n            for (int j = 0; j < grid[i].Count; j++)\
    \ {\n                if (grid[i][j] == 1) {\n                    fill++;\n   \
    \             }\n            }\n            if (fill > maxFill) {\n          \
    \      maxFill = fill;\n            }\n            fill = 0;\n        }\n    \
    \    return maxFill * capacity;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86a4f4882e474974ab5d6dd95e0f2bdb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86a4f4882e474974ab5d6dd95e0f2bdb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long fill = 0;\n        foreach (List<long>\
    \ row in grid) {\n            fill = 0;\n            foreach (long well in row)\
    \ {\n                if (well == 1) {\n                    fill++;\n         \
    \       } else {\n                    if (fill > 0) {\n                      \
    \  maxFill += fill / capacity;\n                        if (fill % capacity >\
    \ 0) {\n                            maxFill++;\n                        }\n  \
    \                      fill = 0;\n                    }\n                }\n \
    \           }\n            if (fill > 0) {\n                maxFill += fill /\
    \ capacity;\n                if (fill % capacity > 0) {\n                    maxFill++;\n\
    \                }\n            }\n        }\n        return maxFill;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        for (long i = 0; i < grid.Count; i++)\
    \ {\n            for (long j = 0; j < grid[(int)i].Count; j++) {\n           \
    \     if (grid[(int)i][(int)j] == 1) {\n                    maxFill += capacity;\n\
    \                }\n            }\n        }\n        return maxFill;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39fbf3d001fb4c65ad31733dfae33481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <39fbf3d001fb4c65ad31733dfae33481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long count = 0;\n        for (int i = 0; i < grid.Count; i++) {\n\
    \            for (int j = 0; j < grid[i].Count; j++) {\n                if (grid[i][j]\
    \ == 1) {\n                    count += capacity;\n                    for (int\
    \ k = i; k < grid.Count; k++) {\n                        if (grid[k][j] == 1)\
    \ {\n                            grid[k][j] = 0;\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4829a98b5525441d9e389cb152227df7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4829a98b5525441d9e389cb152227df7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long maxFillRow = 0;\n        long maxFillCol\
    \ = 0;\n        long maxFillRowCount = 0;\n        long maxFillColCount = 0;\n\
    \        long maxFillRowCountMax = 0;\n        long maxFillColCountMax = 0;\n\
    \        long maxFillRowCountMin = 0;\n        long maxFillColCountMin = 0;\n\
    \        long maxFillRowCountAvg = 0;\n        long maxFillColCountAvg = 0;\n\
    \        long maxFillRowCountMed = 0;\n        long maxFillColCountMed = 0;\n\
    \        long maxFillRowCountSum = 0;\n        long maxFillColCountSum = 0;\n\
    \        long maxFillRowCountProd = 0;\n        long maxFillColCountProd = 0;\n\
    \        long maxFillRowCountXor = 0;\n        long maxFillColCountXor = 0;\n\
    \        long maxFillRowCountAnd = 0;\n        long maxFillColCountAnd = 0;\n\
    \        long maxFillRowCountOr = 0;\n        long maxFillColCountOr = 0;\n  \
    \      long maxFillRowCountNot = 0;\n        long maxFillColCountNot = 0;\n  \
    \      long maxFillRowCountLShift = 0;\n        long maxFillColCountLShift = 0;\n\
    \        long maxFillRowCountRShift = 0;\n        long maxFillColCountRShift =\
    \ 0;\n        long maxFillRowCountAdd = 0;\n        long maxFillColCountAdd =\
    \ 0;\n        long maxFillRowCountSub = 0;\n        long maxFillColCountSub =\
    \ 0;\n        long maxFillRowCountMul = 0;\n        long maxFillColCountMul =\
    \ 0;\n        long maxFillRowCountDiv = 0;\n        long maxFillColCountDiv =\
    \ 0;\n        long maxFillRowCountMod = 0;\n        long maxFillColCountMod =\
    \ 0;\n        long maxFillRowCountPow = 0;\n        long maxFillColCountPow =\
    \ 0;\n        long maxFillRowCountGCD = 0;\n        long maxFillColCountGCD =\
    \ 0;\n        long maxFillRowCountLCM = 0;\n        long maxFillColCountLCM =\
    \ 0;\n        long maxFillRowCountMin = 0\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgpfl81ys.cs(76,36): error CS1002: ; expected

    '
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long count = 0;\n        for (int i = 0; i < grid.Count; i++) {\n\
    \            for (int j = 0; j < grid[i].Count; j++) {\n                if (grid[i][j]\
    \ == 1) {\n                    count += capacity;\n                    if (i >\
    \ 0) {\n                        count -= grid[i - 1][j];\n                   \
    \ }\n                    if (j > 0) {\n                        count -= grid[i][j\
    \ - 1];\n                    }\n                    if (i > 0 && j > 0) {\n  \
    \                      count += grid[i - 1][j - 1];\n                    }\n \
    \               }\n            }\n        }\n        return count;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a49279e7bb5a456ea1dea0c562d31371>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a49279e7bb5a456ea1dea0c562d31371>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long currentFill = 0;\n        long currentCapacity\
    \ = capacity;\n        for (int i = 0; i < grid.Count; i++) {\n            for\
    \ (int j = 0; j < grid[i].Count; j++) {\n                if (grid[i][j] == 1)\
    \ {\n                    if (currentCapacity == 0) {\n                       \
    \ maxFill++;\n                        currentCapacity = capacity;\n          \
    \          }\n                    currentCapacity--;\n                    currentFill++;\n\
    \                }\n            }\n        }\n        return maxFill + currentFill;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dfaed3d686094911a748b26dabb6b771>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dfaed3d686094911a748b26dabb6b771>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long rowCount = grid.Count;\n        long\
    \ colCount = grid[0].Count;\n        for (long row = 0; row < rowCount; row++)\
    \ {\n            for (long col = 0; col < colCount; col++) {\n               \
    \ if (grid[(int)row][(int)col] == 1) {\n                    maxFill += capacity;\n\
    \                }\n            }\n        }\n        return maxFill;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <113b369c7b4b434dbfec79aa1f2e2e6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <113b369c7b4b434dbfec79aa1f2e2e6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        for (int i = 0; i < grid.Count; i++) {\n\
    \            for (int j = 0; j < grid[i].Count; j++) {\n                if (grid[i][j]\
    \ == 1) {\n                    result += capacity;\n                    for (int\
    \ k = i - 1; k >= 0; k--) {\n                        if (grid[k][j] == 1) {\n\
    \                            result -= capacity;\n                           \
    \ break;\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9b1aed1802747f7b417bcb2c1413bc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9b1aed1802747f7b417bcb2c1413bc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        return 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long rowCount = grid.Count;\n        long\
    \ colCount = grid[0].Count;\n        for (long row = 0; row < rowCount; row++)\
    \ {\n            for (long col = 0; col < colCount; col++) {\n               \
    \ if (grid[(int)row][(int)col] == 1) {\n                    maxFill += capacity;\n\
    \                }\n            }\n        }\n        return maxFill;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <113b369c7b4b434dbfec79aa1f2e2e6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <113b369c7b4b434dbfec79aa1f2e2e6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <05b70c02232a4e47977a6d50a655bb6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        long row = 0;\n        long col = 0;\n\
    \        long max = 0;\n        long count = 0;\n        long rows = grid.Count;\n\
    \        long cols = grid[0].Count;\n        while (row < rows) {\n          \
    \  while (col < cols) {\n                if (grid[row][col] == 1) {\n        \
    \            count++;\n                }\n                col++;\n           \
    \ }\n            if (count > max) {\n                max = count;\n          \
    \  }\n            count = 0;\n            col = 0;\n            row++;\n     \
    \   }\n        result = max * capacity;\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpctdpx08e.cs(40,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        return 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <549a0fe576a64abc88d8f8a3a652f0fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        // your code goes here\n        return\
    \ maxFill;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc522e04ffd74f36ad8f7c93094dd46f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc522e04ffd74f36ad8f7c93094dd46f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long rowCount = grid.Count;\n        long\
    \ colCount = grid[0].Count;\n        for (long row = 0; row < rowCount; row++)\
    \ {\n            for (long col = 0; col < colCount; col++) {\n               \
    \ if (grid[(int)row][(int)col] == 1) {\n                    maxFill += capacity;\n\
    \                }\n            }\n        }\n        return maxFill;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <113b369c7b4b434dbfec79aa1f2e2e6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <113b369c7b4b434dbfec79aa1f2e2e6e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // Your code goes here.\n        // You\
    \ can add more classes/methods if needed.\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da7f1d66a39640e9844e86e4a5e69849>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da7f1d66a39640e9844e86e4a5e69849>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793322
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // Your code goes here.\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <237bd8e06f7449388e8dc40a9f373e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        long[] max = new long[grid[0].Count];\n\
    \        for (int i = 0; i < grid.Count; i++) {\n            for (int j = 0; j\
    \ < grid[i].Count; j++) {\n                if (grid[i][j] == 1) {\n          \
    \          max[j]++;\n                }\n            }\n        }\n        for\
    \ (int i = 0; i < max.Length; i++) {\n            if (max[i] > capacity) {\n \
    \               result += max[i] - capacity;\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96403d48c85f46629c8a60cf28ec2481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96403d48c85f46629c8a60cf28ec2481>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793323
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // your code goes here\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <869716c4398149b58800ef28dc2b6976>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <869716c4398149b58800ef28dc2b6976>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code here\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fb556dc587446d3949b3af4850465de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long result = 0;\n        // your code here\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
    \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <312982fcca6d4497a70c25ff0477e0e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <312982fcca6d4497a70c25ff0477e0e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        // your code goes here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L,\
    \ (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}),\
    \ (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\
    \ == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (9L)) ==\
    \ (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69355709059f4b83bdb159acec422eb8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793321
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
    \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
    \    // Each well has a corresponding bucket that can be used to extract water\
    \ from it, \n    // and all buckets have the same capacity.\n    // Your task\
    \ is to use the buckets to empty the wells.\n    // Output the number of times\
    \ you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
    \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
    \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
    \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n \
    \   // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
    \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
    \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <=\
    \ grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity\
    \ <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity)\
    \ {\n        long maxFill = 0;\n        long fill = 0;\n        long row = 0;\n\
    \        long col = 0;\n        long rowCount = grid.Count;\n        long colCount\
    \ = grid[0].Count;\n        while (row < rowCount) {\n            while (col <\
    \ colCount) {\n                if (grid[(int)row][(int)col] == 1) {\n        \
    \            fill = fill + 1;\n                    if (fill == capacity) {\n \
    \                       maxFill = maxFill + 1;\n                        fill =\
    \ 0;\n                    }\n                }\n                col = col + 1;\n\
    \            }\n            col = 0;\n            row = row + 1;\n        }\n\
    \        return maxFill;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L)) ==\
    \ (6L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L)) ==\
    \ (5L));\n    Debug.Assert(MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new\
    \ List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new\
    \ long[]{(long)0L, (long)0L, (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new\
    \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf92b01ce9cd42b18d3aeefe86c2711b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf92b01ce9cd42b18d3aeefe86c2711b>:0 \n"
  stdout: ''
  timestamp: 1659793323
