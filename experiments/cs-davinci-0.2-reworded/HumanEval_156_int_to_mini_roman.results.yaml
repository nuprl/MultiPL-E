language: cs
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        var num = number;\n        while\
    \ (num >= 1000) {\n            sb.Append(\"m\");\n            num -= 1000;\n \
    \       }\n        if (num >= 900) {\n            sb.Append(\"cm\");\n       \
    \     num -= 900;\n        }\n        if (num >= 500) {\n            sb.Append(\"\
    d\");\n            num -= 500;\n        }\n        if (num >= 400) {\n       \
    \     sb.Append(\"cd\");\n            num -= 400;\n        }\n        while (num\
    \ >= 100) {\n            sb.Append(\"c\");\n            num -= 100;\n        }\n\
    \        if (num >= 90) {\n            sb.Append(\"xc\");\n            num -=\
    \ 90;\n        }\n        if (num >= 50) {\n            sb.Append(\"l\");\n  \
    \          num -= 50;\n        }\n        if (num >= 40) {\n            sb.Append(\"\
    xl\");\n            num -= 40;\n        }\n        while (num >= 10) {\n     \
    \       sb.Append(\"x\");\n            num -= 10;\n        }\n        if (num\
    \ >= 9) {\n            sb.Append(\"ix\");\n            num -= 9;\n        }\n\
    \        if (num >= 5) {\n            sb.Append(\"v\");\n            num -= 5;\n\
    \        }\n        if (num >= 4) {\n            sb.Append(\"iv\");\n        \
    \    num -= 4;\n        }\n        while (num >= 1) {\n            sb.Append(\"\
    i\");\n            num -= 1;\n        }\n        return sb.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var result = new StringBuilder();\n        var numeral = new Dictionary<int,\
    \ string>() {\n            { 1, \"i\" },\n            { 5, \"v\" },\n        \
    \    { 10, \"x\" },\n            { 50, \"l\" },\n            { 100, \"c\" },\n\
    \            { 500, \"d\" },\n            { 1000, \"m\" }\n        };\n      \
    \  var digits = new List<int>();\n        while (number > 0) {\n            digits.Add((int)(number\
    \ % 10));\n            number /= 10;\n        }\n        digits.Reverse();\n \
    \       for (int i = 0; i < digits.Count; i++) {\n            var digit = digits[i];\n\
    \            if (digit == 4) {\n                result.Append(numeral[(int)Math.Pow(10,\
    \ i)]);\n                result.Append(numeral[5 * (int)Math.Pow(10, i)]);\n \
    \           } else if (digit == 9) {\n                result.Append(numeral[(int)Math.Pow(10,\
    \ i)]);\n                result.Append(numeral[10 * (int)Math.Pow(10, i)]);\n\
    \            } else {\n                if (digit >= 5) {\n                   \
    \ result.Append(numeral[5 * (int)Math.Pow(10, i)]);\n                    digit\
    \ -= 5;\n                }\n                for (int j = 0; j < digit; j++) {\n\
    \                    result.Append(numeral[(int)Math.Pow(10, i)]);\n         \
    \       }\n            }\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ceff62264134fe7927ed4152a69a595>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ceff62264134fe7927ed4152a69a595>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        }\n        var result = new StringBuilder();\n        while\
    \ (number >= 1000) {\n            result.Append(\"m\");\n            number -=\
    \ 1000;\n        }\n        if (number >= 900) {\n            result.Append(\"\
    cm\");\n            number -= 900;\n        }\n        if (number >= 500) {\n\
    \            result.Append(\"d\");\n            number -= 500;\n        }\n  \
    \      if (number >= 400) {\n            result.Append(\"cd\");\n            number\
    \ -= 400;\n        }\n        while (number >= 100) {\n            result.Append(\"\
    c\");\n            number -= 100;\n        }\n        if (number >= 90) {\n  \
    \          result.Append(\"xc\");\n            number -= 90;\n        }\n    \
    \    if (number >= 50) {\n            result.Append(\"l\");\n            number\
    \ -= 50;\n        }\n        if (number >= 40) {\n            result.Append(\"\
    xl\");\n            number -= 40;\n        }\n        while (number >= 10) {\n\
    \            result.Append(\"x\");\n            number -= 10;\n        }\n   \
    \     if (number >= 9) {\n            result.Append(\"ix\");\n            number\
    \ -= 9;\n        }\n        if (number >= 5) {\n            result.Append(\"v\"\
    );\n            number -= 5;\n        }\n        if (number >= 4) {\n        \
    \    result.Append(\"iv\");\n            number -= 4;\n        }\n        while\
    \ (number >= 1) {\n            result.Append(\"i\");\n            number -= 1;\n\
    \        }\n        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"\
    number\", \"Must be between 1 and 1000\");\n        }\n        var sb = new StringBuilder();\n\
    \        var num = number;\n        while (num >= 1000) {\n            sb.Append(\"\
    m\");\n            num -= 1000;\n        }\n        if (num >= 900) {\n      \
    \      sb.Append(\"cm\");\n            num -= 900;\n        }\n        if (num\
    \ >= 500) {\n            sb.Append(\"d\");\n            num -= 500;\n        }\n\
    \        if (num >= 400) {\n            sb.Append(\"cd\");\n            num -=\
    \ 400;\n        }\n        while (num >= 100) {\n            sb.Append(\"c\");\n\
    \            num -= 100;\n        }\n        if (num >= 90) {\n            sb.Append(\"\
    xc\");\n            num -= 90;\n        }\n        if (num >= 50) {\n        \
    \    sb.Append(\"l\");\n            num -= 50;\n        }\n        if (num >=\
    \ 40) {\n            sb.Append(\"xl\");\n            num -= 40;\n        }\n \
    \       while (num >= 10) {\n            sb.Append(\"x\");\n            num -=\
    \ 10;\n        }\n        if (num >= 9) {\n            sb.Append(\"ix\");\n  \
    \          num -= 9;\n        }\n        if (num >= 5) {\n            sb.Append(\"\
    v\");\n            num -= 5;\n        }\n        if (num >= 4) {\n           \
    \ sb.Append(\"iv\");\n            num -= 4;\n        }\n        while (num >=\
    \ 1) {\n            sb.Append(\"i\");\n            num -= 1;\n        }\n    \
    \    return sb.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"i\", \"v\", \"x\", \"l\", \"c\", \"\
    d\", \"m\" };\n        string result = \"\";\n        int i = 0;\n        while\
    \ (number > 0) {\n            int digit = (int)(number % 10);\n            if\
    \ (digit < 4) {\n                result = new string(roman[i][0], digit) + result;\n\
    \            } else if (digit == 4) {\n                result = roman[i] + roman[i\
    \ + 1] + result;\n            } else if (digit < 9) {\n                result\
    \ = roman[i + 1] + new string(roman[i][0], digit - 5) + result;\n            }\
    \ else {\n                result = roman[i] + roman[i + 2] + result;\n       \
    \     }\n            number /= 10;\n            i += 2;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        while (number > 0) {\n    \
    \        if (number >= 1000) {\n                roman.Append('m');\n         \
    \       number -= 1000;\n            } else if (number >= 900) {\n           \
    \     roman.Append(\"cm\");\n                number -= 900;\n            } else\
    \ if (number >= 500) {\n                roman.Append('d');\n                number\
    \ -= 500;\n            } else if (number >= 400) {\n                roman.Append(\"\
    cd\");\n                number -= 400;\n            } else if (number >= 100)\
    \ {\n                roman.Append('c');\n                number -= 100;\n    \
    \        } else if (number >= 90) {\n                roman.Append(\"xc\");\n \
    \               number -= 90;\n            } else if (number >= 50) {\n      \
    \          roman.Append('l');\n                number -= 50;\n            } else\
    \ if (number >= 40) {\n                roman.Append(\"xl\");\n               \
    \ number -= 40;\n            } else if (number >= 10) {\n                roman.Append('x');\n\
    \                number -= 10;\n            } else if (number >= 9) {\n      \
    \          roman.Append(\"ix\");\n                number -= 9;\n            }\
    \ else if (number >= 5) {\n                roman.Append('v');\n              \
    \  number -= 5;\n            } else if (number >= 4) {\n                roman.Append(\"\
    iv\");\n                number -= 4;\n            } else if (number >= 1) {\n\
    \                roman.Append('i');\n                number -= 1;\n          \
    \  }\n        }\n        return roman.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        while (number > 0) {\n       \
    \     if (number >= 1000) {\n                sb.Append('m');\n               \
    \ number -= 1000;\n            } else if (number >= 900) {\n                sb.Append(\"\
    cm\");\n                number -= 900;\n            } else if (number >= 500)\
    \ {\n                sb.Append('d');\n                number -= 500;\n       \
    \     } else if (number >= 400) {\n                sb.Append(\"cd\");\n      \
    \          number -= 400;\n            } else if (number >= 100) {\n         \
    \       sb.Append('c');\n                number -= 100;\n            } else if\
    \ (number >= 90) {\n                sb.Append(\"xc\");\n                number\
    \ -= 90;\n            } else if (number >= 50) {\n                sb.Append('l');\n\
    \                number -= 50;\n            } else if (number >= 40) {\n     \
    \           sb.Append(\"xl\");\n                number -= 40;\n            } else\
    \ if (number >= 10) {\n                sb.Append('x');\n                number\
    \ -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"\
    ix\");\n                number -= 9;\n            } else if (number >= 5) {\n\
    \                sb.Append('v');\n                number -= 5;\n            }\
    \ else if (number >= 4) {\n                sb.Append(\"iv\");\n              \
    \  number -= 4;\n            } else if (number >= 1) {\n                sb.Append('i');\n\
    \                number -= 1;\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (number > 0) {\n\
    \            if (number >= 1000) {\n                sb.Append(\"m\");\n      \
    \          number -= 1000;\n            } else if (number >= 900) {\n        \
    \        sb.Append(\"cm\");\n                number -= 900;\n            } else\
    \ if (number >= 500) {\n                sb.Append(\"d\");\n                number\
    \ -= 500;\n            } else if (number >= 400) {\n                sb.Append(\"\
    cd\");\n                number -= 400;\n            } else if (number >= 100)\
    \ {\n                sb.Append(\"c\");\n                number -= 100;\n     \
    \       } else if (number >= 90) {\n                sb.Append(\"xc\");\n     \
    \           number -= 90;\n            } else if (number >= 50) {\n          \
    \      sb.Append(\"l\");\n                number -= 50;\n            } else if\
    \ (number >= 40) {\n                sb.Append(\"xl\");\n                number\
    \ -= 40;\n            } else if (number >= 10) {\n                sb.Append(\"\
    x\");\n                number -= 10;\n            } else if (number >= 9) {\n\
    \                sb.Append(\"ix\");\n                number -= 9;\n          \
    \  } else if (number >= 5) {\n                sb.Append(\"v\");\n            \
    \    number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"\
    iv\");\n                number -= 4;\n            } else if (number >= 1) {\n\
    \                sb.Append(\"i\");\n                number -= 1;\n           \
    \ }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var numerals = new Dictionary<int,\
    \ string> {\n            {1000, \"m\"},\n            {900, \"cm\"},\n        \
    \    {500, \"d\"},\n            {400, \"cd\"},\n            {100, \"c\"},\n  \
    \          {90, \"xc\"},\n            {50, \"l\"},\n            {40, \"xl\"},\n\
    \            {10, \"x\"},\n            {9, \"ix\"},\n            {5, \"v\"},\n\
    \            {4, \"iv\"},\n            {1, \"i\"}\n        };\n        foreach\
    \ (var numeral in numerals) {\n            while (number >= numeral.Key) {\n \
    \               roman.Append(numeral.Value);\n                number -= numeral.Key;\n\
    \            }\n        }\n        return roman.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (number > 0) {\n\
    \            if (number >= 1000) {\n                sb.Append(\"m\");\n      \
    \          number -= 1000;\n            } else if (number >= 900) {\n        \
    \        sb.Append(\"cm\");\n                number -= 900;\n            } else\
    \ if (number >= 500) {\n                sb.Append(\"d\");\n                number\
    \ -= 500;\n            } else if (number >= 400) {\n                sb.Append(\"\
    cd\");\n                number -= 400;\n            } else if (number >= 100)\
    \ {\n                sb.Append(\"c\");\n                number -= 100;\n     \
    \       } else if (number >= 90) {\n                sb.Append(\"xc\");\n     \
    \           number -= 90;\n            } else if (number >= 50) {\n          \
    \      sb.Append(\"l\");\n                number -= 50;\n            } else if\
    \ (number >= 40) {\n                sb.Append(\"xl\");\n                number\
    \ -= 40;\n            } else if (number >= 10) {\n                sb.Append(\"\
    x\");\n                number -= 10;\n            } else if (number >= 9) {\n\
    \                sb.Append(\"ix\");\n                number -= 9;\n          \
    \  } else if (number >= 5) {\n                sb.Append(\"v\");\n            \
    \    number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"\
    iv\");\n                number -= 4;\n            } else if (number >= 1) {\n\
    \                sb.Append(\"i\");\n                number -= 1;\n           \
    \ }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <737b29eecbcc4e58b2cf2e76ddf59ebe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <737b29eecbcc4e58b2cf2e76ddf59ebe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"i\", \"v\", \"x\", \"l\", \"c\", \"\
    d\", \"m\" };\n        StringBuilder sb = new StringBuilder();\n        int i\
    \ = 0;\n        while (number > 0) {\n            int digit = (int)(number % 10);\n\
    \            if (digit == 9) {\n                sb.Insert(0, roman[i] + roman[i\
    \ + 2]);\n            } else if (digit == 4) {\n                sb.Insert(0, roman[i]\
    \ + roman[i + 1]);\n            } else {\n                if (digit >= 5) {\n\
    \                    sb.Insert(0, roman[i + 1]);\n                    digit -=\
    \ 5;\n                }\n                for (int j = 0; j < digit; j++) {\n \
    \                   sb.Insert(0, roman[i]);\n                }\n            }\n\
    \            number /= 10;\n            i += 2;\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d19d781304a48739d4831fcaa64eadf>:0 \n"
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string result = \"\
    \";\n        for (int i = 0; i < arabic.Length; i++) {\n            while (number\
    \ >= arabic[i]) {\n                number -= arabic[i];\n                result\
    \ += roman[i];\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        string result = \"\";\n        for (int i = 0; i < arabic.Length; i++)\
    \ {\n            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                result += roman[i];\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\" };\n\
    \        int[] values = { 1, 5, 10, 50, 100, 500, 1000 };\n        string result\
    \ = \"\";\n        int i = 6;\n        while (number > 0) {\n            int digit\
    \ = (int)(number % 10);\n            if (digit < 4) {\n                result\
    \ = new string(roman[i][0], digit) + result;\n            } else if (digit ==\
    \ 4) {\n                result = roman[i] + roman[i - 1] + result;\n         \
    \   } else if (digit == 5) {\n                result = roman[i - 1] + result;\n\
    \            } else if (digit < 9) {\n                result = roman[i - 1] +\
    \ new string(roman[i][0], digit - 5) + result;\n            } else {\n       \
    \         result = roman[i] + roman[i + 1] + result;\n            }\n        \
    \    number /= 10;\n            i -= 2;\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.IntToMiniRoman (System.Int64 number)\
    \ [0x000f6] in <fc085a97a85240b2a97d7bd69f34bab9>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <fc085a97a85240b2a97d7bd69f34bab9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.IntToMiniRoman (System.Int64 number) [0x000f6] in <fc085a97a85240b2a97d7bd69f34bab9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <fc085a97a85240b2a97d7bd69f34bab9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] numerals = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\"\
    , \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ values = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ values.Length; i++) {\n            while (number >= values[i]) {\n         \
    \       sb.Append(numerals[i]);\n                number -= values[i];\n      \
    \      }\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var digits = new List<int>();\n\
    \        while (number > 0) {\n            digits.Add((int)(number % 10));\n \
    \           number /= 10;\n        }\n        digits.Reverse();\n        for (int\
    \ i = 0; i < digits.Count; i++) {\n            switch (digits[i]) {\n        \
    \        case 1:\n                    roman.Append(\"i\");\n                 \
    \   break;\n                case 2:\n                    roman.Append(\"ii\");\n\
    \                    break;\n                case 3:\n                    roman.Append(\"\
    iii\");\n                    break;\n                case 4:\n               \
    \     roman.Append(\"iv\");\n                    break;\n                case\
    \ 5:\n                    roman.Append(\"v\");\n                    break;\n \
    \               case 6:\n                    roman.Append(\"vi\");\n         \
    \           break;\n                case 7:\n                    roman.Append(\"\
    vii\");\n                    break;\n                case 8:\n               \
    \     roman.Append(\"viii\");\n                    break;\n                case\
    \ 9:\n                    roman.Append(\"ix\");\n                    break;\n\
    \            }\n            switch (i) {\n                case 0:\n          \
    \          break;\n                case 1:\n                    roman.Append(\"\
    x\");\n                    break;\n                case 2:\n                 \
    \   roman.Append(\"c\");\n                    break;\n                case 3:\n\
    \                    roman.Append(\"m\");\n                    break;\n      \
    \      }\n        }\n        return roman.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ba1ab12653b4a24958f01f109d9f56f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ba1ab12653b4a24958f01f109d9f56f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        StringBuilder result\
    \ = new StringBuilder();\n        for (int i = 0; i < arabic.Length; i++) {\n\
    \            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                result.Append(roman[i]);\n            }\n        }\n        return\
    \ result.ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        long[] numbers = { 1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string[] letters = { \"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\" };\n        for (int i = 0; i < numbers.Length; i++) {\n            while\
    \ (number >= numbers[i]) {\n                number -= numbers[i];\n          \
    \      result += letters[i];\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var numeral = new Dictionary<long,\
    \ string>() {\n            {1, \"i\"},\n            {5, \"v\"},\n            {10,\
    \ \"x\"},\n            {50, \"l\"},\n            {100, \"c\"},\n            {500,\
    \ \"d\"},\n            {1000, \"m\"}\n        };\n        var numeral_keys = numeral.Keys.ToList();\n\
    \        numeral_keys.Sort();\n        numeral_keys.Reverse();\n        foreach\
    \ (var key in numeral_keys) {\n            while (number >= key) {\n         \
    \       roman.Append(numeral[key]);\n                number -= key;\n        \
    \    }\n        }\n        return roman.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe226b4cffec4f29ab51e3050c63c1e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe226b4cffec4f29ab51e3050c63c1e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ arabic.Length; i++) {\n            while (number >= arabic[i]) {\n         \
    \       number -= arabic[i];\n                sb.Append(roman[i]);\n         \
    \   }\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        var num = number;\n        while\
    \ (num >= 1000) {\n            sb.Append(\"m\");\n            num -= 1000;\n \
    \       }\n        if (num >= 900) {\n            sb.Append(\"cm\");\n       \
    \     num -= 900;\n        }\n        if (num >= 500) {\n            sb.Append(\"\
    d\");\n            num -= 500;\n        }\n        if (num >= 400) {\n       \
    \     sb.Append(\"cd\");\n            num -= 400;\n        }\n        while (num\
    \ >= 100) {\n            sb.Append(\"c\");\n            num -= 100;\n        }\n\
    \        if (num >= 90) {\n            sb.Append(\"xc\");\n            num -=\
    \ 90;\n        }\n        if (num >= 50) {\n            sb.Append(\"l\");\n  \
    \          num -= 50;\n        }\n        if (num >= 40) {\n            sb.Append(\"\
    xl\");\n            num -= 40;\n        }\n        while (num >= 10) {\n     \
    \       sb.Append(\"x\");\n            num -= 10;\n        }\n        if (num\
    \ >= 9) {\n            sb.Append(\"ix\");\n            num -= 9;\n        }\n\
    \        if (num >= 5) {\n            sb.Append(\"v\");\n            num -= 5;\n\
    \        }\n        if (num >= 4) {\n            sb.Append(\"iv\");\n        \
    \    num -= 4;\n        }\n        while (num >= 1) {\n            sb.Append(\"\
    i\");\n            num -= 1;\n        }\n        return sb.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var digits = new List<int>();\n\
    \        while (number > 0) {\n            digits.Add((int)(number % 10));\n \
    \           number /= 10;\n        }\n        digits.Reverse();\n        for (int\
    \ i = 0; i < digits.Count; i++) {\n            var digit = digits[i];\n      \
    \      if (digit == 0) {\n                continue;\n            }\n         \
    \   if (digit == 4) {\n                roman.Append(new string(new char[] { (char)('i'\
    \ + i), (char)('i' + i + 1) }));\n            } else if (digit == 9) {\n     \
    \           roman.Append(new string(new char[] { (char)('i' + i), (char)('i' +\
    \ i + 2) }));\n            } else {\n                if (digit >= 5) {\n     \
    \               roman.Append((char)('v' + i));\n                    digit -= 5;\n\
    \                }\n                roman.Append(new string((char)('i' + i), digit));\n\
    \            }\n        }\n        return roman.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f6fc43e32bf4846b8b0c2d14c53da42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f6fc43e32bf4846b8b0c2d14c53da42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ num = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ num.Length; i++) {\n            while (number >= num[i]) {\n               \
    \ sb.Append(roman[i]);\n                number -= num[i];\n            }\n   \
    \     }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d866df2d081047829643ac9225eacd43>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d866df2d081047829643ac9225eacd43>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < arabic.Length; i++) {\n\
    \            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                sb.Append(roman[i]);\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (number > 0) {\n\
    \            if (number >= 1000) {\n                sb.Append(\"m\");\n      \
    \          number -= 1000;\n            } else if (number >= 900) {\n        \
    \        sb.Append(\"cm\");\n                number -= 900;\n            } else\
    \ if (number >= 500) {\n                sb.Append(\"d\");\n                number\
    \ -= 500;\n            } else if (number >= 400) {\n                sb.Append(\"\
    cd\");\n                number -= 400;\n            } else if (number >= 100)\
    \ {\n                sb.Append(\"c\");\n                number -= 100;\n     \
    \       } else if (number >= 90) {\n                sb.Append(\"xc\");\n     \
    \           number -= 90;\n            } else if (number >= 50) {\n          \
    \      sb.Append(\"l\");\n                number -= 50;\n            } else if\
    \ (number >= 40) {\n                sb.Append(\"xl\");\n                number\
    \ -= 40;\n            } else if (number >= 10) {\n                sb.Append(\"\
    x\");\n                number -= 10;\n            } else if (number >= 9) {\n\
    \                sb.Append(\"ix\");\n                number -= 9;\n          \
    \  } else if (number >= 5) {\n                sb.Append(\"v\");\n            \
    \    number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"\
    iv\");\n                number -= 4;\n            } else if (number >= 1) {\n\
    \                sb.Append(\"i\");\n                number -= 1;\n           \
    \ }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        while (number > 0) {\n       \
    \     if (number >= 1000) {\n                sb.Append('m');\n               \
    \ number -= 1000;\n            } else if (number >= 900) {\n                sb.Append(\"\
    cm\");\n                number -= 900;\n            } else if (number >= 500)\
    \ {\n                sb.Append('d');\n                number -= 500;\n       \
    \     } else if (number >= 400) {\n                sb.Append(\"cd\");\n      \
    \          number -= 400;\n            } else if (number >= 100) {\n         \
    \       sb.Append('c');\n                number -= 100;\n            } else if\
    \ (number >= 90) {\n                sb.Append(\"xc\");\n                number\
    \ -= 90;\n            } else if (number >= 50) {\n                sb.Append('l');\n\
    \                number -= 50;\n            } else if (number >= 40) {\n     \
    \           sb.Append(\"xl\");\n                number -= 40;\n            } else\
    \ if (number >= 10) {\n                sb.Append('x');\n                number\
    \ -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"\
    ix\");\n                number -= 9;\n            } else if (number >= 5) {\n\
    \                sb.Append('v');\n                number -= 5;\n            }\
    \ else if (number >= 4) {\n                sb.Append(\"iv\");\n              \
    \  number -= 4;\n            } else if (number >= 1) {\n                sb.Append('i');\n\
    \                number -= 1;\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        if (number < 1 || number > 1000) {\n \
    \           throw new ArgumentOutOfRangeException(\"number\");\n        }\n  \
    \      while (number >= 1000) {\n            result += \"m\";\n            number\
    \ -= 1000;\n        }\n        if (number >= 900) {\n            result += \"\
    cm\";\n            number -= 900;\n        }\n        if (number >= 500) {\n \
    \           result += \"d\";\n            number -= 500;\n        }\n        if\
    \ (number >= 400) {\n            result += \"cd\";\n            number -= 400;\n\
    \        }\n        while (number >= 100) {\n            result += \"c\";\n  \
    \          number -= 100;\n        }\n        if (number >= 90) {\n          \
    \  result += \"xc\";\n            number -= 90;\n        }\n        if (number\
    \ >= 50) {\n            result += \"l\";\n            number -= 50;\n        }\n\
    \        if (number >= 40) {\n            result += \"xl\";\n            number\
    \ -= 40;\n        }\n        while (number >= 10) {\n            result += \"\
    x\";\n            number -= 10;\n        }\n        if (number >= 9) {\n     \
    \       result += \"ix\";\n            number -= 9;\n        }\n        if (number\
    \ >= 5) {\n            result += \"v\";\n            number -= 5;\n        }\n\
    \        if (number >= 4) {\n            result += \"iv\";\n            number\
    \ -= 4;\n        }\n        while (number >= 1) {\n            result += \"i\"\
    ;\n            number -= 1;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        if (number < 1 || number > 1000) {\n \
    \           throw new ArgumentOutOfRangeException();\n        }\n        while\
    \ (number >= 1000) {\n            result += \"m\";\n            number -= 1000;\n\
    \        }\n        if (number >= 900) {\n            result += \"cm\";\n    \
    \        number -= 900;\n        }\n        if (number >= 500) {\n           \
    \ result += \"d\";\n            number -= 500;\n        }\n        if (number\
    \ >= 400) {\n            result += \"cd\";\n            number -= 400;\n     \
    \   }\n        while (number >= 100) {\n            result += \"c\";\n       \
    \     number -= 100;\n        }\n        if (number >= 90) {\n            result\
    \ += \"xc\";\n            number -= 90;\n        }\n        if (number >= 50)\
    \ {\n            result += \"l\";\n            number -= 50;\n        }\n    \
    \    if (number >= 40) {\n            result += \"xl\";\n            number -=\
    \ 40;\n        }\n        while (number >= 10) {\n            result += \"x\"\
    ;\n            number -= 10;\n        }\n        if (number >= 9) {\n        \
    \    result += \"ix\";\n            number -= 9;\n        }\n        if (number\
    \ >= 5) {\n            result += \"v\";\n            number -= 5;\n        }\n\
    \        if (number >= 4) {\n            result += \"iv\";\n            number\
    \ -= 4;\n        }\n        while (number >= 1) {\n            result += \"i\"\
    ;\n            number -= 1;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < arabic.Length; i++) {\n\
    \            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                sb.Append(roman[i]);\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string result = \"\
    \";\n        for (int i = 0; i < arabic.Length; i++) {\n            while (number\
    \ >= arabic[i]) {\n                number -= arabic[i];\n                result\
    \ += roman[i];\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        StringBuilder result\
    \ = new StringBuilder();\n        for (int i = 0; i < roman.Length; i++) {\n \
    \           while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                result.Append(roman[i]);\n            }\n        }\n        return\
    \ result.ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        while (number > 0) {\n       \
    \     if (number >= 1000) {\n                sb.Append('m');\n               \
    \ number -= 1000;\n            } else if (number >= 900) {\n                sb.Append(\"\
    cm\");\n                number -= 900;\n            } else if (number >= 500)\
    \ {\n                sb.Append('d');\n                number -= 500;\n       \
    \     } else if (number >= 400) {\n                sb.Append(\"cd\");\n      \
    \          number -= 400;\n            } else if (number >= 100) {\n         \
    \       sb.Append('c');\n                number -= 100;\n            } else if\
    \ (number >= 90) {\n                sb.Append(\"xc\");\n                number\
    \ -= 90;\n            } else if (number >= 50) {\n                sb.Append('l');\n\
    \                number -= 50;\n            } else if (number >= 40) {\n     \
    \           sb.Append(\"xl\");\n                number -= 40;\n            } else\
    \ if (number >= 10) {\n                sb.Append('x');\n                number\
    \ -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"\
    ix\");\n                number -= 9;\n            } else if (number >= 5) {\n\
    \                sb.Append('v');\n                number -= 5;\n            }\
    \ else if (number >= 4) {\n                sb.Append(\"iv\");\n              \
    \  number -= 4;\n            } else if (number >= 1) {\n                sb.Append('i');\n\
    \                number -= 1;\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        string result = \"\";\n        for (int i = 0; i < arabic.Length; i++)\
    \ {\n            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                result += roman[i];\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        while (number > 0) {\n       \
    \     if (number >= 1000) {\n                sb.Append('m');\n               \
    \ number -= 1000;\n            } else if (number >= 900) {\n                sb.Append(\"\
    cm\");\n                number -= 900;\n            } else if (number >= 500)\
    \ {\n                sb.Append('d');\n                number -= 500;\n       \
    \     } else if (number >= 400) {\n                sb.Append(\"cd\");\n      \
    \          number -= 400;\n            } else if (number >= 100) {\n         \
    \       sb.Append('c');\n                number -= 100;\n            } else if\
    \ (number >= 90) {\n                sb.Append(\"xc\");\n                number\
    \ -= 90;\n            } else if (number >= 50) {\n                sb.Append('l');\n\
    \                number -= 50;\n            } else if (number >= 40) {\n     \
    \           sb.Append(\"xl\");\n                number -= 40;\n            } else\
    \ if (number >= 10) {\n                sb.Append('x');\n                number\
    \ -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"\
    ix\");\n                number -= 9;\n            } else if (number >= 5) {\n\
    \                sb.Append('v');\n                number -= 5;\n            }\
    \ else if (number >= 4) {\n                sb.Append(\"iv\");\n              \
    \  number -= 4;\n            } else if (number >= 1) {\n                sb.Append('i');\n\
    \                number -= 1;\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"i\", \"v\", \"x\", \"l\", \"c\", \"\
    d\", \"m\" };\n        string result = \"\";\n        int i = 0;\n        while\
    \ (number > 0) {\n            int digit = (int)(number % 10);\n            number\
    \ /= 10;\n            if (digit == 0) {\n                i += 2;\n           \
    \     continue;\n            }\n            if (digit < 4) {\n               \
    \ result = new string(roman[i][0], digit) + result;\n            } else if (digit\
    \ == 4) {\n                result = roman[i] + roman[i + 1] + result;\n      \
    \      } else if (digit == 5) {\n                result = roman[i + 1] + result;\n\
    \            } else if (digit < 9) {\n                result = roman[i + 1] +\
    \ new string(roman[i][0], digit - 5) + result;\n            } else {\n       \
    \         result = roman[i] + roman[i + 2] + result;\n            }\n        \
    \    i += 2;\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        }\n        var sb = new StringBuilder();\n        var num\
    \ = number;\n        while (num >= 1000) {\n            sb.Append(\"m\");\n  \
    \          num -= 1000;\n        }\n        if (num >= 900) {\n            sb.Append(\"\
    cm\");\n            num -= 900;\n        }\n        if (num >= 500) {\n      \
    \      sb.Append(\"d\");\n            num -= 500;\n        }\n        if (num\
    \ >= 400) {\n            sb.Append(\"cd\");\n            num -= 400;\n       \
    \ }\n        while (num >= 100) {\n            sb.Append(\"c\");\n           \
    \ num -= 100;\n        }\n        if (num >= 90) {\n            sb.Append(\"xc\"\
    );\n            num -= 90;\n        }\n        if (num >= 50) {\n            sb.Append(\"\
    l\");\n            num -= 50;\n        }\n        if (num >= 40) {\n         \
    \   sb.Append(\"xl\");\n            num -= 40;\n        }\n        while (num\
    \ >= 10) {\n            sb.Append(\"x\");\n            num -= 10;\n        }\n\
    \        if (num >= 9) {\n            sb.Append(\"ix\");\n            num -= 9;\n\
    \        }\n        if (num >= 5) {\n            sb.Append(\"v\");\n         \
    \   num -= 5;\n        }\n        if (num >= 4) {\n            sb.Append(\"iv\"\
    );\n            num -= 4;\n        }\n        while (num >= 1) {\n           \
    \ sb.Append(\"i\");\n            num -= 1;\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number >= 1000) {\n           \
    \ result += \"m\";\n            number -= 1000;\n        }\n        if (number\
    \ >= 900) {\n            result += \"cm\";\n            number -= 900;\n     \
    \   }\n        if (number >= 500) {\n            result += \"d\";\n          \
    \  number -= 500;\n        }\n        if (number >= 400) {\n            result\
    \ += \"cd\";\n            number -= 400;\n        }\n        while (number >=\
    \ 100) {\n            result += \"c\";\n            number -= 100;\n        }\n\
    \        if (number >= 90) {\n            result += \"xc\";\n            number\
    \ -= 90;\n        }\n        if (number >= 50) {\n            result += \"l\"\
    ;\n            number -= 50;\n        }\n        if (number >= 40) {\n       \
    \     result += \"xl\";\n            number -= 40;\n        }\n        while (number\
    \ >= 10) {\n            result += \"x\";\n            number -= 10;\n        }\n\
    \        if (number >= 9) {\n            result += \"ix\";\n            number\
    \ -= 9;\n        }\n        if (number >= 5) {\n            result += \"v\";\n\
    \            number -= 5;\n        }\n        if (number >= 4) {\n           \
    \ result += \"iv\";\n            number -= 4;\n        }\n        while (number\
    \ >= 1) {\n            result += \"i\";\n            number -= 1;\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        string result = \"\";\n        for (int i = 0; i < arabic.Length; i++)\
    \ {\n            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                result += roman[i];\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string roman = \"\";\n        while (number >= 1000) {\n            roman\
    \ += \"m\";\n            number -= 1000;\n        }\n        if (number >= 900)\
    \ {\n            roman += \"cm\";\n            number -= 900;\n        }\n   \
    \     if (number >= 500) {\n            roman += \"d\";\n            number -=\
    \ 500;\n        }\n        if (number >= 400) {\n            roman += \"cd\";\n\
    \            number -= 400;\n        }\n        while (number >= 100) {\n    \
    \        roman += \"c\";\n            number -= 100;\n        }\n        if (number\
    \ >= 90) {\n            roman += \"xc\";\n            number -= 90;\n        }\n\
    \        if (number >= 50) {\n            roman += \"l\";\n            number\
    \ -= 50;\n        }\n        if (number >= 40) {\n            roman += \"xl\"\
    ;\n            number -= 40;\n        }\n        while (number >= 10) {\n    \
    \        roman += \"x\";\n            number -= 10;\n        }\n        if (number\
    \ >= 9) {\n            roman += \"ix\";\n            number -= 9;\n        }\n\
    \        if (number >= 5) {\n            roman += \"v\";\n            number -=\
    \ 5;\n        }\n        if (number >= 4) {\n            roman += \"iv\";\n  \
    \          number -= 4;\n        }\n        while (number >= 1) {\n          \
    \  roman += \"i\";\n            number -= 1;\n        }\n        return roman;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        if (number < 1 || number > 1000)\n            throw new ArgumentOutOfRangeException();\n\
    \        var sb = new StringBuilder();\n        while (number >= 100) {\n    \
    \        sb.Append('c');\n            number -= 100;\n        }\n        if (number\
    \ >= 90) {\n            sb.Append(\"xc\");\n            number -= 90;\n      \
    \  }\n        if (number >= 50) {\n            sb.Append('l');\n            number\
    \ -= 50;\n        }\n        if (number >= 40) {\n            sb.Append(\"xl\"\
    );\n            number -= 40;\n        }\n        while (number >= 10) {\n   \
    \         sb.Append('x');\n            number -= 10;\n        }\n        if (number\
    \ >= 9) {\n            sb.Append(\"ix\");\n            number -= 9;\n        }\n\
    \        if (number >= 5) {\n            sb.Append('v');\n            number -=\
    \ 5;\n        }\n        if (number >= 4) {\n            sb.Append(\"iv\");\n\
    \            number -= 4;\n        }\n        while (number >= 1) {\n        \
    \    sb.Append('i');\n            number -= 1;\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6911a8a4e3af40b0b917203e367e4b98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6911a8a4e3af40b0b917203e367e4b98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var digits = new List<int>();\n\
    \        while (number > 0) {\n            digits.Add((int)(number % 10));\n \
    \           number /= 10;\n        }\n        for (int i = digits.Count - 1; i\
    \ >= 0; i--) {\n            var digit = digits[i];\n            if (digit == 0)\
    \ {\n                continue;\n            }\n            if (digit == 4) {\n\
    \                roman.Append(GetRomanDigit(i));\n                roman.Append(GetRomanDigit(i\
    \ + 1));\n            } else if (digit == 9) {\n                roman.Append(GetRomanDigit(i));\n\
    \                roman.Append(GetRomanDigit(i + 2));\n            } else {\n \
    \               if (digit >= 5) {\n                    roman.Append(GetRomanDigit(i\
    \ + 1));\n                    digit -= 5;\n                }\n               \
    \ for (int j = 0; j < digit; j++) {\n                    roman.Append(GetRomanDigit(i));\n\
    \                }\n            }\n        }\n        return roman.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnsjp_q4d.cs(32,30): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    /tmp/tmpnsjp_q4d.cs(33,30): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    /tmp/tmpnsjp_q4d.cs(35,30): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    /tmp/tmpnsjp_q4d.cs(36,30): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    /tmp/tmpnsjp_q4d.cs(39,34): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    /tmp/tmpnsjp_q4d.cs(43,34): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    '
  timestamp: 1659805771
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        var numeral = new Dictionary<long,\
    \ string>() {\n            { 1, \"i\" },\n            { 5, \"v\" },\n        \
    \    { 10, \"x\" },\n            { 50, \"l\" },\n            { 100, \"c\" },\n\
    \            { 500, \"d\" },\n            { 1000, \"m\" }\n        };\n      \
    \  var numeralOrder = new List<long>() { 1000, 500, 100, 50, 10, 5, 1 };\n   \
    \     var numeralOrderIndex = 0;\n        while (number > 0) {\n            var\
    \ currentNumeral = numeralOrder[numeralOrderIndex];\n            var nextNumeral\
    \ = numeralOrder[numeralOrderIndex + 1];\n            if (number >= currentNumeral)\
    \ {\n                sb.Append(numeral[currentNumeral]);\n                number\
    \ -= currentNumeral;\n            } else if (number >= currentNumeral - nextNumeral)\
    \ {\n                sb.Append(numeral[nextNumeral]);\n                sb.Append(numeral[currentNumeral]);\n\
    \                number -= currentNumeral - nextNumeral;\n            } else {\n\
    \                numeralOrderIndex++;\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <82c91bf9160941dfaf236abfce987459>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.IntToMiniRoman (System.Int64 number) [0x000d8] in <82c91bf9160941dfaf236abfce987459>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00019] in <82c91bf9160941dfaf236abfce987459>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.IntToMiniRoman\
    \ (System.Int64 number) [0x000d8] in <82c91bf9160941dfaf236abfce987459>:0 \n \
    \ at Problem.Main (System.String[] args) [0x00019] in <82c91bf9160941dfaf236abfce987459>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < arabic.Length; i++) {\n\
    \            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                sb.Append(roman[i]);\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string result = \"\
    \";\n        for (int i = 0; i < arabic.Length; i++) {\n            while (number\
    \ >= arabic[i]) {\n                number -= arabic[i];\n                result\
    \ += roman[i];\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <737b29eecbcc4e58b2cf2e76ddf59ebe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <737b29eecbcc4e58b2cf2e76ddf59ebe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (number > 0) {\n\
    \            if (number >= 1000) {\n                sb.Append(\"m\");\n      \
    \          number -= 1000;\n            } else if (number >= 900) {\n        \
    \        sb.Append(\"cm\");\n                number -= 900;\n            } else\
    \ if (number >= 500) {\n                sb.Append(\"d\");\n                number\
    \ -= 500;\n            } else if (number >= 400) {\n                sb.Append(\"\
    cd\");\n                number -= 400;\n            } else if (number >= 100)\
    \ {\n                sb.Append(\"c\");\n                number -= 100;\n     \
    \       } else if (number >= 90) {\n                sb.Append(\"xc\");\n     \
    \           number -= 90;\n            } else if (number >= 50) {\n          \
    \      sb.Append(\"l\");\n                number -= 50;\n            } else if\
    \ (number >= 40) {\n                sb.Append(\"xl\");\n                number\
    \ -= 40;\n            } else if (number >= 10) {\n                sb.Append(\"\
    x\");\n                number -= 10;\n            } else if (number >= 9) {\n\
    \                sb.Append(\"ix\");\n                number -= 9;\n          \
    \  } else if (number >= 5) {\n                sb.Append(\"v\");\n            \
    \    number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"\
    iv\");\n                number -= 4;\n            } else if (number >= 1) {\n\
    \                sb.Append(\"i\");\n                number -= 1;\n           \
    \ }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var digits = new[] {\n    \
    \        new { Value = 1000L, Symbol = \"m\" },\n            new { Value = 500L,\
    \ Symbol = \"d\" },\n            new { Value = 100L, Symbol = \"c\" },\n     \
    \       new { Value = 50L, Symbol = \"l\" },\n            new { Value = 10L, Symbol\
    \ = \"x\" },\n            new { Value = 5L, Symbol = \"v\" },\n            new\
    \ { Value = 1L, Symbol = \"i\" },\n        };\n        foreach (var digit in digits)\
    \ {\n            while (number >= digit.Value) {\n                roman.Append(digit.Symbol);\n\
    \                number -= digit.Value;\n            }\n        }\n        return\
    \ roman.ToString();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <367cd4517fe74fa5b7eb52a7f6b5c50c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <367cd4517fe74fa5b7eb52a7f6b5c50c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string result = \"\
    \";\n        for (int i = 0; i < arabic.Length; i++) {\n            while (number\
    \ >= arabic[i]) {\n                number -= arabic[i];\n                result\
    \ += roman[i];\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ arabic.Length; i++) {\n            while (number >= arabic[i]) {\n         \
    \       number -= arabic[i];\n                sb.Append(roman[i]);\n         \
    \   }\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string result = \"\
    \";\n        for (int i = 0; i < arabic.Length; i++) {\n            while (number\
    \ >= arabic[i]) {\n                number -= arabic[i];\n                result\
    \ += roman[i];\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string result = \"\
    \";\n        for (int i = 0; i < arabic.Length; i++) {\n            while (number\
    \ >= arabic[i]) {\n                number -= arabic[i];\n                result\
    \ += roman[i];\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        if (number >= 1000) {\n   \
    \         roman.Append('m', (int)(number / 1000));\n            number %= 1000;\n\
    \        }\n        if (number >= 900) {\n            roman.Append(\"cm\");\n\
    \            number -= 900;\n        }\n        if (number >= 500) {\n       \
    \     roman.Append('d');\n            number -= 500;\n        }\n        if (number\
    \ >= 400) {\n            roman.Append(\"cd\");\n            number -= 400;\n \
    \       }\n        if (number >= 100) {\n            roman.Append('c', (int)(number\
    \ / 100));\n            number %= 100;\n        }\n        if (number >= 90) {\n\
    \            roman.Append(\"xc\");\n            number -= 90;\n        }\n   \
    \     if (number >= 50) {\n            roman.Append('l');\n            number\
    \ -= 50;\n        }\n        if (number >= 40) {\n            roman.Append(\"\
    xl\");\n            number -= 40;\n        }\n        if (number >= 10) {\n  \
    \          roman.Append('x', (int)(number / 10));\n            number %= 10;\n\
    \        }\n        if (number >= 9) {\n            roman.Append(\"ix\");\n  \
    \          number -= 9;\n        }\n        if (number >= 5) {\n            roman.Append('v');\n\
    \            number -= 5;\n        }\n        if (number >= 4) {\n           \
    \ roman.Append(\"iv\");\n            number -= 4;\n        }\n        if (number\
    \ >= 1) {\n            roman.Append('i', (int)number);\n        }\n        return\
    \ roman.ToString();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ arabic.Length; i++) {\n            while (number >= arabic[i]) {\n         \
    \       number -= arabic[i];\n                sb.Append(roman[i]);\n         \
    \   }\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ arabic.Length; i++) {\n            while (number >= arabic[i]) {\n         \
    \       number -= arabic[i];\n                sb.Append(roman[i]);\n         \
    \   }\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        int i = 0;\n       \
    \ while (number > 0 || arabic.Length == (i - 1)) {\n            while ((number\
    \ - arabic[i]) >= 0) {\n                number -= arabic[i];\n               \
    \ sb.Append(roman[i]);\n            }\n            i++;\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string result = \"\
    \";\n        for (int i = 0; i < arabic.Length; i++) {\n            while (number\
    \ >= arabic[i]) {\n                number -= arabic[i];\n                result\
    \ += roman[i];\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var result = new StringBuilder();\n        var digits = new[] { \"i\"\
    , \"v\", \"x\", \"l\", \"c\", \"d\", \"m\" };\n        var digit = 0;\n      \
    \  while (number > 0) {\n            var digitValue = number % 10;\n         \
    \   if (digitValue == 4) {\n                result.Insert(0, digits[digit] + digits[digit\
    \ + 1]);\n            } else if (digitValue == 9) {\n                result.Insert(0,\
    \ digits[digit] + digits[digit + 2]);\n            } else {\n                if\
    \ (digitValue >= 5) {\n                    result.Insert(0, digits[digit + 1]);\n\
    \                    digitValue -= 5;\n                }\n                for\
    \ (var i = 0; i < digitValue; i++) {\n                    result.Insert(0, digits[digit]);\n\
    \                }\n            }\n            number /= 10;\n            digit\
    \ += 2;\n        }\n        return result.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1383a5b011804148a25ffd5b2c376446>:0 \n"
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] decimal_value\
    \ = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string\
    \ result = \"\";\n        for (int i = 0; i < decimal_value.Length; i++) {\n \
    \           while (number >= decimal_value[i]) {\n                number -= decimal_value[i];\n\
    \                result += roman[i];\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <737b29eecbcc4e58b2cf2e76ddf59ebe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <737b29eecbcc4e58b2cf2e76ddf59ebe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        string result = \"\";\n        for (int i = 0; i < arabic.Length; i++)\
    \ {\n            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                result += roman[i];\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        string result = \"\";\n        for (int i = 0; i < arabic.Length; i++)\
    \ {\n            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                result += roman[i];\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < arabic.Length; i++) {\n\
    \            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                sb.Append(roman[i]);\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (number > 0) {\n\
    \            if (number >= 1000) {\n                sb.Append(\"m\");\n      \
    \          number -= 1000;\n            } else if (number >= 900) {\n        \
    \        sb.Append(\"cm\");\n                number -= 900;\n            } else\
    \ if (number >= 500) {\n                sb.Append(\"d\");\n                number\
    \ -= 500;\n            } else if (number >= 400) {\n                sb.Append(\"\
    cd\");\n                number -= 400;\n            } else if (number >= 100)\
    \ {\n                sb.Append(\"c\");\n                number -= 100;\n     \
    \       } else if (number >= 90) {\n                sb.Append(\"xc\");\n     \
    \           number -= 90;\n            } else if (number >= 50) {\n          \
    \      sb.Append(\"l\");\n                number -= 50;\n            } else if\
    \ (number >= 40) {\n                sb.Append(\"xl\");\n                number\
    \ -= 40;\n            } else if (number >= 10) {\n                sb.Append(\"\
    x\");\n                number -= 10;\n            } else if (number >= 9) {\n\
    \                sb.Append(\"ix\");\n                number -= 9;\n          \
    \  } else if (number >= 5) {\n                sb.Append(\"v\");\n            \
    \    number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"\
    iv\");\n                number -= 4;\n            } else if (number >= 1) {\n\
    \                sb.Append(\"i\");\n                number -= 1;\n           \
    \ }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var result = \"\";\n        var numeral = new Dictionary<int, string>\
    \ {\n            {1, \"i\"},\n            {5, \"v\"},\n            {10, \"x\"\
    },\n            {50, \"l\"},\n            {100, \"c\"},\n            {500, \"\
    d\"},\n            {1000, \"m\"},\n        };\n        var numeral_values = numeral.Keys.ToList();\n\
    \        numeral_values.Sort();\n        numeral_values.Reverse();\n        foreach\
    \ (var value in numeral_values) {\n            var count = number / value;\n \
    \           number -= count * value;\n            result += numeral[value].Repeat(count);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphvje4mnl.cs(36,38): error CS1061: ''string'' does not contain a definition
    for ''Repeat'' and no accessible extension method ''Repeat'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        var romans = new Dictionary<long,\
    \ string> {\n            { 1, \"i\" },\n            { 5, \"v\" },\n          \
    \  { 10, \"x\" },\n            { 50, \"l\" },\n            { 100, \"c\" },\n \
    \           { 500, \"d\" },\n            { 1000, \"m\" }\n        };\n       \
    \ var keys = romans.Keys.ToList();\n        keys.Sort();\n        keys.Reverse();\n\
    \        foreach (var key in keys) {\n            while (number >= key) {\n  \
    \              sb.Append(romans[key]);\n                number -= key;\n     \
    \       }\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8ea513ac83d437f89cfba3f9470f048>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8ea513ac83d437f89cfba3f9470f048>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ arabic.Length; i++) {\n            while (number >= arabic[i]) {\n         \
    \       number -= arabic[i];\n                sb.Append(roman[i]);\n         \
    \   }\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string roman = \"\";\n        while (number >= 1000) {\n            roman\
    \ += \"m\";\n            number -= 1000;\n        }\n        if (number >= 900)\
    \ {\n            roman += \"cm\";\n            number -= 900;\n        }\n   \
    \     if (number >= 500) {\n            roman += \"d\";\n            number -=\
    \ 500;\n        }\n        if (number >= 400) {\n            roman += \"cd\";\n\
    \            number -= 400;\n        }\n        while (number >= 100) {\n    \
    \        roman += \"c\";\n            number -= 100;\n        }\n        if (number\
    \ >= 90) {\n            roman += \"xc\";\n            number -= 90;\n        }\n\
    \        if (number >= 50) {\n            roman += \"l\";\n            number\
    \ -= 50;\n        }\n        if (number >= 40) {\n            roman += \"xl\"\
    ;\n            number -= 40;\n        }\n        while (number >= 10) {\n    \
    \        roman += \"x\";\n            number -= 10;\n        }\n        if (number\
    \ >= 9) {\n            roman += \"ix\";\n            number -= 9;\n        }\n\
    \        if (number >= 5) {\n            roman += \"v\";\n            number -=\
    \ 5;\n        }\n        if (number >= 4) {\n            roman += \"iv\";\n  \
    \          number -= 4;\n        }\n        while (number >= 1) {\n          \
    \  roman += \"i\";\n            number -= 1;\n        }\n        return roman;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string result = \"\
    \";\n        for (int i = 0; i < arabic.Length; i++) {\n            while (number\
    \ >= arabic[i]) {\n                number -= arabic[i];\n                result\
    \ += roman[i];\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        string result = \"\";\n        for (int i = 0; i < arabic.Length; i++)\
    \ {\n            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                result += roman[i];\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        int i = 0;\n       \
    \ while (number > 0 || arabic.Length == (i - 1)) {\n            while ((number\
    \ - arabic[i]) >= 0) {\n                number -= arabic[i];\n               \
    \ sb.Append(roman[i]);\n            }\n            i++;\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var num = number;\n       \
    \ var roman_numerals = new Dictionary<int, string>() {\n            { 1, \"i\"\
    \ },\n            { 5, \"v\" },\n            { 10, \"x\" },\n            { 50,\
    \ \"l\" },\n            { 100, \"c\" },\n            { 500, \"d\" },\n       \
    \     { 1000, \"m\" }\n        };\n        var roman_numerals_order = new List<int>()\
    \ {\n            1000, 500, 100, 50, 10, 5, 1\n        };\n        foreach (var\
    \ roman_numeral in roman_numerals_order) {\n            var count = num / roman_numeral;\n\
    \            num %= roman_numeral;\n            if (count == 9) {\n          \
    \      roman.Append(roman_numerals[roman_numeral]);\n                roman.Append(roman_numerals[roman_numeral\
    \ * 10]);\n            } else if (count >= 5) {\n                roman.Append(roman_numerals[roman_numeral\
    \ * 5]);\n                for (var i = 0; i < count - 5; i++) {\n            \
    \        roman.Append(roman_numerals[roman_numeral]);\n                }\n   \
    \         } else if (count == 4) {\n                roman.Append(roman_numerals[roman_numeral]);\n\
    \                roman.Append(roman_numerals[roman_numeral * 5]);\n          \
    \  } else {\n                for (var i = 0; i < count; i++) {\n             \
    \       roman.Append(roman_numerals[roman_numeral]);\n                }\n    \
    \        }\n        }\n        return roman.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b9e8c8cc24847beaea723ce53969d36>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b9e8c8cc24847beaea723ce53969d36>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        while (number > 0) {\n       \
    \     if (number >= 1000) {\n                sb.Append('m');\n               \
    \ number -= 1000;\n            } else if (number >= 900) {\n                sb.Append(\"\
    cm\");\n                number -= 900;\n            } else if (number >= 500)\
    \ {\n                sb.Append('d');\n                number -= 500;\n       \
    \     } else if (number >= 400) {\n                sb.Append(\"cd\");\n      \
    \          number -= 400;\n            } else if (number >= 100) {\n         \
    \       sb.Append('c');\n                number -= 100;\n            } else if\
    \ (number >= 90) {\n                sb.Append(\"xc\");\n                number\
    \ -= 90;\n            } else if (number >= 50) {\n                sb.Append('l');\n\
    \                number -= 50;\n            } else if (number >= 40) {\n     \
    \           sb.Append(\"xl\");\n                number -= 40;\n            } else\
    \ if (number >= 10) {\n                sb.Append('x');\n                number\
    \ -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"\
    ix\");\n                number -= 9;\n            } else if (number >= 5) {\n\
    \                sb.Append('v');\n                number -= 5;\n            }\
    \ else if (number >= 4) {\n                sb.Append(\"iv\");\n              \
    \  number -= 4;\n            } else if (number >= 1) {\n                sb.Append('i');\n\
    \                number -= 1;\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < arabic.Length; i++) {\n\
    \            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                sb.Append(roman[i]);\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <737b29eecbcc4e58b2cf2e76ddf59ebe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <737b29eecbcc4e58b2cf2e76ddf59ebe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        var nums = new long[] { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        var romans = new\
    \ string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\" };\n        for (int i = 0; i < nums.Length; i++)\
    \ {\n            while (number >= nums[i]) {\n                sb.Append(romans[i]);\n\
    \                number -= nums[i];\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ decimal_values = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1 };\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i < roman.Length; i++) {\n            while (number >= decimal_values[i])\
    \ {\n                number -= decimal_values[i];\n                sb.Append(roman[i]);\n\
    \            }\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var digits = new List<int>();\n\
    \        while (number > 0) {\n            digits.Add((int)(number % 10));\n \
    \           number /= 10;\n        }\n        digits.Reverse();\n        var ones\
    \ = new Dictionary<int, string> {\n            { 1, \"i\" },\n            { 2,\
    \ \"ii\" },\n            { 3, \"iii\" },\n            { 4, \"iv\" },\n       \
    \     { 5, \"v\" },\n            { 6, \"vi\" },\n            { 7, \"vii\" },\n\
    \            { 8, \"viii\" },\n            { 9, \"ix\" }\n        };\n       \
    \ var tens = new Dictionary<int, string> {\n            { 1, \"x\" },\n      \
    \      { 2, \"xx\" },\n            { 3, \"xxx\" },\n            { 4, \"xl\" },\n\
    \            { 5, \"l\" },\n            { 6, \"lx\" },\n            { 7, \"lxx\"\
    \ },\n            { 8, \"lxxx\" },\n            { 9, \"xc\" }\n        };\n  \
    \      var hundreds = new Dictionary<int, string> {\n            { 1, \"c\" },\n\
    \            { 2, \"cc\" },\n            { 3, \"ccc\" },\n            { 4, \"\
    cd\" },\n            { 5, \"d\" },\n            { 6, \"dc\" },\n            {\
    \ 7, \"dcc\" },\n            { 8, \"dccc\" },\n            { 9, \"cm\" }\n   \
    \     };\n        var thousands = new Dictionary<int, string> {\n            {\
    \ 1, \"m\" },\n            { 2, \"mm\" },\n            { 3, \"mmm\" },\n     \
    \       { 4, \"mv\" },\n            { 5, \"v\" },\n            { 6, \"vm\" },\n\
    \            { 7, \"vmm\" },\n            { 8, \"vmmm\" },\n            { 9, \"\
    mx\" }\n        };\n        if (digits.Count >= 1) {\n            roman.Append(ones[digits[0]]);\n\
    \        }\n        if (digits.Count >= 2) {\n            roman.Append(\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn_j57r6s.cs(75,26): error CS1026: ) expected

    /tmp/tmpn_j57r6s.cs(75,26): error CS1002: ; expected

    /tmp/tmpn_j57r6s.cs(77,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpn_j57r6s.cs(94,2): error CS1513: } expected

    '
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var result = new StringBuilder();\n        var roman = new Dictionary<int,\
    \ string> {\n            {1, \"i\"},\n            {5, \"v\"},\n            {10,\
    \ \"x\"},\n            {50, \"l\"},\n            {100, \"c\"},\n            {500,\
    \ \"d\"},\n            {1000, \"m\"}\n        };\n        var digits = new List<int>();\n\
    \        while (number > 0) {\n            digits.Add((int)(number % 10));\n \
    \           number /= 10;\n        }\n        digits.Reverse();\n        for (int\
    \ i = 0; i < digits.Count; i++) {\n            var digit = digits[i];\n      \
    \      if (digit == 0) {\n                continue;\n            }\n         \
    \   var base10 = (int)Math.Pow(10, i);\n            if (digit == 4) {\n      \
    \          result.Append(roman[base10]);\n                result.Append(roman[base10\
    \ * 5]);\n            } else if (digit == 9) {\n                result.Append(roman[base10]);\n\
    \                result.Append(roman[base10 * 10]);\n            } else {\n  \
    \              if (digit >= 5) {\n                    result.Append(roman[base10\
    \ * 5]);\n                    digit -= 5;\n                }\n               \
    \ for (int j = 0; j < digit; j++) {\n                    result.Append(roman[base10]);\n\
    \                }\n            }\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59219d3cc0014309a9f033aadd7c375a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59219d3cc0014309a9f033aadd7c375a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var result = new StringBuilder();\n        var num = number;\n      \
    \  while (num >= 1000) {\n            result.Append(\"m\");\n            num -=\
    \ 1000;\n        }\n        if (num >= 900) {\n            result.Append(\"cm\"\
    );\n            num -= 900;\n        }\n        if (num >= 500) {\n          \
    \  result.Append(\"d\");\n            num -= 500;\n        }\n        if (num\
    \ >= 400) {\n            result.Append(\"cd\");\n            num -= 400;\n   \
    \     }\n        while (num >= 100) {\n            result.Append(\"c\");\n   \
    \         num -= 100;\n        }\n        if (num >= 90) {\n            result.Append(\"\
    xc\");\n            num -= 90;\n        }\n        if (num >= 50) {\n        \
    \    result.Append(\"l\");\n            num -= 50;\n        }\n        if (num\
    \ >= 40) {\n            result.Append(\"xl\");\n            num -= 40;\n     \
    \   }\n        while (num >= 10) {\n            result.Append(\"x\");\n      \
    \      num -= 10;\n        }\n        if (num >= 9) {\n            result.Append(\"\
    ix\");\n            num -= 9;\n        }\n        if (num >= 5) {\n          \
    \  result.Append(\"v\");\n            num -= 5;\n        }\n        if (num >=\
    \ 4) {\n            result.Append(\"iv\");\n            num -= 4;\n        }\n\
    \        while (num >= 1) {\n            result.Append(\"i\");\n            num\
    \ -= 1;\n        }\n        return result.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var digits = new List<int>();\n\
    \        while (number > 0) {\n            digits.Add((int)(number % 10));\n \
    \           number /= 10;\n        }\n        digits.Reverse();\n        for (int\
    \ i = 0; i < digits.Count; i++) {\n            var digit = digits[i];\n      \
    \      if (digit == 0) {\n                continue;\n            }\n         \
    \   if (digit <= 3) {\n                roman.Append(new string(GetRomanDigit(i),\
    \ digit));\n            } else if (digit == 4) {\n                roman.Append(GetRomanDigit(i));\n\
    \                roman.Append(GetRomanDigit(i + 1));\n            } else if (digit\
    \ <= 8) {\n                roman.Append(GetRomanDigit(i + 1));\n             \
    \   roman.Append(new string(GetRomanDigit(i), digit - 5));\n            } else\
    \ {\n                roman.Append(GetRomanDigit(i));\n                roman.Append(GetRomanDigit(i\
    \ + 2));\n            }\n        }\n        return roman.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptqlv4ojb.cs(33,41): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    /tmp/tmptqlv4ojb.cs(35,30): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    /tmp/tmptqlv4ojb.cs(36,30): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    /tmp/tmptqlv4ojb.cs(38,30): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    /tmp/tmptqlv4ojb.cs(39,41): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    /tmp/tmptqlv4ojb.cs(41,30): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    /tmp/tmptqlv4ojb.cs(42,30): error CS0103: The name ''GetRomanDigit'' does not
    exist in the current context

    '
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var result = new StringBuilder();\n        var numeral = new Dictionary<int,\
    \ string>() {\n            { 1, \"i\" },\n            { 5, \"v\" },\n        \
    \    { 10, \"x\" },\n            { 50, \"l\" },\n            { 100, \"c\" },\n\
    \            { 500, \"d\" },\n            { 1000, \"m\" }\n        };\n      \
    \  var digits = new List<int>();\n        while (number > 0) {\n            digits.Add((int)(number\
    \ % 10));\n            number /= 10;\n        }\n        digits.Reverse();\n \
    \       for (int i = 0; i < digits.Count; i++) {\n            int digit = digits[i];\n\
    \            if (digit == 4) {\n                result.Append(numeral[(int)Math.Pow(10,\
    \ i)]);\n                result.Append(numeral[5 * (int)Math.Pow(10, i)]);\n \
    \           } else if (digit == 9) {\n                result.Append(numeral[(int)Math.Pow(10,\
    \ i)]);\n                result.Append(numeral[10 * (int)Math.Pow(10, i)]);\n\
    \            } else {\n                if (digit >= 5) {\n                   \
    \ result.Append(numeral[5 * (int)Math.Pow(10, i)]);\n                    digit\
    \ -= 5;\n                }\n                for (int j = 0; j < digit; j++) {\n\
    \                    result.Append(numeral[(int)Math.Pow(10, i)]);\n         \
    \       }\n            }\n        }\n        return result.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <595e93e53f424898892fdb980c684a5c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <595e93e53f424898892fdb980c684a5c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        while (number >= 1000) {\n   \
    \         sb.Append(\"m\");\n            number -= 1000;\n        }\n        if\
    \ (number >= 900) {\n            sb.Append(\"cm\");\n            number -= 900;\n\
    \        }\n        if (number >= 500) {\n            sb.Append(\"d\");\n    \
    \        number -= 500;\n        }\n        if (number >= 400) {\n           \
    \ sb.Append(\"cd\");\n            number -= 400;\n        }\n        while (number\
    \ >= 100) {\n            sb.Append(\"c\");\n            number -= 100;\n     \
    \   }\n        if (number >= 90) {\n            sb.Append(\"xc\");\n         \
    \   number -= 90;\n        }\n        if (number >= 50) {\n            sb.Append(\"\
    l\");\n            number -= 50;\n        }\n        if (number >= 40) {\n   \
    \         sb.Append(\"xl\");\n            number -= 40;\n        }\n        while\
    \ (number >= 10) {\n            sb.Append(\"x\");\n            number -= 10;\n\
    \        }\n        if (number >= 9) {\n            sb.Append(\"ix\");\n     \
    \       number -= 9;\n        }\n        if (number >= 5) {\n            sb.Append(\"\
    v\");\n            number -= 5;\n        }\n        if (number >= 4) {\n     \
    \       sb.Append(\"iv\");\n            number -= 4;\n        }\n        while\
    \ (number >= 1) {\n            sb.Append(\"i\");\n            number -= 1;\n \
    \       }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var digits = new[] { \"i\"\
    , \"v\", \"x\", \"l\", \"c\", \"d\", \"m\" };\n        for (int i = 0; i < digits.Length;\
    \ i += 2) {\n            var digit = number % 10;\n            number /= 10;\n\
    \            if (digit == 0) continue;\n            if (digit <= 3) {\n      \
    \          roman.Insert(0, digits[i], digit);\n            } else if (digit ==\
    \ 4) {\n                roman.Insert(0, digits[i] + digits[i + 1]);\n        \
    \    } else if (digit <= 8) {\n                roman.Insert(0, digits[i + 1] +\
    \ digits[i], digit - 5);\n            } else {\n                roman.Insert(0,\
    \ digits[i] + digits[i + 2]);\n            }\n        }\n        return roman.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplnybax_b.cs(27,44): error CS1503: Argument 3: cannot convert from ''long''
    to ''int''

    /tmp/tmplnybax_b.cs(31,60): error CS1503: Argument 3: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0; i < arabic.Length; i++) {\n\
    \            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                sb.Append(roman[i]);\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder result = new StringBuilder();\n        for (int i = 0;\
    \ i < arabic.Length; i++) {\n            while (number >= arabic[i]) {\n     \
    \           number -= arabic[i];\n                result.Append(roman[i]);\n \
    \           }\n        }\n        return result.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        while (number > 0) {\n    \
    \        if (number >= 1000) {\n                roman.Append('m');\n         \
    \       number -= 1000;\n            } else if (number >= 900) {\n           \
    \     roman.Append(\"cm\");\n                number -= 900;\n            } else\
    \ if (number >= 500) {\n                roman.Append('d');\n                number\
    \ -= 500;\n            } else if (number >= 400) {\n                roman.Append(\"\
    cd\");\n                number -= 400;\n            } else if (number >= 100)\
    \ {\n                roman.Append('c');\n                number -= 100;\n    \
    \        } else if (number >= 90) {\n                roman.Append(\"xc\");\n \
    \               number -= 90;\n            } else if (number >= 50) {\n      \
    \          roman.Append('l');\n                number -= 50;\n            } else\
    \ if (number >= 40) {\n                roman.Append(\"xl\");\n               \
    \ number -= 40;\n            } else if (number >= 10) {\n                roman.Append('x');\n\
    \                number -= 10;\n            } else if (number >= 9) {\n      \
    \          roman.Append(\"ix\");\n                number -= 9;\n            }\
    \ else if (number >= 5) {\n                roman.Append('v');\n              \
    \  number -= 5;\n            } else if (number >= 4) {\n                roman.Append(\"\
    iv\");\n                number -= 4;\n            } else if (number >= 1) {\n\
    \                roman.Append('i');\n                number -= 1;\n          \
    \  }\n        }\n        return roman.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var digits = new[] { \"i\"\
    , \"v\", \"x\", \"l\", \"c\", \"d\", \"m\" };\n        var digit = 0;\n      \
    \  while (number > 0) {\n            var digitValue = number % 10;\n         \
    \   if (digitValue == 4) {\n                roman.Insert(0, digits[digit] + digits[digit\
    \ + 1]);\n            } else if (digitValue == 9) {\n                roman.Insert(0,\
    \ digits[digit] + digits[digit + 2]);\n            } else {\n                var\
    \ digitRoman = new StringBuilder();\n                if (digitValue >= 5) {\n\
    \                    digitRoman.Append(digits[digit + 1]);\n                 \
    \   digitValue -= 5;\n                }\n                for (var i = 0; i < digitValue;\
    \ i++) {\n                    digitRoman.Append(digits[digit]);\n            \
    \    }\n                roman.Insert(0, digitRoman);\n            }\n        \
    \    number /= 10;\n            digit += 2;\n        }\n        return roman.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        }\n        var sb = new StringBuilder();\n        while (number\
    \ >= 1000) {\n            sb.Append(\"m\");\n            number -= 1000;\n   \
    \     }\n        if (number >= 900) {\n            sb.Append(\"cm\");\n      \
    \      number -= 900;\n        }\n        if (number >= 500) {\n            sb.Append(\"\
    d\");\n            number -= 500;\n        }\n        if (number >= 400) {\n \
    \           sb.Append(\"cd\");\n            number -= 400;\n        }\n      \
    \  while (number >= 100) {\n            sb.Append(\"c\");\n            number\
    \ -= 100;\n        }\n        if (number >= 90) {\n            sb.Append(\"xc\"\
    );\n            number -= 90;\n        }\n        if (number >= 50) {\n      \
    \      sb.Append(\"l\");\n            number -= 50;\n        }\n        if (number\
    \ >= 40) {\n            sb.Append(\"xl\");\n            number -= 40;\n      \
    \  }\n        while (number >= 10) {\n            sb.Append(\"x\");\n        \
    \    number -= 10;\n        }\n        if (number >= 9) {\n            sb.Append(\"\
    ix\");\n            number -= 9;\n        }\n        if (number >= 5) {\n    \
    \        sb.Append(\"v\");\n            number -= 5;\n        }\n        if (number\
    \ >= 4) {\n            sb.Append(\"iv\");\n            number -= 4;\n        }\n\
    \        while (number >= 1) {\n            sb.Append(\"i\");\n            number\
    \ -= 1;\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        var num = number;\n        while\
    \ (num >= 1000) {\n            sb.Append(\"m\");\n            num -= 1000;\n \
    \       }\n        if (num >= 900) {\n            sb.Append(\"cm\");\n       \
    \     num -= 900;\n        }\n        if (num >= 500) {\n            sb.Append(\"\
    d\");\n            num -= 500;\n        }\n        if (num >= 400) {\n       \
    \     sb.Append(\"cd\");\n            num -= 400;\n        }\n        while (num\
    \ >= 100) {\n            sb.Append(\"c\");\n            num -= 100;\n        }\n\
    \        if (num >= 90) {\n            sb.Append(\"xc\");\n            num -=\
    \ 90;\n        }\n        if (num >= 50) {\n            sb.Append(\"l\");\n  \
    \          num -= 50;\n        }\n        if (num >= 40) {\n            sb.Append(\"\
    xl\");\n            num -= 40;\n        }\n        while (num >= 10) {\n     \
    \       sb.Append(\"x\");\n            num -= 10;\n        }\n        if (num\
    \ >= 9) {\n            sb.Append(\"ix\");\n            num -= 9;\n        }\n\
    \        if (num >= 5) {\n            sb.Append(\"v\");\n            num -= 5;\n\
    \        }\n        if (num >= 4) {\n            sb.Append(\"iv\");\n        \
    \    num -= 4;\n        }\n        while (num >= 1) {\n            sb.Append(\"\
    i\");\n            num -= 1;\n        }\n        return sb.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code here\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <787e92e19952479e9ffcac58ada0b04f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <787e92e19952479e9ffcac58ada0b04f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (number > 0) {\n\
    \            if (number >= 1000) {\n                sb.Append(\"m\");\n      \
    \          number -= 1000;\n            } else if (number >= 900) {\n        \
    \        sb.Append(\"cm\");\n                number -= 900;\n            } else\
    \ if (number >= 500) {\n                sb.Append(\"d\");\n                number\
    \ -= 500;\n            } else if (number >= 400) {\n                sb.Append(\"\
    cd\");\n                number -= 400;\n            } else if (number >= 100)\
    \ {\n                sb.Append(\"c\");\n                number -= 100;\n     \
    \       } else if (number >= 90) {\n                sb.Append(\"xc\");\n     \
    \           number -= 90;\n            } else if (number >= 50) {\n          \
    \      sb.Append(\"l\");\n                number -= 50;\n            } else if\
    \ (number >= 40) {\n                sb.Append(\"xl\");\n                number\
    \ -= 40;\n            } else if (number >= 10) {\n                sb.Append(\"\
    x\");\n                number -= 10;\n            } else if (number >= 9) {\n\
    \                sb.Append(\"ix\");\n                number -= 9;\n          \
    \  } else if (number >= 5) {\n                sb.Append(\"v\");\n            \
    \    number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"\
    iv\");\n                number -= 4;\n            } else if (number >= 1) {\n\
    \                sb.Append(\"i\");\n                number -= 1;\n           \
    \ }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // TODO: Implement this function.\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1472a7c86ae34b56b757f8880ef150fa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1472a7c86ae34b56b757f8880ef150fa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        long num = number;\n        while (num\
    \ > 0) {\n            if (num >= 1000) {\n                result += \"m\";\n \
    \               num -= 1000;\n            } else if (num >= 900) {\n         \
    \       result += \"cm\";\n                num -= 900;\n            } else if\
    \ (num >= 500) {\n                result += \"d\";\n                num -= 500;\n\
    \            } else if (num >= 400) {\n                result += \"cd\";\n   \
    \             num -= 400;\n            } else if (num >= 100) {\n            \
    \    result += \"c\";\n                num -= 100;\n            } else if (num\
    \ >= 90) {\n                result += \"xc\";\n                num -= 90;\n  \
    \          } else if (num >= 50) {\n                result += \"l\";\n       \
    \         num -= 50;\n            } else if (num >= 40) {\n                result\
    \ += \"xl\";\n                num -= 40;\n            } else if (num >= 10) {\n\
    \                result += \"x\";\n                num -= 10;\n            } else\
    \ if (num >= 9) {\n                result += \"ix\";\n                num -= 9;\n\
    \            } else if (num >= 5) {\n                result += \"v\";\n      \
    \          num -= 5;\n            } else if (num >= 4) {\n                result\
    \ += \"iv\";\n                num -= 4;\n            } else if (num >= 1) {\n\
    \                result += \"i\";\n                num -= 1;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        }\n        var result = new StringBuilder();\n        var\
    \ digits = new[] {\n            new { Value = 1000, Symbol = \"m\" },\n      \
    \      new { Value = 900, Symbol = \"cm\" },\n            new { Value = 500, Symbol\
    \ = \"d\" },\n            new { Value = 400, Symbol = \"cd\" },\n            new\
    \ { Value = 100, Symbol = \"c\" },\n            new { Value = 90, Symbol = \"\
    xc\" },\n            new { Value = 50, Symbol = \"l\" },\n            new { Value\
    \ = 40, Symbol = \"xl\" },\n            new { Value = 10, Symbol = \"x\" },\n\
    \            new { Value = 9, Symbol = \"ix\" },\n            new { Value = 5,\
    \ Symbol = \"v\" },\n            new { Value = 4, Symbol = \"iv\" },\n       \
    \     new { Value = 1, Symbol = \"i\" },\n        };\n        foreach (var digit\
    \ in digits) {\n            while (number >= digit.Value) {\n                result.Append(digit.Symbol);\n\
    \                number -= digit.Value;\n            }\n        }\n        return\
    \ result.ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <737b29eecbcc4e58b2cf2e76ddf59ebe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <737b29eecbcc4e58b2cf2e76ddf59ebe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ arabic.Length; i++) {\n            while (number >= arabic[i]) {\n         \
    \       number -= arabic[i];\n                sb.Append(roman[i]);\n         \
    \   }\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var result = new StringBuilder();\n        var roman = new Dictionary<int,\
    \ string>() {\n            { 1, \"i\" },\n            { 5, \"v\" },\n        \
    \    { 10, \"x\" },\n            { 50, \"l\" },\n            { 100, \"c\" },\n\
    \            { 500, \"d\" },\n            { 1000, \"m\" }\n        };\n      \
    \  var digits = new List<int>();\n        while (number > 0) {\n            digits.Add((int)(number\
    \ % 10));\n            number /= 10;\n        }\n        digits.Reverse();\n \
    \       for (int i = 0; i < digits.Count; i++) {\n            var digit = digits[i];\n\
    \            var factor = (int)Math.Pow(10, i);\n            if (digit <= 3) {\n\
    \                result.Append(roman[factor].Repeat(digit));\n            } else\
    \ if (digit == 4) {\n                result.Append(roman[factor] + roman[5 * factor]);\n\
    \            } else if (digit <= 8) {\n                result.Append(roman[5 *\
    \ factor] + roman[factor].Repeat(digit - 5));\n            } else {\n        \
    \        result.Append(roman[factor] + roman[10 * factor]);\n            }\n \
    \       }\n        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6dxt5jsd.cs(40,45): error CS1061: ''string'' does not contain a definition
    for ''Repeat'' and no accessible extension method ''Repeat'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp6dxt5jsd.cs(44,65): error CS1061: ''string'' does not contain a definition
    for ''Repeat'' and no accessible extension method ''Repeat'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        while (number > 0) {\n    \
    \        if (number >= 1000) {\n                roman.Append(\"m\");\n       \
    \         number -= 1000;\n            } else if (number >= 900) {\n         \
    \       roman.Append(\"cm\");\n                number -= 900;\n            } else\
    \ if (number >= 500) {\n                roman.Append(\"d\");\n               \
    \ number -= 500;\n            } else if (number >= 400) {\n                roman.Append(\"\
    cd\");\n                number -= 400;\n            } else if (number >= 100)\
    \ {\n                roman.Append(\"c\");\n                number -= 100;\n  \
    \          } else if (number >= 90) {\n                roman.Append(\"xc\");\n\
    \                number -= 90;\n            } else if (number >= 50) {\n     \
    \           roman.Append(\"l\");\n                number -= 50;\n            }\
    \ else if (number >= 40) {\n                roman.Append(\"xl\");\n          \
    \      number -= 40;\n            } else if (number >= 10) {\n               \
    \ roman.Append(\"x\");\n                number -= 10;\n            } else if (number\
    \ >= 9) {\n                roman.Append(\"ix\");\n                number -= 9;\n\
    \            } else if (number >= 5) {\n                roman.Append(\"v\");\n\
    \                number -= 5;\n            } else if (number >= 4) {\n       \
    \         roman.Append(\"iv\");\n                number -= 4;\n            } else\
    \ if (number >= 1) {\n                roman.Append(\"i\");\n                number\
    \ -= 1;\n            }\n        }\n        return roman.ToString();\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        string result = \"\";\n        for (int i = 0; i < arabic.Length; i++)\
    \ {\n            while (number >= arabic[i]) {\n                number -= arabic[i];\n\
    \                result += roman[i];\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        var roman = new Dictionary<int,\
    \ string> {\n            { 1000, \"m\" },\n            { 900, \"cm\" },\n    \
    \        { 500, \"d\" },\n            { 400, \"cd\" },\n            { 100, \"\
    c\" },\n            { 90, \"xc\" },\n            { 50, \"l\" },\n            {\
    \ 40, \"xl\" },\n            { 10, \"x\" },\n            { 9, \"ix\" },\n    \
    \        { 5, \"v\" },\n            { 4, \"iv\" },\n            { 1, \"i\" }\n\
    \        };\n        foreach (var kvp in roman) {\n            while (number >=\
    \ kvp.Key) {\n                sb.Append(kvp.Value);\n                number -=\
    \ kvp.Key;\n            }\n        }\n        return sb.ToString();\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        int[] values = { 1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string[] numerals = { \"m\", \"\
    cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\"\
    , \"i\" };\n        for (int i = 0; i < values.Length; i++) {\n            while\
    \ (number >= values[i]) {\n                number -= values[i];\n            \
    \    result += numerals[i];\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // TODO: Implement this function.\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1472a7c86ae34b56b757f8880ef150fa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1472a7c86ae34b56b757f8880ef150fa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        while (number > 0) {\n       \
    \     if (number >= 1000) {\n                sb.Append('m');\n               \
    \ number -= 1000;\n            } else if (number >= 900) {\n                sb.Append(\"\
    cm\");\n                number -= 900;\n            } else if (number >= 500)\
    \ {\n                sb.Append('d');\n                number -= 500;\n       \
    \     } else if (number >= 400) {\n                sb.Append(\"cd\");\n      \
    \          number -= 400;\n            } else if (number >= 100) {\n         \
    \       sb.Append('c');\n                number -= 100;\n            } else if\
    \ (number >= 90) {\n                sb.Append(\"xc\");\n                number\
    \ -= 90;\n            } else if (number >= 50) {\n                sb.Append('l');\n\
    \                number -= 50;\n            } else if (number >= 40) {\n     \
    \           sb.Append(\"xl\");\n                number -= 40;\n            } else\
    \ if (number >= 10) {\n                sb.Append('x');\n                number\
    \ -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"\
    ix\");\n                number -= 9;\n            } else if (number >= 5) {\n\
    \                sb.Append('v');\n                number -= 5;\n            }\
    \ else if (number >= 4) {\n                sb.Append(\"iv\");\n              \
    \  number -= 4;\n            } else if (number >= 1) {\n                sb.Append('i');\n\
    \                number -= 1;\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var result = new StringBuilder();\n        var numeral = new Dictionary<int,\
    \ string>() {\n            { 1000, \"m\" },\n            { 900, \"cm\" },\n  \
    \          { 500, \"d\" },\n            { 400, \"cd\" },\n            { 100, \"\
    c\" },\n            { 90, \"xc\" },\n            { 50, \"l\" },\n            {\
    \ 40, \"xl\" },\n            { 10, \"x\" },\n            { 9, \"ix\" },\n    \
    \        { 5, \"v\" },\n            { 4, \"iv\" },\n            { 1, \"i\" }\n\
    \        };\n        foreach (var pair in numeral) {\n            while (number\
    \ >= pair.Key) {\n                result.Append(pair.Value);\n               \
    \ number -= pair.Key;\n            }\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string roman = \"\";\n        while (number >= 1000) {\n            roman\
    \ += \"m\";\n            number -= 1000;\n        }\n        if (number >= 900)\
    \ {\n            roman += \"cm\";\n            number -= 900;\n        }\n   \
    \     if (number >= 500) {\n            roman += \"d\";\n            number -=\
    \ 500;\n        }\n        if (number >= 400) {\n            roman += \"cd\";\n\
    \            number -= 400;\n        }\n        while (number >= 100) {\n    \
    \        roman += \"c\";\n            number -= 100;\n        }\n        if (number\
    \ >= 90) {\n            roman += \"xc\";\n            number -= 90;\n        }\n\
    \        if (number >= 50) {\n            roman += \"l\";\n            number\
    \ -= 50;\n        }\n        if (number >= 40) {\n            roman += \"xl\"\
    ;\n            number -= 40;\n        }\n        while (number >= 10) {\n    \
    \        roman += \"x\";\n            number -= 10;\n        }\n        if (number\
    \ >= 9) {\n            roman += \"ix\";\n            number -= 9;\n        }\n\
    \        if (number >= 5) {\n            roman += \"v\";\n            number -=\
    \ 5;\n        }\n        if (number >= 4) {\n            roman += \"iv\";\n  \
    \          number -= 4;\n        }\n        while (number >= 1) {\n          \
    \  roman += \"i\";\n            number -= 1;\n        }\n        return roman;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        while (number > 0) {\n    \
    \        if (number >= 1000) {\n                roman.Append('m');\n         \
    \       number -= 1000;\n            } else if (number >= 900) {\n           \
    \     roman.Append(\"cm\");\n                number -= 900;\n            } else\
    \ if (number >= 500) {\n                roman.Append('d');\n                number\
    \ -= 500;\n            } else if (number >= 400) {\n                roman.Append(\"\
    cd\");\n                number -= 400;\n            } else if (number >= 100)\
    \ {\n                roman.Append('c');\n                number -= 100;\n    \
    \        } else if (number >= 90) {\n                roman.Append(\"xc\");\n \
    \               number -= 90;\n            } else if (number >= 50) {\n      \
    \          roman.Append('l');\n                number -= 50;\n            } else\
    \ if (number >= 40) {\n                roman.Append(\"xl\");\n               \
    \ number -= 40;\n            } else if (number >= 10) {\n                roman.Append('x');\n\
    \                number -= 10;\n            } else if (number >= 9) {\n      \
    \          roman.Append(\"ix\");\n                number -= 9;\n            }\
    \ else if (number >= 5) {\n                roman.Append('v');\n              \
    \  number -= 5;\n            } else if (number >= 4) {\n                roman.Append(\"\
    iv\");\n                number -= 4;\n            } else if (number >= 1) {\n\
    \                roman.Append('i');\n                number -= 1;\n          \
    \  }\n        }\n        return roman.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        var num = number;\n        while\
    \ (num >= 1000) {\n            sb.Append(\"m\");\n            num -= 1000;\n \
    \       }\n        if (num >= 900) {\n            sb.Append(\"cm\");\n       \
    \     num -= 900;\n        }\n        if (num >= 500) {\n            sb.Append(\"\
    d\");\n            num -= 500;\n        }\n        if (num >= 400) {\n       \
    \     sb.Append(\"cd\");\n            num -= 400;\n        }\n        while (num\
    \ >= 100) {\n            sb.Append(\"c\");\n            num -= 100;\n        }\n\
    \        if (num >= 90) {\n            sb.Append(\"xc\");\n            num -=\
    \ 90;\n        }\n        if (num >= 50) {\n            sb.Append(\"l\");\n  \
    \          num -= 50;\n        }\n        if (num >= 40) {\n            sb.Append(\"\
    xl\");\n            num -= 40;\n        }\n        while (num >= 10) {\n     \
    \       sb.Append(\"x\");\n            num -= 10;\n        }\n        if (num\
    \ >= 9) {\n            sb.Append(\"ix\");\n            num -= 9;\n        }\n\
    \        if (num >= 5) {\n            sb.Append(\"v\");\n            num -= 5;\n\
    \        }\n        if (num >= 4) {\n            sb.Append(\"iv\");\n        \
    \    num -= 4;\n        }\n        while (num >= 1) {\n            sb.Append(\"\
    i\");\n            num -= 1;\n        }\n        return sb.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        while (number > 0) {\n       \
    \     if (number >= 1000) {\n                sb.Append('m');\n               \
    \ number -= 1000;\n            } else if (number >= 900) {\n                sb.Append(\"\
    cm\");\n                number -= 900;\n            } else if (number >= 500)\
    \ {\n                sb.Append('d');\n                number -= 500;\n       \
    \     } else if (number >= 400) {\n                sb.Append(\"cd\");\n      \
    \          number -= 400;\n            } else if (number >= 100) {\n         \
    \       sb.Append('c');\n                number -= 100;\n            } else if\
    \ (number >= 90) {\n                sb.Append(\"xc\");\n                number\
    \ -= 90;\n            } else if (number >= 50) {\n                sb.Append('l');\n\
    \                number -= 50;\n            } else if (number >= 40) {\n     \
    \           sb.Append(\"xl\");\n                number -= 40;\n            } else\
    \ if (number >= 10) {\n                sb.Append('x');\n                number\
    \ -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"\
    ix\");\n                number -= 9;\n            } else if (number >= 5) {\n\
    \                sb.Append('v');\n                number -= 5;\n            }\
    \ else if (number >= 4) {\n                sb.Append(\"iv\");\n              \
    \  number -= 4;\n            } else if (number >= 1) {\n                sb.Append('i');\n\
    \                number -= 1;\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var numeral = new Dictionary<int,\
    \ string>() {\n            {1, \"i\"},\n            {5, \"v\"},\n            {10,\
    \ \"x\"},\n            {50, \"l\"},\n            {100, \"c\"},\n            {500,\
    \ \"d\"},\n            {1000, \"m\"}\n        };\n        var numeral_values =\
    \ numeral.Keys.ToList();\n        numeral_values.Sort();\n        numeral_values.Reverse();\n\
    \        foreach (var value in numeral_values) {\n            while (number >=\
    \ value) {\n                roman.Append(numeral[value]);\n                number\
    \ -= value;\n            }\n        }\n        return roman.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d84bbf17a3fd4d0e8900ca27d27c6afd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d84bbf17a3fd4d0e8900ca27d27c6afd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        var num = number;\n        while\
    \ (num >= 1000) {\n            sb.Append(\"m\");\n            num -= 1000;\n \
    \       }\n        if (num >= 900) {\n            sb.Append(\"cm\");\n       \
    \     num -= 900;\n        }\n        if (num >= 500) {\n            sb.Append(\"\
    d\");\n            num -= 500;\n        }\n        if (num >= 400) {\n       \
    \     sb.Append(\"cd\");\n            num -= 400;\n        }\n        while (num\
    \ >= 100) {\n            sb.Append(\"c\");\n            num -= 100;\n        }\n\
    \        if (num >= 90) {\n            sb.Append(\"xc\");\n            num -=\
    \ 90;\n        }\n        if (num >= 50) {\n            sb.Append(\"l\");\n  \
    \          num -= 50;\n        }\n        if (num >= 40) {\n            sb.Append(\"\
    xl\");\n            num -= 40;\n        }\n        while (num >= 10) {\n     \
    \       sb.Append(\"x\");\n            num -= 10;\n        }\n        if (num\
    \ >= 9) {\n            sb.Append(\"ix\");\n            num -= 9;\n        }\n\
    \        if (num >= 5) {\n            sb.Append(\"v\");\n            num -= 5;\n\
    \        }\n        if (num >= 4) {\n            sb.Append(\"iv\");\n        \
    \    num -= 4;\n        }\n        while (num >= 1) {\n            sb.Append(\"\
    i\");\n            num -= 1;\n        }\n        return sb.ToString();\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        while (number > 0) {\n       \
    \     if (number >= 1000) {\n                sb.Append('m');\n               \
    \ number -= 1000;\n            } else if (number >= 900) {\n                sb.Append(\"\
    cm\");\n                number -= 900;\n            } else if (number >= 500)\
    \ {\n                sb.Append('d');\n                number -= 500;\n       \
    \     } else if (number >= 400) {\n                sb.Append(\"cd\");\n      \
    \          number -= 400;\n            } else if (number >= 100) {\n         \
    \       sb.Append('c');\n                number -= 100;\n            } else if\
    \ (number >= 90) {\n                sb.Append(\"xc\");\n                number\
    \ -= 90;\n            } else if (number >= 50) {\n                sb.Append('l');\n\
    \                number -= 50;\n            } else if (number >= 40) {\n     \
    \           sb.Append(\"xl\");\n                number -= 40;\n            } else\
    \ if (number >= 10) {\n                sb.Append('x');\n                number\
    \ -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"\
    ix\");\n                number -= 9;\n            } else if (number >= 5) {\n\
    \                sb.Append('v');\n                number -= 5;\n            }\
    \ else if (number >= 4) {\n                sb.Append(\"iv\");\n              \
    \  number -= 4;\n            } else if (number >= 1) {\n                sb.Append('i');\n\
    \                number -= 1;\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // TODO: Implement this function\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a4878bfc5d84f56ba60f4688949b43b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a4878bfc5d84f56ba60f4688949b43b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var digits = new List<int>();\n\
    \        while (number > 0) {\n            digits.Add((int)(number % 10));\n \
    \           number /= 10;\n        }\n        digits.Reverse();\n        for (int\
    \ i = 0; i < digits.Count; i++) {\n            switch (digits[i]) {\n        \
    \        case 1:\n                    roman.Append(\"i\");\n                 \
    \   break;\n                case 2:\n                    roman.Append(\"ii\");\n\
    \                    break;\n                case 3:\n                    roman.Append(\"\
    iii\");\n                    break;\n                case 4:\n               \
    \     roman.Append(\"iv\");\n                    break;\n                case\
    \ 5:\n                    roman.Append(\"v\");\n                    break;\n \
    \               case 6:\n                    roman.Append(\"vi\");\n         \
    \           break;\n                case 7:\n                    roman.Append(\"\
    vii\");\n                    break;\n                case 8:\n               \
    \     roman.Append(\"viii\");\n                    break;\n                case\
    \ 9:\n                    roman.Append(\"ix\");\n                    break;\n\
    \            }\n            if (i == 0) {\n                roman.Append(\"x\"\
    .Repeat(digits[i]));\n            } else if (i == 1) {\n                roman.Append(\"\
    c\".Repeat(digits[i]));\n            } else if (i == 2) {\n                roman.Append(\"\
    m\".Repeat(digits[i]));\n            }\n        }\n        return roman.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5_0a9gy9.cs(58,34): error CS1061: ''string'' does not contain a definition
    for ''Repeat'' and no accessible extension method ''Repeat'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp5_0a9gy9.cs(60,34): error CS1061: ''string'' does not contain a definition
    for ''Repeat'' and no accessible extension method ''Repeat'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    /tmp/tmp5_0a9gy9.cs(62,34): error CS1061: ''string'' does not contain a definition
    for ''Repeat'' and no accessible extension method ''Repeat'' accepting a first
    argument of type ''string'' could be found (are you missing a using directive
    or an assembly reference?)

    '
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        var digits = new List<int>();\n\
    \        while (number > 0) {\n            digits.Add((int)(number % 10));\n \
    \           number /= 10;\n        }\n        digits.Reverse();\n        for (int\
    \ i = 0; i < digits.Count; i++) {\n            var digit = digits[i];\n      \
    \      if (digit == 0) {\n                continue;\n            }\n         \
    \   if (digit == 4) {\n                sb.Append(new string(new char[] { (char)('i'\
    \ + i), (char)('i' + i + 1) }));\n            } else if (digit == 9) {\n     \
    \           sb.Append(new string(new char[] { (char)('i' + i), (char)('i' + i\
    \ + 2) }));\n            } else {\n                if (digit >= 5) {\n       \
    \             sb.Append((char)('v' + i));\n                    digit -= 5;\n \
    \               }\n                sb.Append(new string((char)('i' + i), digit));\n\
    \            }\n        }\n        return sb.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b80832eac132485f889bfb1b3872b7bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b80832eac132485f889bfb1b3872b7bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ arabic.Length; i++) {\n            while (number >= arabic[i]) {\n         \
    \       number -= arabic[i];\n                sb.Append(roman[i]);\n         \
    \   }\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ arabic.Length; i++) {\n            while (number >= arabic[i]) {\n         \
    \       number -= arabic[i];\n                sb.Append(roman[i]);\n         \
    \   }\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        var nums = new List<long> { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        var romans = new\
    \ List<string> { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"\
    x\", \"ix\", \"v\", \"iv\", \"i\" };\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            while (number >= nums[i]) {\n                sb.Append(romans[i]);\n\
    \                number -= nums[i];\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException(\"\
    number\");\n        }\n        var sb = new StringBuilder();\n        while (number\
    \ >= 1000) {\n            sb.Append(\"m\");\n            number -= 1000;\n   \
    \     }\n        if (number >= 900) {\n            sb.Append(\"cm\");\n      \
    \      number -= 900;\n        }\n        if (number >= 500) {\n            sb.Append(\"\
    d\");\n            number -= 500;\n        }\n        if (number >= 400) {\n \
    \           sb.Append(\"cd\");\n            number -= 400;\n        }\n      \
    \  while (number >= 100) {\n            sb.Append(\"c\");\n            number\
    \ -= 100;\n        }\n        if (number >= 90) {\n            sb.Append(\"xc\"\
    );\n            number -= 90;\n        }\n        if (number >= 50) {\n      \
    \      sb.Append(\"l\");\n            number -= 50;\n        }\n        if (number\
    \ >= 40) {\n            sb.Append(\"xl\");\n            number -= 40;\n      \
    \  }\n        while (number >= 10) {\n            sb.Append(\"x\");\n        \
    \    number -= 10;\n        }\n        if (number >= 9) {\n            sb.Append(\"\
    ix\");\n            number -= 9;\n        }\n        if (number >= 5) {\n    \
    \        sb.Append(\"v\");\n            number -= 5;\n        }\n        if (number\
    \ >= 4) {\n            sb.Append(\"iv\");\n            number -= 4;\n        }\n\
    \        while (number >= 1) {\n            sb.Append(\"i\");\n            number\
    \ -= 1;\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var result = new StringBuilder();\n        var num = number;\n      \
    \  while (num > 0) {\n            if (num >= 1000) {\n                result.Append(\"\
    m\");\n                num -= 1000;\n            } else if (num >= 900) {\n  \
    \              result.Append(\"cm\");\n                num -= 900;\n         \
    \   } else if (num >= 500) {\n                result.Append(\"d\");\n        \
    \        num -= 500;\n            } else if (num >= 400) {\n                result.Append(\"\
    cd\");\n                num -= 400;\n            } else if (num >= 100) {\n  \
    \              result.Append(\"c\");\n                num -= 100;\n          \
    \  } else if (num >= 90) {\n                result.Append(\"xc\");\n         \
    \       num -= 90;\n            } else if (num >= 50) {\n                result.Append(\"\
    l\");\n                num -= 50;\n            } else if (num >= 40) {\n     \
    \           result.Append(\"xl\");\n                num -= 40;\n            }\
    \ else if (num >= 10) {\n                result.Append(\"x\");\n             \
    \   num -= 10;\n            } else if (num >= 9) {\n                result.Append(\"\
    ix\");\n                num -= 9;\n            } else if (num >= 5) {\n      \
    \          result.Append(\"v\");\n                num -= 5;\n            } else\
    \ if (num >= 4) {\n                result.Append(\"iv\");\n                num\
    \ -= 4;\n            } else if (num >= 1) {\n                result.Append(\"\
    i\");\n                num -= 1;\n            }\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <737b29eecbcc4e58b2cf2e76ddf59ebe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <737b29eecbcc4e58b2cf2e76ddf59ebe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code here\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <787e92e19952479e9ffcac58ada0b04f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <787e92e19952479e9ffcac58ada0b04f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ arabic.Length; i++) {\n            while (number >= arabic[i]) {\n         \
    \       number -= arabic[i];\n                sb.Append(roman[i]);\n         \
    \   }\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var result = new StringBuilder();\n        var roman = new Dictionary<long,\
    \ string> {\n            {1, \"i\"},\n            {5, \"v\"},\n            {10,\
    \ \"x\"},\n            {50, \"l\"},\n            {100, \"c\"},\n            {500,\
    \ \"d\"},\n            {1000, \"m\"},\n        };\n        var keys = roman.Keys.ToList();\n\
    \        keys.Sort();\n        var i = keys.Count - 1;\n        while (number\
    \ > 0) {\n            var key = keys[i];\n            var value = roman[key];\n\
    \            if (number >= key) {\n                result.Append(value);\n   \
    \             number -= key;\n            } else {\n                i--;\n   \
    \         }\n        }\n        return result.ToString();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b90ed22b7e74df19c1f34f7b84ca0c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b90ed22b7e74df19c1f34f7b84ca0c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var digits = new List<int>();\n\
    \        while (number > 0) {\n            digits.Add((int)(number % 10));\n \
    \           number /= 10;\n        }\n        digits.Reverse();\n        for (int\
    \ i = 0; i < digits.Count; i++) {\n            int digit = digits[i];\n      \
    \      if (digit == 0) {\n                continue;\n            }\n         \
    \   if (digit <= 3) {\n                roman.Append(new string('i', digit));\n\
    \            } else if (digit == 4) {\n                roman.Append(\"iv\");\n\
    \            } else if (digit == 5) {\n                roman.Append(\"v\");\n\
    \            } else if (digit <= 8) {\n                roman.Append(\"v\");\n\
    \                roman.Append(new string('i', digit - 5));\n            } else\
    \ if (digit == 9) {\n                roman.Append(\"ix\");\n            }\n  \
    \          if (i == 0) {\n                roman.Append(new string('x', digits.Count\
    \ - 1));\n            } else if (i == 1) {\n                roman.Append(new string('x',\
    \ digits.Count - 2));\n            } else if (i == 2) {\n                roman.Append(new\
    \ string('c', digits.Count - 3));\n            }\n        }\n        return roman.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1e2ff78090b49e49e890b72d616a5ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1e2ff78090b49e49e890b72d616a5ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        if (number < 1 || number > 1000) {\n            throw new ArgumentOutOfRangeException();\n\
    \        }\n        var roman = new StringBuilder();\n        while (number >=\
    \ 1000) {\n            roman.Append(\"m\");\n            number -= 1000;\n   \
    \     }\n        if (number >= 900) {\n            roman.Append(\"cm\");\n   \
    \         number -= 900;\n        }\n        if (number >= 500) {\n          \
    \  roman.Append(\"d\");\n            number -= 500;\n        }\n        if (number\
    \ >= 400) {\n            roman.Append(\"cd\");\n            number -= 400;\n \
    \       }\n        while (number >= 100) {\n            roman.Append(\"c\");\n\
    \            number -= 100;\n        }\n        if (number >= 90) {\n        \
    \    roman.Append(\"xc\");\n            number -= 90;\n        }\n        if (number\
    \ >= 50) {\n            roman.Append(\"l\");\n            number -= 50;\n    \
    \    }\n        if (number >= 40) {\n            roman.Append(\"xl\");\n     \
    \       number -= 40;\n        }\n        while (number >= 10) {\n           \
    \ roman.Append(\"x\");\n            number -= 10;\n        }\n        if (number\
    \ >= 9) {\n            roman.Append(\"ix\");\n            number -= 9;\n     \
    \   }\n        if (number >= 5) {\n            roman.Append(\"v\");\n        \
    \    number -= 5;\n        }\n        if (number >= 4) {\n            roman.Append(\"\
    iv\");\n            number -= 4;\n        }\n        while (number >= 1) {\n \
    \           roman.Append(\"i\");\n            number -= 1;\n        }\n      \
    \  return roman.ToString();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[] arabic = { 1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        string result = \"\
    \";\n        for (int i = 0; i < arabic.Length; i++) {\n            while (number\
    \ >= arabic[i]) {\n                number -= arabic[i];\n                result\
    \ += roman[i];\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var result = new StringBuilder();\n        var roman = new Dictionary<long,\
    \ string> {\n            { 1000, \"m\" },\n            { 900, \"cm\" },\n    \
    \        { 500, \"d\" },\n            { 400, \"cd\" },\n            { 100, \"\
    c\" },\n            { 90, \"xc\" },\n            { 50, \"l\" },\n            {\
    \ 40, \"xl\" },\n            { 10, \"x\" },\n            { 9, \"ix\" },\n    \
    \        { 5, \"v\" },\n            { 4, \"iv\" },\n            { 1, \"i\" }\n\
    \        };\n        foreach (var pair in roman) {\n            while (number\
    \ >= pair.Key) {\n                result.Append(pair.Value);\n               \
    \ number -= pair.Key;\n            }\n        }\n        return result.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var result = new StringBuilder();\n        var digits = new[] {\n   \
    \         new { Value = 1000L, Symbol = \"m\" },\n            new { Value = 500L,\
    \ Symbol = \"d\" },\n            new { Value = 100L, Symbol = \"c\" },\n     \
    \       new { Value = 50L, Symbol = \"l\" },\n            new { Value = 10L, Symbol\
    \ = \"x\" },\n            new { Value = 5L, Symbol = \"v\" },\n            new\
    \ { Value = 1L, Symbol = \"i\" },\n        };\n        foreach (var digit in digits)\
    \ {\n            while (number >= digit.Value) {\n                result.Append(digit.Symbol);\n\
    \                number -= digit.Value;\n            }\n        }\n        return\
    \ result.ToString();\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63a8a369b17649f0a5a21c0a0df6cc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63a8a369b17649f0a5a21c0a0df6cc17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805773
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"i\", \"v\", \"x\", \"l\", \"c\", \"\
    d\", \"m\" };\n        string result = \"\";\n        int i = 0;\n        while\
    \ (number > 0) {\n            int digit = (int)(number % 10);\n            if\
    \ (digit == 4) {\n                result = roman[i] + roman[i + 1] + result;\n\
    \            } else if (digit == 9) {\n                result = roman[i] + roman[i\
    \ + 2] + result;\n            } else {\n                if (digit >= 5) {\n  \
    \                  result = roman[i + 1] + result;\n                    digit\
    \ -= 5;\n                }\n                result = new string(roman[i][0], digit)\
    \ + result;\n            }\n            number /= 10;\n            i += 2;\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8fc98370e804b36acfbe57406c15561>:0 \n"
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var result = new StringBuilder();\n        var numeral = new List<string>\
    \ { \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\" };\n        var value = new List<int> { 1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n        for (int i = 0; i < value.Count;\
    \ i++) {\n            while (number >= value[i]) {\n                number -=\
    \ value[i];\n                result.Append(numeral[i]);\n            }\n     \
    \   }\n        return result.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e0e7dbbb4f44837aec34ec5ae4b8ef5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        StringBuilder sb = new StringBuilder();\n        while (number > 0) {\n\
    \            if (number >= 1000) {\n                sb.Append(\"m\");\n      \
    \          number -= 1000;\n            } else if (number >= 900) {\n        \
    \        sb.Append(\"cm\");\n                number -= 900;\n            } else\
    \ if (number >= 500) {\n                sb.Append(\"d\");\n                number\
    \ -= 500;\n            } else if (number >= 400) {\n                sb.Append(\"\
    cd\");\n                number -= 400;\n            } else if (number >= 100)\
    \ {\n                sb.Append(\"c\");\n                number -= 100;\n     \
    \       } else if (number >= 90) {\n                sb.Append(\"xc\");\n     \
    \           number -= 90;\n            } else if (number >= 50) {\n          \
    \      sb.Append(\"l\");\n                number -= 50;\n            } else if\
    \ (number >= 40) {\n                sb.Append(\"xl\");\n                number\
    \ -= 40;\n            } else if (number >= 10) {\n                sb.Append(\"\
    x\");\n                number -= 10;\n            } else if (number >= 9) {\n\
    \                sb.Append(\"ix\");\n                number -= 9;\n          \
    \  } else if (number >= 5) {\n                sb.Append(\"v\");\n            \
    \    number -= 5;\n            } else if (number >= 4) {\n                sb.Append(\"\
    iv\");\n                number -= 4;\n            } else if (number >= 1) {\n\
    \                sb.Append(\"i\");\n                number -= 1;\n           \
    \ }\n        }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        var num = number;\n        while\
    \ (num > 0) {\n            if (num >= 1000) {\n                sb.Append('m');\n\
    \                num -= 1000;\n            } else if (num >= 900) {\n        \
    \        sb.Append(\"cm\");\n                num -= 900;\n            } else if\
    \ (num >= 500) {\n                sb.Append('d');\n                num -= 500;\n\
    \            } else if (num >= 400) {\n                sb.Append(\"cd\");\n  \
    \              num -= 400;\n            } else if (num >= 100) {\n           \
    \     sb.Append('c');\n                num -= 100;\n            } else if (num\
    \ >= 90) {\n                sb.Append(\"xc\");\n                num -= 90;\n \
    \           } else if (num >= 50) {\n                sb.Append('l');\n       \
    \         num -= 50;\n            } else if (num >= 40) {\n                sb.Append(\"\
    xl\");\n                num -= 40;\n            } else if (num >= 10) {\n    \
    \            sb.Append('x');\n                num -= 10;\n            } else if\
    \ (num >= 9) {\n                sb.Append(\"ix\");\n                num -= 9;\n\
    \            } else if (num >= 5) {\n                sb.Append('v');\n       \
    \         num -= 5;\n            } else if (num >= 4) {\n                sb.Append(\"\
    iv\");\n                num -= 4;\n            } else if (num >= 1) {\n      \
    \          sb.Append('i');\n                num -= 1;\n            }\n       \
    \ }\n        return sb.ToString();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"\
    clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"ccli\")));\n   \
    \ Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n    Debug.Assert(IntToMiniRoman((500L)).Equals((\"\
    d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"\
    iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"\
    xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"\
    dxxxii\")));\n    Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n   \
    \ Debug.Assert(IntToMiniRoman((994L)).Equals((\"cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"\
    m\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805772
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string roman = \"\";\n        while (number >= 1000) {\n            roman\
    \ += \"m\";\n            number -= 1000;\n        }\n        if (number >= 900)\
    \ {\n            roman += \"cm\";\n            number -= 900;\n        }\n   \
    \     if (number >= 500) {\n            roman += \"d\";\n            number -=\
    \ 500;\n        }\n        if (number >= 400) {\n            roman += \"cd\";\n\
    \            number -= 400;\n        }\n        while (number >= 100) {\n    \
    \        roman += \"c\";\n            number -= 100;\n        }\n        if (number\
    \ >= 90) {\n            roman += \"xc\";\n            number -= 90;\n        }\n\
    \        if (number >= 50) {\n            roman += \"l\";\n            number\
    \ -= 50;\n        }\n        if (number >= 40) {\n            roman += \"xl\"\
    ;\n            number -= 40;\n        }\n        while (number >= 10) {\n    \
    \        roman += \"x\";\n            number -= 10;\n        }\n        if (number\
    \ >= 9) {\n            roman += \"ix\";\n            number -= 9;\n        }\n\
    \        if (number >= 5) {\n            roman += \"v\";\n            number -=\
    \ 5;\n        }\n        if (number >= 4) {\n            roman += \"iv\";\n  \
    \          number -= 4;\n        }\n        while (number >= 1) {\n          \
    \  roman += \"i\";\n            number -= 1;\n        }\n        return roman;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805771
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var sb = new StringBuilder();\n        while (number > 0) {\n       \
    \     if (number >= 1000) {\n                sb.Append('m');\n               \
    \ number -= 1000;\n            } else if (number >= 900) {\n                sb.Append(\"\
    cm\");\n                number -= 900;\n            } else if (number >= 500)\
    \ {\n                sb.Append('d');\n                number -= 500;\n       \
    \     } else if (number >= 400) {\n                sb.Append(\"cd\");\n      \
    \          number -= 400;\n            } else if (number >= 100) {\n         \
    \       sb.Append('c');\n                number -= 100;\n            } else if\
    \ (number >= 90) {\n                sb.Append(\"xc\");\n                number\
    \ -= 90;\n            } else if (number >= 50) {\n                sb.Append('l');\n\
    \                number -= 50;\n            } else if (number >= 40) {\n     \
    \           sb.Append(\"xl\");\n                number -= 40;\n            } else\
    \ if (number >= 10) {\n                sb.Append('x');\n                number\
    \ -= 10;\n            } else if (number >= 9) {\n                sb.Append(\"\
    ix\");\n                number -= 9;\n            } else if (number >= 5) {\n\
    \                sb.Append('v');\n                number -= 5;\n            }\
    \ else if (number >= 4) {\n                sb.Append(\"iv\");\n              \
    \  number -= 4;\n            } else if (number >= 1) {\n                sb.Append('i');\n\
    \                number -= 1;\n            }\n        }\n        return sb.ToString();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        var roman = new StringBuilder();\n        var digits = new List<int>();\n\
    \        while (number > 0) {\n            digits.Add((int)(number % 10));\n \
    \           number /= 10;\n        }\n        digits.Reverse();\n        for (int\
    \ i = 0; i < digits.Count; i++) {\n            var digit = digits[i];\n      \
    \      if (digit == 0) {\n                continue;\n            }\n         \
    \   if (digit == 4) {\n                roman.Append(new string(new char[] { (char)('i'\
    \ + i), (char)('i' + i + 1) }));\n            } else if (digit == 9) {\n     \
    \           roman.Append(new string(new char[] { (char)('i' + i), (char)('i' +\
    \ i + 2) }));\n            } else {\n                if (digit >= 5) {\n     \
    \               roman.Append((char)('v' + i));\n                    digit -= 5;\n\
    \                }\n                roman.Append(new string((char)('i' + i), digit));\n\
    \            }\n        }\n        return roman.ToString();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f6fc43e32bf4846b8b0c2d14c53da42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f6fc43e32bf4846b8b0c2d14c53da42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string[] roman = new string[] { \"m\", \"cm\", \"d\", \"cd\", \"c\",\
    \ \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\" };\n        int[]\
    \ arabic = new int[] { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ arabic.Length; i++) {\n            while (number >= arabic[i]) {\n         \
    \       number -= arabic[i];\n                sb.Append(roman[i]);\n         \
    \   }\n        }\n        return sb.ToString();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"xix\"\
    )));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <=\
    \ num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"\
    xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n\
    \    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n\
    \        string result = \"\";\n        while (number > 0) {\n            if (number\
    \ >= 1000) {\n                result += \"m\";\n                number -= 1000;\n\
    \            } else if (number >= 900) {\n                result += \"cm\";\n\
    \                number -= 900;\n            } else if (number >= 500) {\n   \
    \             result += \"d\";\n                number -= 500;\n            }\
    \ else if (number >= 400) {\n                result += \"cd\";\n             \
    \   number -= 400;\n            } else if (number >= 100) {\n                result\
    \ += \"c\";\n                number -= 100;\n            } else if (number >=\
    \ 90) {\n                result += \"xc\";\n                number -= 90;\n  \
    \          } else if (number >= 50) {\n                result += \"l\";\n    \
    \            number -= 50;\n            } else if (number >= 40) {\n         \
    \       result += \"xl\";\n                number -= 40;\n            } else if\
    \ (number >= 10) {\n                result += \"x\";\n                number -=\
    \ 10;\n            } else if (number >= 9) {\n                result += \"ix\"\
    ;\n                number -= 9;\n            } else if (number >= 5) {\n     \
    \           result += \"v\";\n                number -= 5;\n            } else\
    \ if (number >= 4) {\n                result += \"iv\";\n                number\
    \ -= 4;\n            } else if (number >= 1) {\n                result += \"i\"\
    ;\n                number -= 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IntToMiniRoman((19L)).Equals((\"\
    xix\")));\n    Debug.Assert(IntToMiniRoman((152L)).Equals((\"clii\")));\n    Debug.Assert(IntToMiniRoman((251L)).Equals((\"\
    ccli\")));\n    Debug.Assert(IntToMiniRoman((426L)).Equals((\"cdxxvi\")));\n \
    \   Debug.Assert(IntToMiniRoman((500L)).Equals((\"d\")));\n    Debug.Assert(IntToMiniRoman((1L)).Equals((\"\
    i\")));\n    Debug.Assert(IntToMiniRoman((4L)).Equals((\"iv\")));\n    Debug.Assert(IntToMiniRoman((43L)).Equals((\"\
    xliii\")));\n    Debug.Assert(IntToMiniRoman((90L)).Equals((\"xc\")));\n    Debug.Assert(IntToMiniRoman((94L)).Equals((\"\
    xciv\")));\n    Debug.Assert(IntToMiniRoman((532L)).Equals((\"dxxxii\")));\n \
    \   Debug.Assert(IntToMiniRoman((900L)).Equals((\"cm\")));\n    Debug.Assert(IntToMiniRoman((994L)).Equals((\"\
    cmxciv\")));\n    Debug.Assert(IntToMiniRoman((1000L)).Equals((\"m\")));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659805770
