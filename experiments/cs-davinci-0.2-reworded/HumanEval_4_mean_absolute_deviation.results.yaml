language: cs
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        return numbers.Select(x\
    \ => Math.Abs(x - mean)).Average();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0.0f;\n        float mean = numbers.Average();\n    \
    \    foreach (float number in numbers) {\n            sum += Math.Abs(number -\
    \ mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        return numbers.Select(x\
    \ => Math.Abs(x - mean)).Average();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0.0f;\n    \
    \    foreach (float number in numbers) {\n            sum += Math.Abs(number -\
    \ mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float num in numbers) {\n            sum += Math.Abs(num - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        return numbers.Select(x\
    \ => Math.Abs(x - mean)).Average();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Sum() / numbers.Count;\n        float mad =\
    \ 0;\n        foreach (float number in numbers) {\n            mad += Math.Abs(number\
    \ - mean);\n        }\n        return mad / numbers.Count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        return numbers.Select(x\
    \ => Math.Abs(x - mean)).Average();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = 0;\n        float mad = 0;\n\
    \        int count = 0;\n        foreach (float number in numbers) {\n       \
    \     sum += number;\n            count++;\n        }\n        mean = sum / count;\n\
    \        foreach (float number in numbers) {\n            mad += Math.Abs(number\
    \ - mean);\n        }\n        return mad / count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Sum() / numbers.Count;\n        float sum =\
    \ 0;\n        foreach (float number in numbers) {\n            sum += Math.Abs(number\
    \ - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float num in numbers) {\n            sum += Math.Abs(num - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        return numbers.Select(x\
    \ => Math.Abs(x - mean)).Average();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Sum() / numbers.Count;\n        float sum =\
    \ 0;\n        foreach (float number in numbers) {\n            sum += Math.Abs(number\
    \ - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float n in numbers) {\n            sum += Math.Abs(n - mean);\n   \
    \     }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Sum() / numbers.Count;\n        float sum =\
    \ 0;\n        for (int i = 0; i < numbers.Count; i++) {\n            sum += Math.Abs(numbers[i]\
    \ - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float num in numbers) {\n            sum += Math.Abs(num - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0.0f;\n    \
    \    foreach (float number in numbers) {\n            sum += Math.Abs(number -\
    \ mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0.0f;\n        float mean = numbers.Average();\n    \
    \    foreach (float number in numbers) {\n            sum += Math.Abs(number -\
    \ mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float mad = numbers.Sum(x\
    \ => Math.Abs(x - mean)) / numbers.Count;\n        return mad;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0.0f;\n    \
    \    foreach (float number in numbers) {\n            sum += Math.Abs(number -\
    \ mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = 0;\n        foreach (float number\
    \ in numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.Count;\n\
    \        sum = 0;\n        foreach (float number in numbers) {\n            sum\
    \ += Math.Abs(number - mean);\n        }\n        return sum / numbers.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = 0;\n        float mad = 0;\n\
    \        foreach (float num in numbers) {\n            sum += num;\n        }\n\
    \        mean = sum / numbers.Count;\n        foreach (float num in numbers) {\n\
    \            mad += Math.Abs(num - mean);\n        }\n        return mad / numbers.Count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = 0;\n        foreach (float number\
    \ in numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.Count;\n\
    \        float sum_of_abs_differences = 0;\n        foreach (float number in numbers)\
    \ {\n            sum_of_abs_differences += Math.Abs(number - mean);\n        }\n\
    \        return sum_of_abs_differences / numbers.Count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Sum() / numbers.Count;\n        float sum =\
    \ 0;\n        foreach (float n in numbers) {\n            sum += Math.Abs(n -\
    \ mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float num in numbers) {\n            sum += Math.Abs(num - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Sum() / numbers.Count;\n        float sum =\
    \ 0;\n        foreach (float number in numbers) {\n            sum += Math.Abs(number\
    \ - mean);\n        }\n        return sum / numbers.Count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0.0f;\n        float mean = numbers.Average();\n    \
    \    foreach (float number in numbers) {\n            sum += Math.Abs(number -\
    \ mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Sum() / numbers.Count;\n        return numbers.Select(x\
    \ => Math.Abs(x - mean)).Sum() / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float n in numbers) {\n            sum += Math.Abs(n - mean);\n   \
    \     }\n        return sum / numbers.Count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = 0;\n        foreach (float number\
    \ in numbers) {\n            sum += number;\n        }\n        mean = sum / numbers.Count;\n\
    \        float sum_of_squares = 0;\n        foreach (float number in numbers)\
    \ {\n            sum_of_squares += (float)Math.Pow((number - mean), 2);\n    \
    \    }\n        float variance = sum_of_squares / numbers.Count;\n        float\
    \ standard_deviation = (float)Math.Sqrt(variance);\n        return standard_deviation;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1540712faac74aa4bdb2fc11296f6678>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1540712faac74aa4bdb2fc11296f6678>:0 \n"
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        return numbers.Select(x\
    \ => Math.Abs(x - mean)).Average();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        return numbers.Select(x\
    \ => Math.Abs(x - mean)).Average();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = 0;\n        float mad = 0;\n\
    \        foreach (float number in numbers) {\n            sum += number;\n   \
    \     }\n        mean = sum / numbers.Count;\n        foreach (float number in\
    \ numbers) {\n            mad += Math.Abs(number - mean);\n        }\n       \
    \ return mad / numbers.Count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        return numbers.Select(x\
    \ => Math.Abs(x - mean)).Average();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float num in numbers) {\n            sum += Math.Abs(num - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        return numbers.Select(x\
    \ => Math.Abs(x - mean)).Average();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0.0f;\n    \
    \    foreach (float number in numbers) {\n            sum += Math.Abs(number -\
    \ mean);\n        }\n        return sum / numbers.Count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = 0;\n        float mad = 0;\n\
    \        foreach (float number in numbers) {\n            sum += number;\n   \
    \     }\n        mean = sum / numbers.Count;\n        foreach (float number in\
    \ numbers) {\n            mad += Math.Abs(number - mean);\n        }\n       \
    \ return mad / numbers.Count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f}))) == (1.0f));\n\
    \    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float sum = 0;\n        float mean = numbers.Average();\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of input numbers, calculate Mean Absolute\
    \ Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation\
    \ is the average absolute difference between each\n    // element and a centerpoint\
    \ (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n\
    \    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers)\
    \ {\n        float mean = numbers.Average();\n        float sum = 0;\n       \
    \ foreach (float number in numbers) {\n            sum += Math.Abs(number - mean);\n\
    \        }\n        return sum / numbers.Count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f}))) == (0.5f));\n    Debug.Assert(MeanAbsoluteDeviation((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\
    \ == (1.0f));\n    Debug.Assert(MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f}))) == (1.2f));\n    }\n\n\
    }\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797431
