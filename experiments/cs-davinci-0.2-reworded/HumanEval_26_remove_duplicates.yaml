name: HumanEval_26_remove_duplicates
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // From a list of integers, remove all elements that occur more\
  \ than once.\n    // Keep order of elements left the same as in the input.\n   \
  \ // >>> RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)2L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)4L}))\n    public static List<long> RemoveDuplicates(List<long> numbers)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveDuplicates((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RemoveDuplicates((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RemoveDuplicates((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)3L,\
  \ (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n\
  \    }\n\n}\n"
completions: ["        // Your code goes here.\n        // You can add functions to\
    \ this file too.\n        return null;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (!seen.Contains(n)) {\n  \
    \              result.Add(n);\n                seen.Add(n);\n            }\n \
    \       }\n        return result;", "        var result = new List<long>();\n\
    \        var set = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var set = new HashSet<long>();\n        foreach (var\
    \ number in numbers) {\n            if (!set.Contains(number)) {\n           \
    \     set.Add(number);\n                result.Add(number);\n            }\n \
    \       }\n        return result;", "        // Your code goes here.\n       \
    \ return numbers;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long number in numbers) {\n  \
    \          if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       List<long> res = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long num in numbers) {\n            if (!set.Contains(num))\
    \ {\n                set.Add(num);\n                res.Add(num);\n          \
    \  }\n        }\n        return res;", '        return numbers.Distinct().ToList();',
  "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (!seen.Contains(n)) {\n                result.Add(n);\n             \
    \   seen.Add(n);\n            }\n        }\n        return result;", "       \
    \ var result = new List<long>();\n        var set = new HashSet<long>();\n   \
    \     foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var set = new HashSet<long>();\n        foreach (var\
    \ number in numbers) {\n            if (!set.Contains(number)) {\n           \
    \     set.Add(number);\n                result.Add(number);\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (!set.Contains(n)) {\n \
    \               set.Add(n);\n                result.Add(n);\n            }\n \
    \       }\n        return result;", "        var set = new HashSet<long>();\n\
    \        var result = new List<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (!set.Contains(n)) {\n \
    \               set.Add(n);\n                result.Add(n);\n            }\n \
    \       }\n        return result;", "        var result = new List<long>();\n\
    \        var set = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        // REPLACE THE BODY OF THIS METHOD WITH YOUR OWN IMPLEMENTATION\n\
    \        return numbers;", '        return numbers.Distinct().ToList();', "  \
    \      List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (!seen.Contains(n))\
    \ {\n                result.Add(n);\n                seen.Add(n);\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (!set.Contains(n))\
    \ {\n                set.Add(n);\n                result.Add(n);\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        var set = new HashSet<long>();\n\
    \        var result = new List<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (!set.Contains(n)) {\n \
    \               set.Add(n);\n                result.Add(n);\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        var seen = new HashSet<long>();\n        foreach (var n in numbers) {\n\
    \            if (!seen.Contains(n)) {\n                seen.Add(n);\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       // Your code goes here.\n        // You can add functions and classes.\n\
    \        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        var seen = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!seen.Contains(number)) {\n                seen.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long number in numbers) {\n  \
    \          if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long n in numbers)\
    \ {\n            if (!result.Contains(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (!seen.Contains(n)) {\n  \
    \              result.Add(n);\n                seen.Add(n);\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        var seen = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (!seen.Contains(n)) {\n\
    \                seen.Add(n);\n                result.Add(n);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (!set.Contains(n)) {\n \
    \               set.Add(n);\n                result.Add(n);\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (!seen.Contains(n)) {\n                result.Add(n);\n\
    \                seen.Add(n);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (!set.Contains(n)) {\n \
    \               set.Add(n);\n                result.Add(n);\n            }\n \
    \       }\n        return result;", "        // Your code goes here.\n       \
    \ return null;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long number in numbers) {\n  \
    \          if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        var seen = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                seen.Add(number);\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var set = new HashSet<long>();\n        foreach (var\
    \ number in numbers) {\n            if (!set.Contains(number)) {\n           \
    \     set.Add(number);\n                result.Add(number);\n            }\n \
    \       }\n        return result;", "        var result = new List<long>();\n\
    \        var set = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        // Your code goes here.\n        return numbers;", "    \
    \    var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var set = new HashSet<long>();\n        foreach (var\
    \ number in numbers) {\n            if (!set.Contains(number)) {\n           \
    \     set.Add(number);\n                result.Add(number);\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        List<long> seen = new List<long>();\n        foreach (long number in\
    \ numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (!set.Contains(n)) {\n \
    \               set.Add(n);\n                result.Add(n);\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (!set.Contains(n)) {\n \
    \               set.Add(n);\n                result.Add(n);\n            }\n \
    \       }\n        return result;", "        // Your code goes here.\n       \
    \ return null;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long number in numbers) {\n  \
    \          if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        var seen = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (!seen.Contains(n)) {\n\
    \                seen.Add(n);\n                result.Add(n);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        var set = new HashSet<long>();\n        var result = new List<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", '        return numbers.Distinct().ToList();',
  "        var result = new List<long>();\n        var seen = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                seen.Add(number);\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        // Your code goes\
    \ here.\n        return new List<long>();", '        return numbers.Distinct().ToList();',
  "        Dictionary<long, long> dict = new Dictionary<long, long>();\n        List<long>\
    \ result = new List<long>();\n        foreach (long number in numbers) {\n   \
    \         if (dict.ContainsKey(number)) {\n                dict[number] = dict[number]\
    \ + (long)1L;\n            } else {\n                dict[number] = (long)1L;\n\
    \            }\n        }\n        foreach (long number in numbers) {\n      \
    \      if (dict[number] == (long)1L) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var set = new HashSet<long>();\n        foreach (var\
    \ number in numbers) {\n            if (!set.Contains(number)) {\n           \
    \     set.Add(number);\n                result.Add(number);\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long number in numbers) {\n            if (!result.Contains(number))\
    \ {\n                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        HashSet<long> set\
    \ = new HashSet<long>();\n        List<long> result = new List<long>();\n    \
    \    foreach (long number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        // Your code goes\
    \ here.\n        return null;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        // your code here\n\
    \        return null;", "        List<long> result = new List<long>();\n     \
    \   Dictionary<long, long> d = new Dictionary<long, long>();\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            long x = numbers[i];\n       \
    \     if (!d.ContainsKey(x)) {\n                d[x] = 0;\n            }\n   \
    \         d[x] = d[x] + 1;\n        }\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            long x = numbers[i];\n            if (d[x] == 1) {\n   \
    \             result.Add(x);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (!set.Contains(n)) {\n \
    \               set.Add(n);\n                result.Add(n);\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        for (int i = 0; i <\
    \ numbers.Count; i++) {\n            long number = numbers[i];\n            if\
    \ (!set.Contains(number)) {\n                set.Add(number);\n              \
    \  result.Add(number);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var seen = new HashSet<long>();\n        foreach (var\
    \ n in numbers) {\n            if (!seen.Contains(n)) {\n                seen.Add(n);\n\
    \                result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        Dictionary<long, long> dict\
    \ = new Dictionary<long, long>();\n        foreach (long number in numbers) {\n\
    \            if (!dict.ContainsKey(number)) {\n                dict[number] =\
    \ (long)0L;\n            }\n            dict[number] = dict[number] + (long)1L;\n\
    \        }\n        foreach (long number in numbers) {\n            if (dict[number]\
    \ == (long)1L) {\n                result.Add(number);\n            }\n       \
    \ }\n        return result;", "        var result = new List<long>();\n      \
    \  var seen = new HashSet<long>();\n        foreach (var n in numbers) {\n   \
    \         if (!seen.Contains(n)) {\n                seen.Add(n);\n           \
    \     result.Add(n);\n            }\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", '        return
    numbers.Distinct().ToList();', "        var result = new List<long>();\n     \
    \   var set = new HashSet<long>();\n        foreach (var number in numbers) {\n\
    \            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long number in numbers) {\n  \
    \          if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long number in\
    \ numbers) {\n            if (!result.Contains(number)) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var seen = new HashSet<long>();\n        foreach (var\
    \ n in numbers) {\n            if (!seen.Contains(n)) {\n                seen.Add(n);\n\
    \                result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        List<long> seen = new List<long>();\n\
    \        foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var set = new HashSet<long>();\n        foreach (var\
    \ number in numbers) {\n            if (!set.Contains(number)) {\n           \
    \     set.Add(number);\n                result.Add(number);\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (!seen.Contains(n)) {\n                result.Add(n);\n\
    \                seen.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!set.Contains(number)) {\n                set.Add(number);\n              \
    \  result.Add(number);\n            }\n        }\n        return result;", " \
    \       // Your code goes here.\n        return null;", "        var result =\
    \ new List<long>();\n        var set = new HashSet<long>();\n        foreach (var\
    \ number in numbers) {\n            if (!set.Contains(number)) {\n           \
    \     set.Add(number);\n                result.Add(number);\n            }\n \
    \       }\n        return result;", "        var result = new List<long>();\n\
    \        var set = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", '        return numbers.Distinct().ToList();', "        var result\
    \ = new List<long>();\n        var set = new HashSet<long>();\n        foreach\
    \ (var number in numbers) {\n            if (!set.Contains(number)) {\n      \
    \          set.Add(number);\n                result.Add(number);\n           \
    \ }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        var set = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var set = new HashSet<long>();\n        var result = new\
    \ List<long>();\n        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        var seen = new HashSet<long>();\n        foreach (var n in numbers) {\n\
    \            if (!seen.Contains(n)) {\n                seen.Add(n);\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        var seen = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                seen.Add(number);\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        Dictionary<long, long> d = new Dictionary<long,\
    \ long>();\n        foreach (long n in numbers) {\n            if (!d.ContainsKey(n))\
    \ {\n                d[n] = (long)1L;\n                result.Add(n);\n      \
    \      }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> seen = new HashSet<long>();\n        foreach\
    \ (long number in numbers) {\n            if (!seen.Contains(number)) {\n    \
    \            result.Add(number);\n                seen.Add(number);\n        \
    \    }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        var seen = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!seen.Contains(number)) {\n                seen.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        // Your code goes\
    \ here.\n        return null;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        Dictionary<long, bool> seen\
    \ = new Dictionary<long, bool>();\n        foreach (long number in numbers) {\n\
    \            if (!seen.ContainsKey(number)) {\n                seen[number] =\
    \ true;\n                result.Add(number);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long number in numbers) {\n  \
    \          if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", '        return
    numbers.Distinct().ToList();', "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        var seen = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                seen.Add(number);\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var set = new HashSet<long>();\n        foreach (var\
    \ n in numbers) {\n            if (!set.Contains(n)) {\n                set.Add(n);\n\
    \                result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        Dictionary<long, bool>\
    \ seen = new Dictionary<long, bool>();\n        foreach (long number in numbers)\
    \ {\n            if (!seen.ContainsKey(number)) {\n                seen[number]\
    \ = true;\n                result.Add(number);\n            }\n        }\n   \
    \     return result;", "        // Your code goes here.\n        return null;",
  "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var n in numbers) {\n            if (!set.Contains(n)) {\n \
    \               set.Add(n);\n                result.Add(n);\n            }\n \
    \       }\n        return result;", "        var result = new List<long>();\n\
    \        var seen = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!seen.Contains(number)) {\n                seen.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        var set = new HashSet<long>();\n\
    \        var result = new List<long>();\n        foreach (var number in numbers)\
    \ {\n            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long number in numbers) {\n  \
    \          if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  '        return numbers.Distinct().ToList();', "        List<long> result = new\
    \ List<long>();\n        Dictionary<long, long> dict = new Dictionary<long, long>();\n\
    \        foreach (long number in numbers) {\n            if (!dict.ContainsKey(number))\
    \ {\n                dict[number] = (long)0L;\n            }\n            dict[number]\
    \ = dict[number] + (long)1L;\n        }\n        foreach (long number in numbers)\
    \ {\n            if (dict[number] == (long)1L) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        // Your code goes\
    \ here.\n        return null;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", '        return numbers.Distinct().ToList();',
  "        // TODO: Implement this function.\n        return new List<long>();", '        return
    numbers.Distinct().ToList();', "        var result = new List<long>();\n     \
    \   var set = new HashSet<long>();\n        foreach (var number in numbers) {\n\
    \            if (!set.Contains(number)) {\n                set.Add(number);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (!seen.Contains(n)) {\n                result.Add(n);\n             \
    \   seen.Add(n);\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        Dictionary<long, long> dict =\
    \ new Dictionary<long, long>();\n        foreach (long number in numbers) {\n\
    \            if (!dict.ContainsKey(number)) {\n                dict[number] =\
    \ 0;\n            }\n            dict[number] = dict[number] + 1;\n        }\n\
    \        foreach (long number in numbers) {\n            if (dict[number] == 1)\
    \ {\n                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long number in numbers) {\n  \
    \          if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        Dictionary<long, long> d\
    \ = new Dictionary<long, long>();\n        foreach (long n in numbers) {\n   \
    \         if (!d.ContainsKey(n)) {\n                d[n] = 1;\n              \
    \  result.Add(n);\n            }\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n\
    \        foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        var seen = new HashSet<long>();\n        foreach (var\
    \ n in numbers) {\n            if (!seen.Contains(n)) {\n                seen.Add(n);\n\
    \                result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!set.Contains(number)) {\n                set.Add(number);\n              \
    \  result.Add(number);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        Dictionary<long, bool>\
    \ seen = new Dictionary<long, bool>();\n        foreach (long number in numbers)\
    \ {\n            if (!seen.ContainsKey(number)) {\n                seen[number]\
    \ = true;\n                result.Add(number);\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  HashSet<long> seen = new HashSet<long>();\n        foreach (long number in\
    \ numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        var seen = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                seen.Add(number);\n                result.Add(number);\n\
    \            }\n        }\n        return result;", '        return numbers.Distinct().ToList();',
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        Dictionary<long, bool>\
    \ seen = new Dictionary<long, bool>();\n        foreach (long number in numbers)\
    \ {\n            if (!seen.ContainsKey(number)) {\n                seen[number]\
    \ = true;\n                result.Add(number);\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  HashSet<long> seen = new HashSet<long>();\n        foreach (long number in\
    \ numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        var set = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long number in numbers) {\n            if (!set.Contains(number))\
    \ {\n                set.Add(number);\n                result.Add(number);\n \
    \           }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", '        return numbers.Distinct().ToList();',
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (!seen.Contains(number)) {\n                result.Add(number);\n          \
    \      seen.Add(number);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long number in\
    \ numbers) {\n            if (!result.Contains(number)) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", '        return numbers.Distinct().ToList();',
  "        var result = new List<long>();\n        var seen = new HashSet<long>();\n\
    \        foreach (var number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                seen.Add(number);\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        // >>> RemoveDuplicates((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L})))\n\
    \        // (new List<long>(new long[]{(long)1L, (long)3L, (long)4L}))\n     \
    \   // >>> RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)4L, (long)4L})))\n        // (new List<long>(new long[]{(long)1L,\
    \ (long)3L}))\n        // >>> RemoveDuplicates((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)4L, (long)4L, (long)4L})))\n        // (new\
    \ List<long>(new long[]{(long)1L, (long)3L}))\n        // >>> RemoveDuplicates((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)4L,\
    \ (long)4L, (long)4L})))\n        // (new List<long>(new long[]{(long)1L, (long)3L}))\n\
    \        // >>> RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)3L, (long)2L, (long)4L, (long)4L, (long)4L, (long)4L, (long)5L})))\n \
    \       // (new List<long>(new long[]{(long)1L, (long)3L, (long)5L}))\n      \
    \  // >>> RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)4L, (long)4L, (long)4L, (long)4L", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long number in numbers) {\n            if (!seen.Contains(number))\
    \ {\n                result.Add(number);\n                seen.Add(number);\n\
    \            }\n        }\n        return result;", "        // Your code goes\
    \ here.\n        return null;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (!seen.Contains(number)) {\n                result.Add(number);\n\
    \                seen.Add(number);\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
