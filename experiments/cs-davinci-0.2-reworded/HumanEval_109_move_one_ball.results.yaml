language: cs
name: HumanEval_109_move_one_ball
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return (max - min) == arr.Count -
    1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52f14521a9914d7e968323c9fa361007>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52f14521a9914d7e968323c9fa361007>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (max - min == arr.Count - 1) {\n
    \           return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        long minIndex = -1;\n        long maxIndex = -1;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == min) {\n                minIndex
    = i;\n            }\n            if (arr[i] == max) {\n                maxIndex
    = i;\n            }\n        }\n        if (minIndex == -1 || maxIndex == -1)
    {\n            return false;\n        }\n        if (minIndex < maxIndex) {\n
    \           return false;\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1f080acac4446fb8e67fdf36aa1fc9e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f1f080acac4446fb8e67fdf36aa1fc9e>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min == arr.Count - 1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == 1 && max == arr.Count)
    {\n            return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52115d05ffd644b3ab3c7e74d8f09998>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <52115d05ffd644b3ab3c7e74d8f09998>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Write your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a86d3dd8791f45bb8d96d1303155e7ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a86d3dd8791f45bb8d96d1303155e7ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return (max - min) <= arr.Count -
    1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdbfa0da03741b585a646fc0716093f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdbfa0da03741b585a646fc0716093f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] < min) {\n                return false;\n            }\n
    \           min = arr[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (max - min == arr.Count - 1) {\n
    \           return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min == arr.Count - 1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] < min) {\n                return false;\n            }\n
    \           min = arr[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min + 1 == arr.Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <000c15d2b71f431cb0a5999c200b2b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <000c15d2b71f431cb0a5999c200b2b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L,
    (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (max - min == arr.Count - 1) {\n
    \           return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L,
    (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L,
    (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min <= arr.Count - 1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d0650d6c71b4946b95ba595ecc975f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d0650d6c71b4946b95ba595ecc975f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1294aa712fa48cd8852229c8e9ab5c4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1294aa712fa48cd8852229c8e9ab5c4>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min <= arr.Count - 1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d0650d6c71b4946b95ba595ecc975f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d0650d6c71b4946b95ba595ecc975f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return (max - min) <= arr.Count -
    1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdbfa0da03741b585a646fc0716093f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdbfa0da03741b585a646fc0716093f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] < min) {\n                return false;\n            }\n
    \           min = arr[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min <= arr.Count - 1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d0650d6c71b4946b95ba595ecc975f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d0650d6c71b4946b95ba595ecc975f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] < min) {\n                return false;\n            }\n
    \           min = arr[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min <= arr.Count - 1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d0650d6c71b4946b95ba595ecc975f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d0650d6c71b4946b95ba595ecc975f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min <= arr.Count - 1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d0650d6c71b4946b95ba595ecc975f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6d0650d6c71b4946b95ba595ecc975f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L,
    (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] < min) {\n                return false;\n            }\n
    \           min = arr[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L,
    (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        if (min == arr[0]) {\n            return false;\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e6ac55091b244d2a79cb000536c2ad0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9e6ac55091b244d2a79cb000536c2ad0>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Write your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a86d3dd8791f45bb8d96d1303155e7ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a86d3dd8791f45bb8d96d1303155e7ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        if
    (arr.Count == 0) return true;\n        long min = arr[0];\n        for (int i
    = 1; i < arr.Count; i++) {\n            if (arr[i] < min) return false;\n            min
    = Math.Min(min, arr[i]);\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L,
    (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c943ff89b443430e9d5eff26689e3bea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c943ff89b443430e9d5eff26689e3bea>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) return
    true;\n        var min = arr.Min();\n        var minIndex = arr.IndexOf(min);\n
    \       var max = arr.Max();\n        var maxIndex = arr.IndexOf(max);\n        if
    (minIndex == 0) {\n            return true;\n        } else if (maxIndex == arr.Count
    - 1) {\n            return true;\n        } else {\n            return false;\n
    \       }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e59e103d9e804fe4b10ccd3105c10393>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e59e103d9e804fe4b10ccd3105c10393>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min + 1 == arr.Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <000c15d2b71f431cb0a5999c200b2b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <000c15d2b71f431cb0a5999c200b2b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Write your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a86d3dd8791f45bb8d96d1303155e7ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a86d3dd8791f45bb8d96d1303155e7ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L,
    (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L,
    (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return (max - min) <= arr.Count -
    1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdbfa0da03741b585a646fc0716093f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdbfa0da03741b585a646fc0716093f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min == arr.Count - 1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (max - min == arr.Count - 1) {\n
    \           return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] < min) {\n                return false;\n            }\n
    \           min = arr[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Write your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a86d3dd8791f45bb8d96d1303155e7ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a86d3dd8791f45bb8d96d1303155e7ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min + 1 == arr.Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <000c15d2b71f431cb0a5999c200b2b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <000c15d2b71f431cb0a5999c200b2b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min == arr.Count - 1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] < min) {\n                return false;\n            }\n
    \           min = arr[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L,
    (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L,
    (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L,
    (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        foreach (long i in arr)
    {\n            if (i < min) {\n                return false;\n            }\n
    \           min = i;\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L,
    (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a893a21872bc4e378adae706072f85ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a893a21872bc4e378adae706072f85ef>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (max - min == arr.Count - 1) {\n
    \           return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Write your code here.\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37a84a89d2394574ae36aec6fc56dcc1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37a84a89d2394574ae36aec6fc56dcc1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        if
    (arr.Count == 0) {\n            return true;\n        }\n        long min = arr[0];\n
    \       for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n
    \               return false;\n            }\n            min = arr[i];\n        }\n
    \       return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4792b5921cb4e6dbf6c33e4c968f6e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4792b5921cb4e6dbf6c33e4c968f6e8>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return (max - min) <= arr.Count -
    1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdbfa0da03741b585a646fc0716093f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdbfa0da03741b585a646fc0716093f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long minIndex = 0;\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n                minIndex = i;\n            }\n        }\n        if
    (minIndex == 0) {\n            return true;\n        }\n        for (int i = 0;
    i < minIndex; i++) {\n            if (arr[i] > min) {\n                return
    false;\n            }\n        }\n        return true;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L,
    (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68d446c54041408bba08943fa94092b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <68d446c54041408bba08943fa94092b3>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        return false;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L,
    (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5cd19003e13d48248b1342dc7dfab4cb>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (max - min == arr.Count - 1) {\n
    \           return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        if (max - min == arr.Count - 1) {\n
    \           return true;\n        }\n        return false;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afcf89559c29437a8a26e145a674f520>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min + 1 == arr.Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <000c15d2b71f431cb0a5999c200b2b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <000c15d2b71f431cb0a5999c200b2b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] < min) {\n                return false;\n            }\n
    \           min = arr[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min == arr.Count - 1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        int n = arr.Count;\n        if
    (n == 0) {\n            return true;\n        }\n        int[] cnt = new int[n];\n
    \       for (int i = 0; i < n; i++) {\n            cnt[arr[i] - 1]++;\n        }\n
    \       int max = 0;\n        for (int i = 0; i < n; i++) {\n            max =
    Math.Max(max, cnt[i]);\n        }\n        return max <= (n + 1) / 2;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.MoveOneBall (System.Collections.Generic.List`1[T]
    arr) [0x0002c] in <50ab9a3b02b84f4a802d71b18f9d024c>:0 \n  at Problem.Main (System.String[]
    args) [0x00038] in <50ab9a3b02b84f4a802d71b18f9d024c>:0 \n[ERROR] FATAL UNHANDLED
    EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of the
    array.\n  at Problem.MoveOneBall (System.Collections.Generic.List`1[T] arr) [0x0002c]
    in <50ab9a3b02b84f4a802d71b18f9d024c>:0 \n  at Problem.Main (System.String[] args)
    [0x00038] in <50ab9a3b02b84f4a802d71b18f9d024c>:0 \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] < min) {\n                return false;\n            }\n
    \           min = arr[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return (max - min) <= arr.Count -
    1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdbfa0da03741b585a646fc0716093f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdbfa0da03741b585a646fc0716093f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min == arr.Count - 1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        if (arr.Count == 1) {\n            return true;\n        }\n
    \       long min = arr[0];\n        long max = arr[0];\n        for (int i = 1;
    i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min =
    arr[i];\n            }\n            if (arr[i] > max) {\n                max =
    arr[i];\n            }\n        }\n        if (min == max) {\n            return
    true;\n        }\n        if (min == arr[0]) {\n            return true;\n        }\n
    \       if (max == arr[arr.Count - 1]) {\n            return true;\n        }\n
    \       return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d8799f7e9949fc8de2cfd5ef6af7a8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10d8799f7e9949fc8de2cfd5ef6af7a8>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] < min) {\n                return false;\n            }\n
    \           min = arr[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Write your code here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a86d3dd8791f45bb8d96d1303155e7ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a86d3dd8791f45bb8d96d1303155e7ad>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] < min) {\n                return false;\n            }\n
    \           min = arr[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min == arr.Count - 1;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cb91528f9c24e299b0e0db17a7a9ee9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return max - min + 1 == arr.Count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <000c15d2b71f431cb0a5999c200b2b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <000c15d2b71f431cb0a5999c200b2b30>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] < min) {\n                return false;\n            }\n
    \           min = arr[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        for (int i = 1; i < arr.Count;
    i++) {\n            if (arr[i] < min) {\n                return false;\n            }\n
    \           min = arr[i];\n        }\n        return true;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)10L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)4L, (long)3L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>(new
    long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new
    List<long>())) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c81e4cebd0ee474187a53204fabaa93f>:0
    \n"
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4afbc2998244eceb33becc649c6887e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        // Your code goes here.\n        return
    false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16dbcce711cc445ebab21923a32f7c88>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n
    \   // numbers in the list will be randomly ordered. Your task is to determine
    if\n    // it is possible to get a list sorted in non-decreasing order by performing
    \n    // the following operation on the given list:\n    // You are allowed to
    perform right shift operation any number of times.\n    // One right shift operation
    means shifting all elements of the list by one\n    // position in the right direction.
    The last element of the list will be moved to\n    // the starting position in
    the list i.e. 0th index. \n    // If it is possible to obtain the sorted list
    by performing the above operation\n    // then return true else return false.\n
    \   // If the given list is empty then return true.\n    // Note: The given list
    is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    //
    (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing
    order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    //
    (false)\n    // Explanation:It is not possible to get non-decreasing order for
    the given\n    // list by performing any number of right shift operations.\n    public
    static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0) {\n            return
    true;\n        }\n        long min = arr[0];\n        long max = arr[0];\n        for
    (int i = 1; i < arr.Count; i++) {\n            if (arr[i] < min) {\n                min
    = arr[i];\n            }\n            if (arr[i] > max) {\n                max
    = arr[i];\n            }\n        }\n        return (max - min) <= arr.Count -
    1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L}))) ==
    (true));\n    Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L,
    (long)10L, (long)1L, (long)2L}))) == (true));\n    Debug.Assert(MoveOneBall((new
    List<long>(new long[]{(long)4L, (long)3L, (long)1L, (long)2L}))) == (false));\n
    \   Debug.Assert(MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L,
    (long)1L, (long)2L}))) == (false));\n    Debug.Assert(MoveOneBall((new List<long>()))
    == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdbfa0da03741b585a646fc0716093f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ebdbfa0da03741b585a646fc0716093f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797612
