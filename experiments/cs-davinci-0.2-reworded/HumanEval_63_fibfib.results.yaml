language: cs
name: HumanEval_63_fibfib
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long[] fibfib = new long[n+1];\n        fibfib[0]
    = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        for (int i = 3;
    i <= n; i++) {\n            fibfib[i] = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n
    \       }\n        return fibfib[n];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (int i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n < 2) {\n            return 0;\n        }\n        if (n ==
    2) {\n            return 1;\n        }\n        long a = 0;\n        long b =
    0;\n        long c = 1;\n        for (long i = 3; i <= n; i++) {\n            long
    d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        long d = 0;\n        for (long i = 3; i <= n; i++) {\n            d
    = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49e52344c34f4381993df597a7eb43ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49e52344c34f4381993df597a7eb43ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        long
    d = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n        long
    h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n        long
    l = 0;\n        long m = 0;\n        long o = 0;\n        long p = 0;\n        long
    q = 0;\n        long r = 0;\n        long s = 0;\n        long t = 0;\n        long
    u = 0;\n        long v = 0;\n        long w = 0;\n        long x = 0;\n        long
    y = 0;\n        long z = 0;\n        long aa = 0;\n        long ab = 0;\n        long
    ac = 0;\n        long ad = 0;\n        long ae = 0;\n        long af = 0;\n        long
    ag = 0;\n        long ah = 0;\n        long ai = 0;\n        long aj = 0;\n        long
    ak = 0;\n        long al = 0;\n        long am = 0;\n        long an = 0;\n        long
    ao = 0;\n        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n        long
    as = 0;\n        long at = 0;\n        long au = 0;\n        long av = 0;\n        long
    aw = 0;\n        long ax = 0;\n        long ay = 0;\n        long az = 0;\n        long
    ba = 0;\n        long bb = 0;\n        long bc = 0;\n        long bd = 0;\n        long
    be = 0;\n        long bf = 0;\n        long bg = 0;\n        long bh = 0;\n        long
    bi = 0;\n        long bj = 0;\n        long bk = 0;\n        long bl = 0;\n        long
    bm = 0;\n        long bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long
    bq = 0;\n        long br = 0;\n        long bs = 0;\n        long b\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpopgf6wc_.cs(65,14): error CS1001: Identifier expected

    /tmp/tmpopgf6wc_.cs(65,14): error CS1002: ; expected

    /tmp/tmpopgf6wc_.cs(65,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpopgf6wc_.cs(65,17): error CS1031: Type expected

    /tmp/tmpopgf6wc_.cs(92,15): error CS1002: ; expected

    '
  timestamp: 1659799908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        long
    d = 0;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n                d
    = d + c;\n                if (d >= 1000000007) {\n                    d = d -
    1000000007;\n                }\n            }\n            long e = c;\n            c
    = c + b;\n            if (c >= 1000000007) {\n                c = c - 1000000007;\n
    \           }\n            b = b + a;\n            if (b >= 1000000007) {\n                b
    = b - 1000000007;\n            }\n            a = e;\n            n = n >> 1;\n
    \       }\n        return d;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n
    \   Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n
    \   Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n
    \   Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56c04cfb85b44824974ae0fb6b6ce1f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <56c04cfb85b44824974ae0fb6b6ce1f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a
    = b;\n            b = c;\n            c = d;\n        }\n        return c;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        // You may use the following functions:\n
    \       //   Fibfib(long n)\n        //   Fibfib(long n, long m)\n        //   Fibfib(long
    n, long m, long o)\n        //   Fibfib(long n, long m, long o, long p)\n        //
    \  Fibfib(long n, long m, long o, long p, long q)\n        //   Fibfib(long n,
    long m, long o, long p, long q, long r)\n        //   Fibfib(long n, long m, long
    o, long p, long q, long r, long s)\n        //   Fibfib(long n, long m, long o,
    long p, long q, long r, long s, long t)\n        //   Fibfib(long n, long m, long
    o, long p, long q, long r, long s, long t, long u)\n        //   Fibfib(long n,
    long m, long o, long p, long q, long r, long s, long t, long u, long v)\n        //
    \  Fibfib(long n, long m, long o, long p, long q, long r, long s, long t, long
    u, long v, long w)\n        //   Fibfib(long n, long m, long o, long p, long q,
    long r, long s, long t, long u, long v, long w, long x)\n        //   Fibfib(long
    n, long m, long o, long p, long q, long r, long s, long t, long u, long v, long
    w, long x, long y)\n        //   Fibfib(long n, long m, long o, long p, long q,
    long r, long s, long t, long u, long v, long w, long x, long y, long z)\n        //
    \  Fibfib(long n, long m, long o, long p, long q, long r, long s, long t, long
    u, long v, long w, long x, long y, long z, long a)\n        //   Fibfib(long n,
    long m,\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl9mvzndd.cs(21,24): error CS0161: ''Problem.Fibfib(long)'': not all code
    paths return a value

    '
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       long d = 0;\n        for (long i = 3; i <= n; i++) {\n            d =
    a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       long d = 0;\n        for (int i = 3; i <= n; i++) {\n            d = a
    + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // TODO: Implement this function.\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <889f05c6c687403cae972870123c7030>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <889f05c6c687403cae972870123c7030>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0, b = 0, c = 1;\n        for (long i = 0; i < n; i++)
    {\n            long d = a + b + c;\n            a = b;\n            b = c;\n            c
    = d;\n        }\n        return a;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long[] fibs = new long[n + 1];\n        fibs[0] =
    0;\n        fibs[1] = 0;\n        fibs[2] = 1;\n        for (int i = 3; i <= n;
    i++) {\n            fibs[i] = fibs[i - 1] + fibs[i - 2] + fibs[i - 3];\n        }\n
    \       return fibs[n];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n
    \   Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n
    \   Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n
    \   Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        long
    d = 0;\n        long e = 0;\n        long f = 0;\n        long g = 0;\n        long
    h = 0;\n        long i = 0;\n        long j = 0;\n        long k = 0;\n        long
    l = 0;\n        long m = 0;\n        long o = 0;\n        long p = 0;\n        long
    q = 0;\n        long r = 0;\n        long s = 0;\n        long t = 0;\n        long
    u = 0;\n        long v = 0;\n        long w = 0;\n        long x = 0;\n        long
    y = 0;\n        long z = 0;\n        long aa = 0;\n        long ab = 0;\n        long
    ac = 0;\n        long ad = 0;\n        long ae = 0;\n        long af = 0;\n        long
    ag = 0;\n        long ah = 0;\n        long ai = 0;\n        long aj = 0;\n        long
    ak = 0;\n        long al = 0;\n        long am = 0;\n        long an = 0;\n        long
    ao = 0;\n        long ap = 0;\n        long aq = 0;\n        long ar = 0;\n        long
    as = 0;\n        long at = 0;\n        long au = 0;\n        long av = 0;\n        long
    aw = 0;\n        long ax = 0;\n        long ay = 0;\n        long az = 0;\n        long
    ba = 0;\n        long bb = 0;\n        long bc = 0;\n        long bd = 0;\n        long
    be = 0;\n        long bf = 0;\n        long bg = 0;\n        long bh = 0;\n        long
    bi = 0;\n        long bj = 0;\n        long bk = 0;\n        long bl = 0;\n        long
    bm = 0;\n        long bn = 0;\n        long bo = 0;\n        long bp = 0;\n        long
    bq = 0;\n        long br = 0;\n        long bs = 0;\n        long b\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpopgf6wc_.cs(65,14): error CS1001: Identifier expected

    /tmp/tmpopgf6wc_.cs(65,14): error CS1002: ; expected

    /tmp/tmpopgf6wc_.cs(65,14): error CS1525: Invalid expression term ''as''

    /tmp/tmpopgf6wc_.cs(65,17): error CS1031: Type expected

    /tmp/tmpopgf6wc_.cs(92,15): error CS1002: ; expected

    '
  timestamp: 1659799908
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long[] fibfib = new long[n + 1];\n        fibfib[0] = 0;\n        fibfib[1]
    = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfib[i]
    = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        return fibfib[n];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Fibfib (System.Int64 n) [0x00016] in <b3e7ed18d4344dfa913763a8f8ce0c73>:0
    \n  at Problem.Main (System.String[] args) [0x00012] in <b3e7ed18d4344dfa913763a8f8ce0c73>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Fibfib (System.Int64 n) [0x00016]
    in <b3e7ed18d4344dfa913763a8f8ce0c73>:0 \n  at Problem.Main (System.String[] args)
    [0x00012] in <b3e7ed18d4344dfa913763a8f8ce0c73>:0 \n"
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        long d = 0;\n        for (long i = 3; i <= n; i++) {\n            d
    = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49e52344c34f4381993df597a7eb43ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49e52344c34f4381993df597a7eb43ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a
    = b;\n            b = c;\n            c = d;\n        }\n        return c;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a
    = b;\n            b = c;\n            c = d;\n        }\n        return c;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        long
    d = 0;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n                d
    = d + c;\n                if (d >= 1000000007) {\n                    d = d -
    1000000007;\n                }\n            }\n            c = c + b;\n            if
    (c >= 1000000007) {\n                c = c - 1000000007;\n            }\n            b
    = b + a;\n            if (b >= 1000000007) {\n                b = b - 1000000007;\n
    \           }\n            a = d;\n            n = n >> 1;\n        }\n        return
    d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11d5bc3b84ec4654ad9f769d1ab3a8cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11d5bc3b84ec4654ad9f769d1ab3a8cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (int i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        long
    d = 0;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                d
    = c * a + d * b + d * c;\n                b = b * a + b * c + c * c;\n                a
    = d;\n            }\n            d = c * c + d * b;\n            b = b * b + 2
    * c * b;\n            c = d;\n            n >>= 1;\n        }\n        return
    a;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3bbdeffcce474a8982b89310ea2fc138>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3bbdeffcce474a8982b89310ea2fc138>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        long d = 0;\n        for (long i = 3; i <= n; i++) {\n            d
    = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long[] fibfib = new long[n+1];\n        fibfib[0] = 0;\n        fibfib[1]
    = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfib[i]
    = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        return fibfib[n];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Fibfib (System.Int64 n) [0x00016] in <e5b5223d9ee7445a81572322caac87ad>:0
    \n  at Problem.Main (System.String[] args) [0x00012] in <e5b5223d9ee7445a81572322caac87ad>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Fibfib (System.Int64 n) [0x00016]
    in <e5b5223d9ee7445a81572322caac87ad>:0 \n  at Problem.Main (System.String[] args)
    [0x00012] in <e5b5223d9ee7445a81572322caac87ad>:0 \n"
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long[] fibfib = new long[n + 1];\n        fibfib[0] = 0;\n        fibfib[1]
    = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfib[i]
    = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        return fibfib[n];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Fibfib (System.Int64 n) [0x00016] in <b3e7ed18d4344dfa913763a8f8ce0c73>:0
    \n  at Problem.Main (System.String[] args) [0x00012] in <b3e7ed18d4344dfa913763a8f8ce0c73>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Fibfib (System.Int64 n) [0x00016]
    in <b3e7ed18d4344dfa913763a8f8ce0c73>:0 \n  at Problem.Main (System.String[] args)
    [0x00012] in <b3e7ed18d4344dfa913763a8f8ce0c73>:0 \n"
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        long
    d = 0;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                d
    = a + b + c;\n                a = b;\n                b = c;\n                c
    = d;\n            }\n            d = a + b;\n            a = b;\n            b
    = d;\n            n >>= 1;\n        }\n        return a;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f0d91fee58b48e4ae328c29741d5b11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f0d91fee58b48e4ae328c29741d5b11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n < 2) {\n            return 0;\n        }\n        if (n ==
    2) {\n            return 1;\n        }\n        long a = 0;\n        long b =
    0;\n        long c = 1;\n        for (long i = 3; i <= n; i++) {\n            long
    d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (int i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (int i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a
    = b;\n            b = c;\n            c = d;\n        }\n        return c;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        long d = 0;\n        for (int i = 3; i <= n; i++) {\n            d
    = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        } else if (n == 1)
    {\n            return 0;\n        } else if (n == 2) {\n            return 1;\n
    \       } else {\n            return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n
    - 3);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49e52344c34f4381993df597a7eb43ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49e52344c34f4381993df597a7eb43ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a
    = b;\n            b = c;\n            c = d;\n        }\n        return c;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n
    \   Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n
    \   Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n
    \   Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4c711cdc9fe4292aef94b049d4e101e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4c711cdc9fe4292aef94b049d4e101e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a
    = b;\n            b = c;\n            c = d;\n        }\n        return c;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       long d = 0;\n        for (int i = 3; i <= n; i++) {\n            d = a
    + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (int i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n
    \   Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n
    \   Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n
    \   Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4c711cdc9fe4292aef94b049d4e101e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4c711cdc9fe4292aef94b049d4e101e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        long d = 0;\n        for (long i = 3; i <= n; i++) {\n            d
    = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Implement this function.\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8508e3c102f04c4ea6520ffdebc01e7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8508e3c102f04c4ea6520ffdebc01e7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long[] fibfib = new long[n+1];\n        fibfib[0] = 0;\n        fibfib[1]
    = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfib[i]
    = fibfib[i-1] + fibfib[i-2] + fibfib[i-3];\n        }\n        return fibfib[n];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Fibfib (System.Int64 n) [0x00016] in <e5b5223d9ee7445a81572322caac87ad>:0
    \n  at Problem.Main (System.String[] args) [0x00012] in <e5b5223d9ee7445a81572322caac87ad>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Fibfib (System.Int64 n) [0x00016]
    in <e5b5223d9ee7445a81572322caac87ad>:0 \n  at Problem.Main (System.String[] args)
    [0x00012] in <e5b5223d9ee7445a81572322caac87ad>:0 \n"
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long[] fibfib = new long[n + 1];\n        fibfib[0]
    = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n        for (int i = 3;
    i <= n; i++) {\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i
    - 3];\n        }\n        return fibfib[n];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       long d = 0;\n        for (long i = 3; i <= n; i++) {\n            d =
    a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n < 3) {\n            return n - 1;\n        }\n        long
    a = 0;\n        long b = 0;\n        long c = 1;\n        for (long i = 3; i <=
    n; i++) {\n            long d = a + b + c;\n            a = b;\n            b
    = c;\n            c = d;\n        }\n        return c;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        long d = 0;\n        for (long i = 3; i <= n; i++) {\n            d
    = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        long
    d = 0;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n                d
    = d + c;\n                if (d >= 1000000007) {\n                    d = d -
    1000000007;\n                }\n            }\n            c = c + b;\n            if
    (c >= 1000000007) {\n                c = c - 1000000007;\n            }\n            b
    = b + a;\n            if (b >= 1000000007) {\n                b = b - 1000000007;\n
    \           }\n            a = a + d;\n            if (a >= 1000000007) {\n                a
    = a - 1000000007;\n            }\n            n = n >> 1;\n        }\n        return
    d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <78861177130b420f843f1500cc9cbd13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <78861177130b420f843f1500cc9cbd13>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a =
    b;\n            b = c;\n            c = d;\n        }\n        return c;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <09fb0018f2bc49ec851fbf7f1ed4db36>:0
    \n"
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0, b = 0, c = 1;\n        for (long i = 0; i < n; i++)
    {\n            long d = a + b + c;\n            a = b;\n            b = c;\n            c
    = d;\n        }\n        return a;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49e52344c34f4381993df597a7eb43ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <49e52344c34f4381993df597a7eb43ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        long d = 0;\n        for (long i = 3; i <= n; i++) {\n            d
    = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        long
    d = 0;\n        while (n > 0) {\n            if ((n & 1) != 0) {\n                d
    = a + b + c;\n                a = b;\n                b = c;\n                c
    = d;\n            }\n            d = a + b;\n            a = b;\n            b
    = d;\n            n >>= 1;\n        }\n        return c;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <89904117328b4f569a461ffc173775f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <89904117328b4f569a461ffc173775f0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a
    = b;\n            b = c;\n            c = d;\n        }\n        return c;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       long d = 0;\n        for (int i = 3; i <= n; i++) {\n            d = a
    + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n            a
    = b;\n            b = c;\n            c = d;\n        }\n        return c;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long[] fibfib = new long[n + 1];\n        fibfib[0] = 0;\n        fibfib[1]
    = 0;\n        fibfib[2] = 1;\n        for (int i = 3; i <= n; i++) {\n            fibfib[i]
    = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        return fibfib[n];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside
    the bounds of the array.\n  at Problem.Fibfib (System.Int64 n) [0x00016] in <b3e7ed18d4344dfa913763a8f8ce0c73>:0
    \n  at Problem.Main (System.String[] args) [0x00012] in <b3e7ed18d4344dfa913763a8f8ce0c73>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Fibfib (System.Int64 n) [0x00016]
    in <b3e7ed18d4344dfa913763a8f8ce0c73>:0 \n  at Problem.Main (System.String[] args)
    [0x00012] in <b3e7ed18d4344dfa913763a8f8ce0c73>:0 \n"
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        long
    d = 0;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                d
    = a + b + c;\n                a = b;\n                b = c;\n                c
    = d;\n            }\n            d = b + c;\n            b = c;\n            c
    = d;\n            n >>= 1;\n        }\n        return a;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b34af2bb14d545f09586c8dafbcd5c92>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b34af2bb14d545f09586c8dafbcd5c92>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       long d = 0;\n        for (long i = 3; i <= n; i++) {\n            d =
    a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        long d = 0;\n        for (long i = 3; i <= n; i++) {\n            d
    = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        long
    d = 0;\n        while (n > 0) {\n            if ((n & 1) == 1) {\n                d
    = a + b + c;\n                a = b;\n                b = c;\n                c
    = d;\n            }\n            d = a + b;\n            a = b;\n            b
    = d;\n            n >>= 1;\n        }\n        return a;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f0d91fee58b48e4ae328c29741d5b11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1f0d91fee58b48e4ae328c29741d5b11>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (int i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       long d = 0;\n        for (int i = 3; i <= n; i++) {\n            d = a
    + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n < 2) return 0;\n        if (n == 2) return 1;\n        long
    a = 0, b = 0, c = 1;\n        for (long i = 3; i <= n; i++) {\n            long
    d = a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0;\n        long b = 0;\n        long c = 1;\n        for
    (long i = 0; i < n; i++) {\n            long d = a + b + c;\n            a = b;\n
    \           b = c;\n            c = d;\n        }\n        return a;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) ==
    (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n < 3) {\n            return n - 1;\n        }\n        long
    a = 0;\n        long b = 0;\n        long c = 1;\n        for (int i = 3; i <=
    n; i++) {\n            long d = a + b + c;\n            a = b;\n            b
    = c;\n            c = d;\n        }\n        return c;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        long a = 0, b = 0, c = 1;\n        for (int i = 0; i < n; i++) {\n
    \           long d = a + b + c;\n            a = b;\n            b = c;\n            c
    = d;\n        }\n        return a;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799910
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n ==
    1) {\n            return 0;\n        }\n        if (n == 2) {\n            return
    1;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 1;\n
    \       long d = 0;\n        for (long i = 3; i <= n; i++) {\n            d =
    a + b + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        long a = 0;\n        long b = 0;\n        long c =
    1;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b + c;\n
    \           a = b;\n            b = c;\n            c = d;\n        }\n        return
    c;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        if (n == 0) return 0;\n        if (n == 1) return 0;\n        if
    (n == 2) return 1;\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n -
    3);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fibfib((2L))
    == (1L));\n    Debug.Assert(Fibfib((1L)) == (0L));\n    Debug.Assert(Fibfib((5L))
    == (4L));\n    Debug.Assert(Fibfib((8L)) == (24L));\n    Debug.Assert(Fibfib((10L))
    == (81L));\n    Debug.Assert(Fibfib((12L)) == (274L));\n    Debug.Assert(Fibfib((14L))
    == (927L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799909
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) ==
    0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n
    \   // Please write a function to efficiently compute the n-th element of the
    fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n
    \   // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long
    n) {\n        // Your code goes here.\n        return 0;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fibfib((2L)) == (1L));\n    Debug.Assert(Fibfib((1L))
    == (0L));\n    Debug.Assert(Fibfib((5L)) == (4L));\n    Debug.Assert(Fibfib((8L))
    == (24L));\n    Debug.Assert(Fibfib((10L)) == (81L));\n    Debug.Assert(Fibfib((12L))
    == (274L));\n    Debug.Assert(Fibfib((14L)) == (927L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3eb1cefe65d4d5a93d50fb09d9ab86d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659799909
