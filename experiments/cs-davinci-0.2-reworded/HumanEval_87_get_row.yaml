name: HumanEval_87_get_row
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n   \
  \ // which is similar to matrix, however, unlike matrices,\n    // each row may\
  \ contain a different number of columns.\n    // Given lst, and integer x, find\
  \ integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2)\
  \ ...] such that\n    // each tuple is a coordinate - (row, columns), starting with\
  \ 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also,\
  \ sort coordinates of the row by columns in descending order.\n    // Examples:\n\
  \    // >>> GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)1L})})), (1L))\n    // (new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L,\
  \ 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L,\
  \ 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))\n    // >>> GetRow((new List<List<long>>()),\
  \ (1L))\n    // (new List<Tuple<long, long>>())\n    // >>> GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)1L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})})), (3L))\n\
  \    // (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L,\
  \ 2L)}))\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst,\
  \ long x) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),\
  \ (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,\
  \ long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,\
  \ long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),\
  \ (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),\
  \ (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new\
  \ List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
completions: ["        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create(i, j));\n                }\n            }\n \
    \       }\n        result.Sort((a, b) => {\n            if (a.Item1 == b.Item1)\
    \ {\n                return b.Item2.CompareTo(a.Item2);\n            }\n     \
    \       return a.Item1.CompareTo(b.Item1);\n        });\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return\
    \ result;", "        var result = new List<Tuple<long, long>>();\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return (int)(a.Item1 - b.Item1);\n          \
    \  }\n            return (int)(b.Item2 - a.Item2);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create(i, j));\n                }\n            }\n \
    \       }\n        result.Sort((a, b) => {\n            if (a.Item1 != b.Item1)\
    \ {\n                return a.Item1.CompareTo(b.Item1);\n            }\n     \
    \       return -a.Item2.CompareTo(b.Item2);\n        });\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        // Your code goes here\n        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n  \
    \              if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n       \
    \ return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 != b.Item1) {\n                return (int)(a.Item1 - b.Item1);\n\
    \            }\n            return (int)(b.Item2 - a.Item2);\n        });\n  \
    \      return result;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    res.Add(Tuple.Create(i, j));\n                }\n\
    \            }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ res;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        res.Add(Tuple.Create((long)i, (long)j));\n                }\n       \
    \     }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1 == b.Item1)\
    \ {\n                return b.Item2.CompareTo(a.Item2);\n            }\n     \
    \       return a.Item1.CompareTo(b.Item1);\n        });\n        return res;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        // Your code goes here.\n        return null;",
  "        var result = new List<Tuple<long, long>>();\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n\
    \                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 < b.Item1) {\n                return -1;\n\
    \            } else if (a.Item1 > b.Item1) {\n                return 1;\n    \
    \        } else {\n                if (a.Item2 > b.Item2) {\n                \
    \    return -1;\n                } else if (a.Item2 < b.Item2) {\n           \
    \         return 1;\n                } else {\n                    return 0;\n\
    \                }\n            }\n        });\n        return result;", "   \
    \     // Your code here\n        return null;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n             \
    \   if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        // Your code goes here.\n        return null;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (var i = 0; i < lst.Count; i++) {\n            var row = lst[i];\n\
    \            for (var j = 0; j < row.Count; j++) {\n                if (row[j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            var row = lst[i];\n\
    \            for (int j = 0; j < row.Count; j++) {\n                if (row[j]\
    \ == x) {\n                    result.Add(Tuple.Create((long)i, (long)j));\n \
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n\
    \            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ < b.Item1) {\n                return -1;\n            } else if (a.Item1 > b.Item1)\
    \ {\n                return 1;\n            } else {\n                if (a.Item2\
    \ > b.Item2) {\n                    return -1;\n                } else if (a.Item2\
    \ < b.Item2) {\n                    return 1;\n                } else {\n    \
    \                return 0;\n                }\n            }\n        });\n  \
    \      return result;", "        // Your code goes here\n        return null;",
  "        var result = new List<Tuple<long, long>>();\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n\
    \                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create(i, j));\n                }\n            }\n \
    \       }\n        result.Sort((a, b) => {\n            if (a.Item1 == b.Item1)\
    \ {\n                return b.Item2.CompareTo(a.Item2);\n            }\n     \
    \       return a.Item1.CompareTo(b.Item1);\n        });\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            var row = lst[i];\n\
    \            for (int j = 0; j < row.Count; j++) {\n                if (row[j]\
    \ == x) {\n                    result.Add(Tuple.Create((long)i, (long)j));\n \
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n\
    \            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1 ==\
    \ b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n           \
    \ }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        // Your code goes here.\n        return null;", "       \
    \ // your code here\n        return null;", "        var res = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 res.Add(Tuple.Create((long)i, (long)j));\n                }\n\
    \            }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1\
    \ < b.Item1) {\n                return -1;\n            } else if (a.Item1 > b.Item1)\
    \ {\n                return 1;\n            } else {\n                if (a.Item2\
    \ > b.Item2) {\n                    return -1;\n                } else if (a.Item2\
    \ < b.Item2) {\n                    return 1;\n                } else {\n    \
    \                return 0;\n                }\n            }\n        });\n  \
    \      return res;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        // Your code goes here.\n        return null;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((a, b)\
    \ => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1 ==\
    \ b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n           \
    \ }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create(i, j));\n                }\n            }\n \
    \       }\n        result.Sort((a, b) => {\n            if (a.Item1 < b.Item1)\
    \ {\n                return -1;\n            } else if (a.Item1 > b.Item1) {\n\
    \                return 1;\n            } else {\n                if (a.Item2\
    \ > b.Item2) {\n                    return -1;\n                } else if (a.Item2\
    \ < b.Item2) {\n                    return 1;\n                } else {\n    \
    \                return 0;\n                }\n            }\n        });\n  \
    \      return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var res = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        res.Add(Tuple.Create((long)i, (long)j));\n                }\n       \
    \     }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1 == b.Item1)\
    \ {\n                return b.Item2.CompareTo(a.Item2);\n            }\n     \
    \       return a.Item1.CompareTo(b.Item1);\n        });\n        return res;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ < b.Item1) {\n                return -1;\n            } else if (a.Item1 > b.Item1)\
    \ {\n                return 1;\n            } else {\n                if (a.Item2\
    \ > b.Item2) {\n                    return -1;\n                } else if (a.Item2\
    \ < b.Item2) {\n                    return 1;\n                } else {\n    \
    \                return 0;\n                }\n            }\n        });\n  \
    \      return result;", "        // Your code goes here.\n        return null;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((a, b)\
    \ => {\n            if (a.Item1 == b.Item1) {\n                return -a.Item2.CompareTo(b.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var res = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        res.Add(Tuple.Create((long)i, (long)j));\n                }\n       \
    \     }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1 == b.Item1)\
    \ {\n                return b.Item2.CompareTo(a.Item2);\n            }\n     \
    \       return a.Item1.CompareTo(b.Item1);\n        });\n        return res;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return\
    \ result;", "        // Your code goes here.\n        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n             \
    \   if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        // Your code goes here.\n        return null;",
  "        var result = new List<Tuple<long, long>>();\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n\
    \                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 res.Add(Tuple.Create((long)i, (long)j));\n                }\n\
    \            }\n        }\n        res.Sort((a, b) => a.Item1.CompareTo(b.Item1));\n\
    \        for (int i = 0; i < res.Count; i++) {\n            for (int j = i + 1;\
    \ j < res.Count; j++) {\n                if (res[i].Item1 == res[j].Item1) {\n\
    \                    if (res[i].Item2 < res[j].Item2) {\n                    \
    \    Tuple<long, long> tmp = res[i];\n                        res[i] = res[j];\n\
    \                        res[j] = tmp;\n                    }\n              \
    \  }\n            }\n        }\n        return res;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n  \
    \              if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n       \
    \ return result;", "        // Your code goes here.\n        return null;", " \
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n    \
    \    for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 res.Add(Tuple.Create((long)i, (long)j));\n                }\n\
    \            }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ res;", "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        res.Add(Tuple.Create((long)i, (long)j));\n                }\n       \
    \     }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1 != b.Item1)\
    \ {\n                return a.Item1.CompareTo(b.Item1);\n            }\n     \
    \       return -a.Item2.CompareTo(b.Item2);\n        });\n        return res;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 res.Add(Tuple.Create((long)i, (long)j));\n                }\n\
    \            }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n       \
    \ return res;", "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        res.Add(Tuple.Create((long)i, (long)j));\n                }\n       \
    \     }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1 < b.Item1)\
    \ {\n                return -1;\n            } else if (a.Item1 > b.Item1) {\n\
    \                return 1;\n            } else {\n                if (a.Item2\
    \ > b.Item2) {\n                    return -1;\n                } else if (a.Item2\
    \ < b.Item2) {\n                    return 1;\n                } else {\n    \
    \                return 0;\n                }\n            }\n        });\n  \
    \      return res;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return (int)(b.Item2 - a.Item2);\n \
    \           }\n            return (int)(a.Item1 - b.Item1);\n        });\n   \
    \     return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1 ==\
    \ b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n           \
    \ }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create(i, j));\n                }\n            }\n \
    \       }\n        result.Sort((a, b) => {\n            if (a.Item1 != b.Item1)\
    \ {\n                return a.Item1.CompareTo(b.Item1);\n            }\n     \
    \       return -a.Item2.CompareTo(b.Item2);\n        });\n        return result;",
  "        var result = new List<Tuple<long, long>>();\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n\
    \                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 < b.Item1) {\n                return -1;\n            } else if (a.Item1\
    \ > b.Item1) {\n                return 1;\n            } else {\n            \
    \    if (a.Item2 > b.Item2) {\n                    return -1;\n              \
    \  } else if (a.Item2 < b.Item2) {\n                    return 1;\n          \
    \      } else {\n                    return 0;\n                }\n          \
    \  }\n        });\n        return result;", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if\
    \ (lst[i][j] == x) {\n                    result.Add(Tuple.Create(i, j));\n  \
    \              }\n            }\n        }\n        result.Sort((a, b) => {\n\
    \            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        var res = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        res.Add(Tuple.Create(i, j));\n                }\n            }\n    \
    \    }\n        return res.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();",
  "        var res = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n             \
    \   if (lst[i][j] == x) {\n                    res.Add(Tuple.Create((long)i, (long)j));\n\
    \                }\n            }\n        }\n        res.Sort((a, b) => {\n \
    \           if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return res;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 res.Add(Tuple.Create(i, j));\n                }\n          \
    \  }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1 != b.Item1)\
    \ {\n                return a.Item1.CompareTo(b.Item1);\n            }\n     \
    \       return -a.Item2.CompareTo(b.Item2);\n        });\n        return res;",
  "        var result = new List<Tuple<long, long>>();\n        for (int i = 0; i\
    \ < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n\
    \                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((a, b)\
    \ => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 res.Add(Tuple.Create((long)i, (long)j));\n                }\n\
    \            }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return\
    \ res;", "        // Your code goes here.\n        return null;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n  \
    \              if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 < b.Item1) {\n                return -1;\n\
    \            } else if (a.Item1 > b.Item1) {\n                return 1;\n    \
    \        } else {\n                if (a.Item2 > b.Item2) {\n                \
    \    return -1;\n                } else if (a.Item2 < b.Item2) {\n           \
    \         return 1;\n                } else {\n                    return 0;\n\
    \                }\n            }\n        });\n        return result;", "   \
    \     List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n      \
    \  for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        // Your code goes here.\n        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n  \
    \              if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            var row = lst[i];\n\
    \            for (int j = 0; j < row.Count; j++) {\n                if (row[j]\
    \ == x) {\n                    result.Add(Tuple.Create((long)i, (long)j));\n \
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n\
    \            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n       \
    \ return result;", "        var result = new List<Tuple<long, long>>();\n    \
    \    for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n       \
    \ return result;", "        var result = new List<Tuple<long, long>>();\n    \
    \    for (long i = 0; i < lst.Count; i++) {\n            for (long j = 0; j <\
    \ lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j] == x) {\n\
    \                    result.Add(Tuple.Create(i, j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        var res = new List<Tuple<long, long>>();\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    res.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        res.Sort((a, b) =>\
    \ {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return res;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 res.Add(Tuple.Create((long)i, (long)j));\n                }\n\
    \            }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ res;", "        var result = new List<Tuple<long, long>>();\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 < b.Item1) {\n                return -1;\n\
    \            } else if (a.Item1 > b.Item1) {\n                return 1;\n    \
    \        } else {\n                if (a.Item2 > b.Item2) {\n                \
    \    return -1;\n                } else if (a.Item2 < b.Item2) {\n           \
    \         return 1;\n                } else {\n                    return 0;\n\
    \                }\n            }\n        });\n        return result;", "   \
    \     List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n      \
    \  for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        // Your code goes here\n        return null;",
  "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        for\
    \ (long i = 0; i < lst.Count; i++) {\n            for (long j = 0; j < lst[(int)i].Count;\
    \ j++) {\n                if (lst[(int)i][(int)j] == x) {\n                  \
    \  res.Add(Tuple.Create(i, j));\n                }\n            }\n        }\n\
    \        res.Sort((a, b) => {\n            if (a.Item1 == b.Item1) {\n       \
    \         return b.Item2.CompareTo(a.Item2);\n            }\n            return\
    \ a.Item1.CompareTo(b.Item1);\n        });\n        return res;", "        var\
    \ result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            var row = lst[i];\n            for (int j = 0; j < row.Count;\
    \ j++) {\n                if (row[j] == x) {\n                    result.Add(Tuple.Create(i,\
    \ j));\n                }\n            }\n        }\n        result.Sort((a, b)\
    \ => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        var result = new List<Tuple<long, long>>();\n        for\
    \ (long i = 0; i < lst.Count; i++) {\n            for (long j = 0; j < lst[(int)i].Count;\
    \ j++) {\n                if (lst[(int)i][(int)j] == x) {\n                  \
    \  result.Add(Tuple.Create(i, j));\n                }\n            }\n       \
    \ }\n        result.Sort((a, b) => {\n            if (a.Item1 != b.Item1) {\n\
    \                return a.Item1.CompareTo(b.Item1);\n            }\n         \
    \   return -a.Item2.CompareTo(b.Item2);\n        });\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (long i = 0; i < lst.Count; i++) {\n            for (long j = 0; j < lst[(int)i].Count;\
    \ j++) {\n                if (lst[(int)i][(int)j] == x) {\n                  \
    \  result.Add(Tuple.Create(i, j));\n                }\n            }\n       \
    \ }\n        result.Sort((a, b) => {\n            if (a.Item1 < b.Item1) {\n \
    \               return -1;\n            } else if (a.Item1 > b.Item1) {\n    \
    \            return 1;\n            } else {\n                if (a.Item2 > b.Item2)\
    \ {\n                    return -1;\n                } else if (a.Item2 < b.Item2)\
    \ {\n                    return 1;\n                } else {\n               \
    \     return 0;\n                }\n            }\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n       \
    \ return result;", "        // Your code goes here\n        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n             \
    \   if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1 ==\
    \ b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n           \
    \ }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        var result = new List<Tuple<long, long>>();\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            var row = lst[i];\n         \
    \   for (int j = 0; j < row.Count; j++) {\n                if (row[j] == x) {\n\
    \                    result.Add(Tuple.Create(i, j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        res.Add(Tuple.Create((long)i, (long)j));\n                }\n       \
    \     }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1 < b.Item1)\
    \ {\n                return -1;\n            } else if (a.Item1 > b.Item1) {\n\
    \                return 1;\n            } else {\n                if (a.Item2\
    \ > b.Item2) {\n                    return -1;\n                } else if (a.Item2\
    \ < b.Item2) {\n                    return 1;\n                } else {\n    \
    \                return 0;\n                }\n            }\n        });\n  \
    \      return res;", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 res.Add(Tuple.Create((long)i, (long)j));\n                }\n\
    \            }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ res;", "        var result = new List<Tuple<long, long>>();\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1 ==\
    \ b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n           \
    \ }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        var result = new List<Tuple<long, long>>();\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            var row = lst[i];\n         \
    \   for (int j = 0; j < row.Count; j++) {\n                if (row[j] == x) {\n\
    \                    result.Add(Tuple.Create((long)i, (long)j));\n           \
    \     }\n            }\n        }\n        result.Sort((a, b) => {\n         \
    \   if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        long row = 0;\n        foreach (List<long> l in lst) {\n            long\
    \ col = 0;\n            foreach (long i in l) {\n                if (i == x) {\n\
    \                    result.Add(Tuple.Create(row, col));\n                }\n\
    \                col++;\n            }\n            row++;\n        }\n      \
    \  result.Sort((a, b) => {\n            if (a.Item1 == b.Item1) {\n          \
    \      return b.Item2.CompareTo(a.Item2);\n            }\n            return a.Item1.CompareTo(b.Item1);\n\
    \        });\n        return result;", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if\
    \ (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i, (long)j));\n\
    \                }\n            }\n        }\n        result.Sort((a, b) => {\n\
    \            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ < b.Item1) {\n                return -1;\n            } else if (a.Item1 > b.Item1)\
    \ {\n                return 1;\n            } else {\n                if (a.Item2\
    \ > b.Item2) {\n                    return -1;\n                } else if (a.Item2\
    \ < b.Item2) {\n                    return 1;\n                } else {\n    \
    \                return 0;\n                }\n            }\n        });\n  \
    \      return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            var row = lst[i];\n\
    \            for (int j = 0; j < row.Count; j++) {\n                if (row[j]\
    \ == x) {\n                    result.Add(Tuple.Create((long)i, (long)j));\n \
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n\
    \            if (a.Item1 < b.Item1) {\n                return -1;\n          \
    \  } else if (a.Item1 > b.Item1) {\n                return 1;\n            } else\
    \ {\n                if (a.Item2 > b.Item2) {\n                    return -1;\n\
    \                } else if (a.Item2 < b.Item2) {\n                    return 1;\n\
    \                } else {\n                    return 0;\n                }\n\
    \            }\n        });\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n  \
    \              if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        res.Add(Tuple.Create((long)i, (long)j));\n                }\n       \
    \     }\n        }\n        res.Sort((a, b) => {\n            if (a.Item1 == b.Item1)\
    \ {\n                return b.Item2.CompareTo(a.Item2);\n            }\n     \
    \       return a.Item1.CompareTo(b.Item1);\n        });\n        return res;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1 <\
    \ b.Item1) {\n                return -1;\n            } else if (a.Item1 > b.Item1)\
    \ {\n                return 1;\n            } else {\n                if (a.Item2\
    \ > b.Item2) {\n                    return -1;\n                } else if (a.Item2\
    \ < b.Item2) {\n                    return 1;\n                } else {\n    \
    \                return 0;\n                }\n            }\n        });\n  \
    \      return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        var result = new List<Tuple<long, long>>();\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1 ==\
    \ b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n           \
    \ }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n        \
    \    }\n            return a.Item1.CompareTo(b.Item1);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create(i, j));\n                }\n            }\n \
    \       }\n        result.Sort((a, b) => {\n            if (a.Item1 == b.Item1)\
    \ {\n                return b.Item2.CompareTo(a.Item2);\n            }\n     \
    \       return a.Item1.CompareTo(b.Item1);\n        });\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        // Your code goes here.\n        return null;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create(i, j));\n                }\n            }\n \
    \       }\n        result.Sort((a, b) => {\n            if (a.Item1 == b.Item1)\
    \ {\n                return b.Item2.CompareTo(a.Item2);\n            }\n     \
    \       return a.Item1.CompareTo(b.Item1);\n        });\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1 !=\
    \ b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n           \
    \ }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create(i, j));\n                }\n            }\n \
    \       }\n        result.Sort((a, b) => {\n            if (a.Item1 == b.Item1)\
    \ {\n                return b.Item2.CompareTo(a.Item2);\n            }\n     \
    \       return a.Item1.CompareTo(b.Item1);\n        });\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            var row = lst[i];\n\
    \            for (int j = 0; j < row.Count; j++) {\n                if (row[j]\
    \ == x) {\n                    result.Add(Tuple.Create((long)i, (long)j));\n \
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n\
    \            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (var i = 0; i < lst.Count; i++) {\n            for (var j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create(i, j));\n                }\n            }\n \
    \       }\n        result.Sort((a, b) => {\n            if (a.Item1 < b.Item1)\
    \ {\n                return -1;\n            }\n            if (a.Item1 > b.Item1)\
    \ {\n                return 1;\n            }\n            if (a.Item2 > b.Item2)\
    \ {\n                return -1;\n            }\n            if (a.Item2 < b.Item2)\
    \ {\n                return 1;\n            }\n            return 0;\n       \
    \ });\n        return result;", "        List<Tuple<long, long>> result = new\
    \ List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++) {\n\
    \            for (int j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]\
    \ == x) {\n                    result.Add(Tuple.Create((long)i, (long)j));\n \
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n\
    \            if (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create(i, j));\n                }\n       \
    \     }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1 !=\
    \ b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n           \
    \ }\n            return b.Item2.CompareTo(a.Item2);\n        });\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j\
    \ < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n            \
    \        result.Add(Tuple.Create((long)i, (long)j));\n                }\n    \
    \        }\n        }\n        result.Sort((a, b) => {\n            if (a.Item1\
    \ != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n        \
    \    }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n       \
    \ return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            var row = lst[i];\n\
    \            for (int j = 0; j < row.Count; j++) {\n                if (row[j]\
    \ == x) {\n                    result.Add(Tuple.Create((long)i, (long)j));\n \
    \               }\n            }\n        }\n        result.Sort((a, b) => {\n\
    \            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return -a.Item2.CompareTo(b.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 != b.Item1) {\n                return a.Item1.CompareTo(b.Item1);\n\
    \            }\n            return b.Item2.CompareTo(a.Item2);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (int i = 0; i < lst.Count; i++) {\n            for (int\
    \ j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j] == x) {\n   \
    \                 result.Add(Tuple.Create((long)i, (long)j));\n              \
    \  }\n            }\n        }\n        result.Sort((a, b) => {\n            if\
    \ (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        // Your code goes here.\n        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        for (int i = 0; i <\
    \ lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count; j++) {\n  \
    \              if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        for (long i = 0; i < lst.Count; i++) {\n            for (long\
    \ j = 0; j < lst[(int)i].Count; j++) {\n                if (lst[(int)i][(int)j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 < b.Item1) {\n                return -1;\n            } else if\
    \ (a.Item1 > b.Item1) {\n                return 1;\n            } else {\n   \
    \             if (a.Item2 > b.Item2) {\n                    return -1;\n     \
    \           } else if (a.Item2 < b.Item2) {\n                    return 1;\n \
    \               } else {\n                    return 0;\n                }\n \
    \           }\n        });\n        return result;", "        var result = new\
    \ List<Tuple<long, long>>();\n        for (var i = 0; i < lst.Count; i++) {\n\
    \            for (var j = 0; j < lst[i].Count; j++) {\n                if (lst[i][j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ var cmp = a.Item1.CompareTo(b.Item1);\n            if (cmp != 0) {\n       \
    \         return cmp;\n            }\n            return -a.Item2.CompareTo(b.Item2);\n\
    \        });\n        return result;", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        for (int i = 0; i < lst.Count; i++)\
    \ {\n            for (int j = 0; j < lst[i].Count; j++) {\n                if\
    \ (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i, (long)j));\n\
    \                }\n            }\n        }\n        result.Sort((a, b) => {\n\
    \            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        var row = 0;\n        foreach (var r in lst) {\n            var col =\
    \ 0;\n            foreach (var c in r) {\n                if (c == x) {\n    \
    \                result.Add(Tuple.Create(row, col));\n                }\n    \
    \            col++;\n            }\n            row++;\n        }\n        return\
    \ result;", "        var result = new List<Tuple<long, long>>();\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            for (int j = 0; j < lst[i].Count;\
    \ j++) {\n                if (lst[i][j] == x) {\n                    result.Add(Tuple.Create((long)i,\
    \ (long)j));\n                }\n            }\n        }\n        result.Sort((a,\
    \ b) => {\n            if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        for (var i = 0; i < lst.Count; i++) {\n            var row = lst[i];\n\
    \            for (var j = 0; j < row.Count; j++) {\n                if (row[j]\
    \ == x) {\n                    result.Add(Tuple.Create(i, j));\n             \
    \   }\n            }\n        }\n        result.Sort((a, b) => {\n           \
    \ if (a.Item1 == b.Item1) {\n                return b.Item2.CompareTo(a.Item2);\n\
    \            }\n            return a.Item1.CompareTo(b.Item1);\n        });\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
